<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://blog.codefarm.me/feed.xml" rel="self" type="application/atom+xml" /><link href="https://blog.codefarm.me/" rel="alternate" type="text/html" /><updated>2023-04-21T11:35:27+08:00</updated><id>https://blog.codefarm.me/feed.xml</id><title type="html">CODE FARM</title><subtitle>All animals are equal but some animals are more equal than others.</subtitle><entry><title type="html">Intro to SQL Server Database</title><link href="https://blog.codefarm.me/2023/04/06/sql-server-database/" rel="alternate" type="text/html" title="Intro to SQL Server Database" /><published>2023-04-06T10:14:18+08:00</published><updated>2023-04-06T10:14:18+08:00</updated><id>https://blog.codefarm.me/2023/04/06/sql-server-database</id><content type="html" xml:base="https://blog.codefarm.me/2023/04/06/sql-server-database/">&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#deploy-and-connect-to-sql-server-linux-containers&quot;&gt;1. Deploy and connect to SQL Server Linux containers&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#pull-and-run-the-sql-server-linux-container-image&quot;&gt;1.1. Pull and run the SQL Server Linux container image&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#connect-to-sql-server&quot;&gt;1.2. Connect to SQL Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#create-and-query-data&quot;&gt;1.3. Create and query data&lt;/a&gt;
&lt;ul class=&quot;sectlevel3&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#create-a-new-database&quot;&gt;1.3.1. Create a new database&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#insert-data&quot;&gt;1.3.2. Insert data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#select-data&quot;&gt;1.3.3. Select data&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#databases&quot;&gt;2. Databases&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#basic-information-about-databases&quot;&gt;2.1. Basic Information about Databases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#working-with-databases&quot;&gt;2.2. Working with Databases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#system-databases&quot;&gt;2.3. System Databases&lt;/a&gt;
&lt;ul class=&quot;sectlevel3&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#master-database&quot;&gt;2.3.1. master Database&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#contained-databases&quot;&gt;2.4. Contained Databases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#database-files-and-filegroups&quot;&gt;2.5. Database Files and Filegroups&lt;/a&gt;
&lt;ul class=&quot;sectlevel3&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#database-files&quot;&gt;2.5.1. Database Files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#logical-and-physical-file-names&quot;&gt;2.5.2. Logical and Physical File Names&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#database-engine-permissions-and-principals&quot;&gt;3. Database Engine Permissions and Principals&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#security-principals&quot;&gt;3.1. Security principals&lt;/a&gt;
&lt;ul class=&quot;sectlevel3&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#logins&quot;&gt;3.1.1. Logins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#fixed-server-roles&quot;&gt;3.1.2. Fixed server roles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#user-defined-server-roles&quot;&gt;3.1.3. User-defined server roles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#database-users&quot;&gt;3.1.4. Database users&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#fixed-database-roles&quot;&gt;3.1.5. Fixed database roles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#user-defined-database-roles&quot;&gt;3.1.6. User-defined database roles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#other-principals&quot;&gt;3.1.7. Other principals&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#assign-permissions&quot;&gt;3.2. Assign permissions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#permission-hierarchy&quot;&gt;3.3. Permission hierarchy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#monitor-permissions&quot;&gt;3.4. Monitor permissions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#principals-database-engine&quot;&gt;3.5. Principals (Database Engine)&lt;/a&gt;
&lt;ul class=&quot;sectlevel3&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#sql-server-level-principals&quot;&gt;3.5.1. SQL Server-level principals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#database-level-principals&quot;&gt;3.5.2. Database-level principals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sa-login&quot;&gt;3.5.3. sa Login&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#dbo-user-and-dbo-schema&quot;&gt;3.5.4. dbo User and dbo Schema&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#public-server-role-and-database-role&quot;&gt;3.5.5. public Server Role and Database Role&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sql-and-t-sql&quot;&gt;4. SQL and T-SQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sql-server-utilities-statements-go&quot;&gt;5. SQL Server Utilities Statements - GO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#transact-sql-syntax-conventions-transact-sql&quot;&gt;6. Transact-SQL syntax conventions (Transact-SQL)&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#multipart-names&quot;&gt;6.1. Multipart names&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#tutorial-write-transact-sql-statements&quot;&gt;7. Tutorial: Write Transact-SQL statements&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#lesson-1-create-and-query-database-objects&quot;&gt;7.1. Lesson 1: Create and query database objects&lt;/a&gt;
&lt;ul class=&quot;sectlevel3&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#create-a-database&quot;&gt;7.1.1. Create a database&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#create-a-table&quot;&gt;7.1.2. Create a Table&lt;/a&gt;
&lt;ul class=&quot;sectlevel4&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#switch-the-query-editor-connection-to-the-testdata-database&quot;&gt;7.1.2.1. Switch the Query Editor connection to the TestData database&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#create-the-table&quot;&gt;7.1.2.2. Create the table&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#insert-and-update-data-in-a-table&quot;&gt;7.1.3. Insert and update data in a table&lt;/a&gt;
&lt;ul class=&quot;sectlevel4&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#insert-data-into-a-table&quot;&gt;7.1.3.1. Insert data into a table&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#update-the-products-table&quot;&gt;7.1.3.2. Update the products table&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#read-data-from-a-table&quot;&gt;7.1.4. Read data from a table&lt;/a&gt;
&lt;ul class=&quot;sectlevel4&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#read-the-data-in-a-table&quot;&gt;7.1.4.1. Read the data in a table&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#useful-functions-in-a-select-statement&quot;&gt;7.1.4.2. Useful functions in a SELECT statement&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#create-views-and-stored-procedures&quot;&gt;7.1.5. Create views and stored procedures&lt;/a&gt;
&lt;ul class=&quot;sectlevel4&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#create-a-view&quot;&gt;7.1.5.1. Create a view&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#test-the-view&quot;&gt;7.1.5.2. Test the view&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#create-a-stored-procedure&quot;&gt;7.1.5.3. Create a stored procedure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#test-the-stored-procedure&quot;&gt;7.1.5.4. Test the stored procedure&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#lesson-2-configure-permissions-on-database-objects&quot;&gt;7.2. Lesson 2: Configure permissions on database objects&lt;/a&gt;
&lt;ul class=&quot;sectlevel3&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#create-a-login&quot;&gt;7.2.1. Create a login&lt;/a&gt;
&lt;ul class=&quot;sectlevel4&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#create-a-new-windows-account&quot;&gt;7.2.1.1. Create a new Windows account&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#create-a-sql-login-using-windows-authentication-with-t-sql&quot;&gt;7.2.1.2. Create a SQL login  using Windows Authentication with T-SQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#create-a-login-using-sql-server-authentication-with-t-sql&quot;&gt;7.2.1.3. Create a login using SQL Server Authentication with T-SQL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#grant-access-to-a-database&quot;&gt;7.2.2. Grant access to a database&lt;/a&gt;
&lt;ul class=&quot;sectlevel4&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#create-a-user-in-a-database&quot;&gt;7.2.2.1. Create a user in a database&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#create-views-and-stored-procedures-2&quot;&gt;7.2.2.2. Create views and stored procedures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#about-grant&quot;&gt;7.2.2.3. About GRANT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#lesson-3-delete-database-objects&quot;&gt;7.3. Lesson 3: Delete database objects&lt;/a&gt;
&lt;ul class=&quot;sectlevel3&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#revoke-stored-procedure-permissions&quot;&gt;7.3.1. Revoke stored procedure permissions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#drop-permissions&quot;&gt;7.3.2. Drop permissions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#delete-table&quot;&gt;7.3.3. Delete table&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#remove-database&quot;&gt;7.3.4. Remove database&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#references&quot;&gt;8. References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;deploy-and-connect-to-sql-server-linux-containers&quot;&gt;1. Deploy and connect to SQL Server Linux containers&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this quickstart, you&amp;#8217;ll use Docker to pull and run the SQL Server 2022 (16.x) Linux container image, &lt;a href=&quot;https://hub.docker.com/_/microsoft-mssql-server&quot;&gt;mssql-server-linux&lt;/a&gt;. Then you can connect with &lt;strong&gt;sqlcmd&lt;/strong&gt; to create your first database and run queries.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;pull-and-run-the-sql-server-linux-container-image&quot;&gt;1.1. Pull and run the SQL Server Linux container image&lt;/h3&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Pull the SQL Server 2022 (16.x) Linux container image from the Microsoft Container Registry.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;docker pull mcr.microsoft.com/mssql/server:2022-latest&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To run the Linux container image with Docker, you can use the following command from a bash shell or elevated PowerShell command prompt.&lt;/p&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
The &lt;code&gt;SA_PASSWORD&lt;/code&gt; environment variable is deprecated. Please use &lt;code&gt;MSSQL_SA_PASSWORD&lt;/code&gt; instead.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ACCEPT_EULA=Y&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;MSSQL_SA_PASSWORD=&amp;lt;YourStrong@Passw0rd&amp;gt;&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 1433:1433 &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; sql1 &lt;span class=&quot;nt&quot;&gt;--hostname&lt;/span&gt; sql1 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   mcr.microsoft.com/mssql/server:2022-latest&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Your password should follow the SQL Server default password policy, otherwise the container can&amp;#8217;t set up SQL Server and will stop working. By default, the password must be at least eight characters long and contain characters from three of the following four sets: uppercase letters, lowercase letters, base-10 digits, and symbols.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By default, this quickstart creates a container with the Developer edition of SQL Server. The process for running production editions in containers is slightly different.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To view your Docker containers, use the &lt;code&gt;docker ps&lt;/code&gt; command.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;shell&quot;&gt;docker ps&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You should see output similar to the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;CONTAINER ID   IMAGE                                        COMMAND                  CREATED          STATUS        PORTS                                       NAMES
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;274554ac9f0d   mcr.microsoft.com/mssql/server:2022-latest   &quot;/opt/mssql/bin/perm…&quot;   42 seconds ago   Up 1 second   0.0.0.0:1433-&amp;gt;&lt;/span&gt;1433/tcp, :::1433-&amp;gt;1433/tcp   sql1&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the &lt;code&gt;STATUS&lt;/code&gt; column shows a status of &lt;code&gt;Up&lt;/code&gt;, then SQL Server is running in the container and listening on the port specified in the &lt;code&gt;PORTS&lt;/code&gt; column. If the &lt;code&gt;STATUS&lt;/code&gt; column for your SQL Server container shows &lt;code&gt;Exited&lt;/code&gt;, see the &lt;a href=&quot;https://learn.microsoft.com/en-us/sql/linux/sql-server-linux-docker-container-troubleshooting?view=sql-server-ver16&quot;&gt;Troubleshooting section of the configuration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;connect-to-sql-server&quot;&gt;1.2. Connect to SQL Server&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following steps use the SQL Server command-line tool, sqlcmd, inside the container to connect to SQL Server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Use the &lt;code&gt;docker exec -it&lt;/code&gt; command to start an interactive bash shell inside your running container. In the following example &lt;code&gt;sql1&lt;/code&gt; is name specified by the &lt;code&gt;--name&lt;/code&gt; parameter when you created the container.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; sql1 &lt;span class=&quot;s2&quot;&gt;&quot;bash&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Once inside the container, connect locally with &lt;strong&gt;sqlcmd&lt;/strong&gt;, using its full path.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;shell&quot;&gt;/opt/mssql-tools/bin/sqlcmd &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; localhost &lt;span class=&quot;nt&quot;&gt;-U&lt;/span&gt; SA &lt;span class=&quot;nt&quot;&gt;-P&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;YourStrong@Passw0rd&amp;gt;&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
You can omit the password on the command-line to be prompted to enter it. Here&amp;#8217;s an example:
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;shell&quot;&gt;/opt/mssql-tools/bin/sqlcmd &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; localhost &lt;span class=&quot;nt&quot;&gt;-U&lt;/span&gt; SA&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If successful, you should get to a &lt;strong&gt;sqlcmd&lt;/strong&gt; command prompt: &lt;code&gt;1&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;create-and-query-data&quot;&gt;1.3. Create and query data&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following sections walk you through using &lt;strong&gt;sqlcmd&lt;/strong&gt; and Transact-SQL to create a new database, add data, and run a query.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;create-a-new-database&quot;&gt;1.3.1. Create a new database&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following steps create a new database named &lt;code&gt;TestDB&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;From the sqlcmd command prompt, paste the following Transact-SQL command to create a test database:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DATABASE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestDB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On the next line, write a query to return the name of all of the databases on your server:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;databases&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The previous two commands weren&amp;#8217;t run immediately. Type &lt;code&gt;GO&lt;/code&gt; on a new line to run the previous commands:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;insert-data&quot;&gt;1.3.2. Insert data&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next create a new table, Inventory, and insert two new rows.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;From the &lt;em&gt;sqlcmd&lt;/em&gt; command prompt, switch context to the new &lt;em&gt;TestDB&lt;/em&gt; database:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;n&quot;&gt;USE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestDB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create new table named &lt;code&gt;Inventory&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Inventory&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;INT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NVARCHAR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;quantity&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;INT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Insert data into the new table:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Inventory&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'banana'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;150&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Inventory&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'orange'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;154&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Type &lt;code&gt;GO&lt;/code&gt; to run the previous commands:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;select-data&quot;&gt;1.3.3. Select data&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, run a query to return data from the &lt;code&gt;Inventory&lt;/code&gt; table.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;From the &lt;em&gt;sqlcmd&lt;/em&gt; command prompt, enter a query that returns rows from the &lt;code&gt;Inventory&lt;/code&gt; table where the quantity is greater than 152:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Inventory&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;quantity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;152&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run the command:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Exit the sqlcmd command prompt&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To end your sqlcmd session, type &lt;code&gt;QUIT&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;n&quot;&gt;QUIT&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To exit the interactive command-prompt in your container, type &lt;code&gt;exit&lt;/code&gt;. Your container continues to run after you exit the interactive bash shell.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;databases&quot;&gt;2. Databases&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A &lt;em&gt;database&lt;/em&gt; in &lt;em&gt;SQL Server&lt;/em&gt; is made up of a collection of &lt;em&gt;tables&lt;/em&gt; that stores a specific set of structured data. A tableontains a collection of &lt;em&gt;rows&lt;/em&gt;, also referred to as &lt;em&gt;records&lt;/em&gt; or &lt;em&gt;tuples&lt;/em&gt;, and &lt;em&gt;columns&lt;/em&gt;, also referred to as &lt;em&gt;attributes&lt;/em&gt;. Each column in the table is designed to store a certain type of information, for example, dates, names, dollar amounts, and numbers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;basic-information-about-databases&quot;&gt;2.1. Basic Information about Databases&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A computer can have one or more than one instance of &lt;em&gt;SQL Server&lt;/em&gt; installed. Each instance of SQL Server can contain one or many &lt;em&gt;databases&lt;/em&gt;. Within a database, there are one or many object ownership groups called &lt;em&gt;schemas&lt;/em&gt;. Within each schema there are database objects such as &lt;em&gt;tables&lt;/em&gt;, &lt;em&gt;views&lt;/em&gt;, and &lt;em&gt;stored procedures&lt;/em&gt;. Some objects such as certificates and asymmetric keys are contained within the database, but are not contained within a schema. For more information about creating tables, see &lt;a href=&quot;https://learn.microsoft.com/en-us/sql/relational-databases/tables/tables?view=sql-server-ver16&quot;&gt;Tables&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;SQL Server databases are stored in the file system in &lt;em&gt;files&lt;/em&gt;. Files can be grouped into &lt;em&gt;filegroups&lt;/em&gt;. For more information about files and filegroups, see {sqldb-file-filegroups}[Database Files and Filegroups].&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When people gain access to an instance of SQL Server they are identified as a &lt;em&gt;login&lt;/em&gt;. When people gain access to a database they are identified as a &lt;em&gt;database user&lt;/em&gt;. A database user can be based on a login. If &lt;em&gt;contained databases&lt;/em&gt; are enabled, a database user can be created that is not based on a login. For more information about users, see &lt;code&gt;CREATE USER&lt;/code&gt; (&lt;a href=&quot;https://learn.microsoft.com/en-us/sql/t-sql/language-reference?view=sql-server-ver16&quot;&gt;Transact-SQL&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A user that has access to a database can be given &lt;em&gt;permission&lt;/em&gt; to access the objects in the database. Though permissions can be granted to &lt;em&gt;individual users&lt;/em&gt;, we recommend creating &lt;em&gt;database roles&lt;/em&gt;, adding the database users to the roles, and then grant access permission to the roles. Granting permissions to roles instead of users makes it easier to keep permissions consistent and understandable as the number of users grow and continually change. For more information about roles permissions, see &lt;code&gt;CREATE ROLE&lt;/code&gt; (&lt;a href=&quot;https://learn.microsoft.com/en-us/sql/t-sql/language-reference?view=sql-server-ver16&quot;&gt;Transact-SQL&lt;/a&gt;) and &lt;a href=&quot;https://learn.microsoft.com/en-us/sql/relational-databases/security/authentication-access/principals-database-engine?view=sql-server-ver16&quot;&gt;Principals (Database Engine)&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;working-with-databases&quot;&gt;2.2. Working with Databases&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Most people who work with databases use the &lt;em&gt;SQL Server Management Studio&lt;/em&gt; tool. The Management Studio tool has a graphical user interface for creating databases and the objects in the databases. Management Studio also has a query editor for interacting with databases by writing Transact-SQL statements. Management Studio can be installed from the SQL Server installation disk, or downloaded from MSDN. For more information about SQL Server Management Studio tool, see &lt;a href=&quot;https://learn.microsoft.com/en-us/sql/ssms/sql-server-management-studio-ssms?view=sql-server-ver16&quot;&gt;SQL Server Management Studio (SSMS)&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;system-databases&quot;&gt;2.3. System Databases&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;SQL Server includes the following system databases.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 16.6666%;&quot;&gt;
&lt;col style=&quot;width: 83.3334%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;System database&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/sql/relational-databases/databases/master-database?view=sql-server-ver16&quot;&gt;master Database&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Records all the system-level information for an instance of SQL Server.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/sql/relational-databases/databases/msdb-database?view=sql-server-ver16&quot;&gt;msdb Database&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Is used by SQL Server Agent for scheduling alerts and jobs.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/sql/relational-databases/databases/model-database?view=sql-server-ver16&quot;&gt;model Database&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Is used as the template for all databases created on the instance of SQL Server. Modifications made to the model database, such as database size, collation, recovery model, and other database options, are applied to any databases created afterward.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/sql/relational-databases/databases/resource-database?view=sql-server-ver16&quot;&gt;Resource Database&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Is a read-only database that contains system objects that are included with SQL Server. System objects are physically persisted in the Resource database, but they logically appear in the sys schema of every database.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/sql/relational-databases/databases/tempdb-database?view=sql-server-ver16&quot;&gt;tempdb Database&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Is a workspace for holding temporary objects or intermediate result sets.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
For Azure SQL Database single databases and elastic pools, only &lt;em&gt;master&lt;/em&gt; Database and &lt;em&gt;tempdb&lt;/em&gt; Database apply.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;master-database&quot;&gt;2.3.1. master Database&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;em&gt;master database&lt;/em&gt; records all the system-level information for a SQL Server system. This includes instance-wide metadata such as logon accounts, endpoints, linked servers, and system configuration settings.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In SQL Server, system objects are no longer stored in the &lt;em&gt;master&lt;/em&gt; database; instead, they are stored in the &lt;em&gt;Resource database&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Also, &lt;em&gt;master&lt;/em&gt; is the database that records the existence of all other databases and the location of those database files and records the initialization information for SQL Server. Therefore, SQL Server cannot start if the master database is unavailable.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;contained-databases&quot;&gt;2.4. Contained Databases&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A &lt;em&gt;contained database&lt;/em&gt; is a database that is isolated from other databases and from the instance of SQL Server that hosts the database. SQL Server helps user to isolate their database from the instance in 4 ways.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Much of the metadata that describes a database is maintained in the database. (In addition to, or instead of, maintaining metadata in the master database.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;All metadata are defined using the same collation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;User authentication can be performed by the database, reducing the databases dependency on the logins of the instance of SQL Server.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The SQL Server environment (DMV&amp;#8217;s, XEvents, etc.) reports and can act upon containment information.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;database-files-and-filegroups&quot;&gt;2.5. Database Files and Filegroups&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At a minimum, every SQL Server database has two operating system files: a &lt;em&gt;data file&lt;/em&gt; and a &lt;em&gt;log file&lt;/em&gt;. Data files contain data and objects such as tables, indexes, stored procedures, and views. Log files contain the information that is required to recover all transactions in the database. Data files can be grouped together in filegroups for allocation and administration purposes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;database-files&quot;&gt;2.5.1. Database Files&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;SQL Server databases have three types of files, as shown in the following table.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 16.6666%;&quot;&gt;
&lt;col style=&quot;width: 83.3334%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;File&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Primary&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Contains startup information for the database and points to the other files in the database. Every database has one primary data file. The recommended file name extension for primary data files is &lt;em&gt;.mdf&lt;/em&gt;.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Secondary&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Optional user-defined data files. Data can be spread across multiple disks by putting each file on a different disk drive. The recommended file name extension for secondary data files is &lt;em&gt;.ndf&lt;/em&gt;.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Transaction Log&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;The log holds information used to recover the database. There must be at least one log file for each database. The recommended file name extension for transaction logs is &lt;em&gt;.ldf&lt;/em&gt;.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example, a simple database named &lt;strong&gt;Sales&lt;/strong&gt; has one primary file that contains all data and objects and a log file that contains the transaction log information. A more complex database named &lt;strong&gt;Orders&lt;/strong&gt; can be created that includes one primary file and five secondary files. The data and objects within the database spread across all six files, and the four log files contain the transaction log information.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By default, the data and transaction logs are put on the same drive and path to handle single-disk systems. This choice may not be optimal for production environments. We recommend that you &lt;em&gt;put data and log files on separate disks&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;logical-and-physical-file-names&quot;&gt;2.5.2. Logical and Physical File Names&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;SQL Server files have two file name types:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;logical_file_name&lt;/strong&gt;: The &lt;em&gt;logical_file_name&lt;/em&gt; is the name used to refer to the physical file in all Transact-SQL statements. The logical file name must comply with the rules for SQL Server identifiers and must be unique among logical file names in the database.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;os_file_name&lt;/strong&gt;: The &lt;em&gt;os_file_name&lt;/em&gt; is the name of the physical file including the directory path. It must follow the rules for the operating system file names.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When multiple instances of SQL Server are running on a single computer, each instance receives a different default directory to hold the files for the databases created in the instance. For more information, see &lt;a href=&quot;https://learn.microsoft.com/en-us/sql/sql-server/install/file-locations-for-default-and-named-instances-of-sql-server?view=sql-server-ver16&quot;&gt;File Locations for Default and Named Instances of SQL Server&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;database-engine-permissions-and-principals&quot;&gt;3. Database Engine Permissions and Principals&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;Permissions&lt;/em&gt; in the Database Engine are managed at the &lt;em&gt;server level&lt;/em&gt; through &lt;em&gt;logins&lt;/em&gt; and &lt;em&gt;server roles&lt;/em&gt;, and at the &lt;em&gt;database level&lt;/em&gt; through &lt;em&gt;database users&lt;/em&gt; and &lt;em&gt;database roles&lt;/em&gt;. The model for SQL Database exposes the same system within each database, but the server level permissions aren&amp;#8217;t available.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;security-principals&quot;&gt;3.1. Security principals&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;Security principal&lt;/em&gt; is the official name of the identities that use SQL Server and that can be assigned permission to take actions. They are usually people or groups of people, but can be other entities that pretend to be people.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The security principals can be created and managed using the Transact-SQL listed, or by using SQL Server Management Studio.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;logins&quot;&gt;3.1.1. Logins&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;Logins&lt;/em&gt; are individual user accounts for logging on to the SQL Server Database Engine. SQL Server and SQL Database support logins based on &lt;em&gt;Windows authentication&lt;/em&gt; and logins based on &lt;em&gt;SQL Server authentication&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For information about the two types of logins, see &lt;a href=&quot;https://learn.microsoft.com/en-us/sql/relational-databases/security/choose-an-authentication-mode?view=sql-server-ver16&quot;&gt;Choose an Authentication Mode&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;fixed-server-roles&quot;&gt;3.1.2. Fixed server roles&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In SQL Server, &lt;em&gt;fixed server roles&lt;/em&gt; are a set of pre-configured roles that provide convenient group of server-level permissions. Logins can be added to the roles using the &lt;code&gt;ALTER SERVER ROLE &amp;#8230;&amp;#8203; ADD MEMBER&lt;/code&gt; statement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information, see &lt;a href=&quot;https://learn.microsoft.com/en-us/sql/t-sql/statements/alter-server-role-transact-sql?view=sql-server-ver16&quot;&gt;ALTER SERVER ROLE (Transact-SQL)&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;SQL Database doesn&amp;#8217;t support the fixed server roles, but has two roles in the &lt;code&gt;master&lt;/code&gt; database (&lt;code&gt;dbmanager&lt;/code&gt; and &lt;code&gt;loginmanager&lt;/code&gt;) that act like server roles.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;user-defined-server-roles&quot;&gt;3.1.3. User-defined server roles&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In SQL Server, you can create your own server roles and assign server-level permissions to them. Logins can be added to the server roles using the &lt;code&gt;ALTER SERVER ROLE &amp;#8230;&amp;#8203; ADD MEMBER&lt;/code&gt; statement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information, see &lt;a href=&quot;https://learn.microsoft.com/en-us/sql/t-sql/statements/alter-server-role-transact-sql?view=sql-server-ver16&quot;&gt;ALTER SERVER ROLE (Transact-SQL)&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;SQL Database doesn&amp;#8217;t support the user-defined server roles.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;database-users&quot;&gt;3.1.4. Database users&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Logins are granted access to a database by creating a &lt;em&gt;database user&lt;/em&gt; in a database and mapping that database user to sign in. Typically the database user name is the same as the login name, though it doesn&amp;#8217;t have to be the same.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Each database user maps to a single login. A login can be mapped to only one user in a database, but can be mapped as a database user in several different databases.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Database users can also be created that don&amp;#8217;t have a corresponding login. These users are called &lt;em&gt;contained database users&lt;/em&gt;. Microsoft encourages the use of contained database users because it makes it easier to move your database to a different server. Like a login, a contained database user can use either Windows authentication or SQL Server authentication. For more information, see &lt;a href=&quot;https://learn.microsoft.com/en-us/sql/relational-databases/security/contained-database-users-making-your-database-portable?view=sql-server-ver16&quot;&gt;Contained Database Users - Making Your Database Portable&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are 12 types of users with slight differences in how they authenticate, and who they represent. To see a list of users, see &lt;a href=&quot;https://learn.microsoft.com/en-us/sql/t-sql/statements/create-user-transact-sql?view=sql-server-ver16&quot;&gt;CREATE USER (Transact-SQL)&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;fixed-database-roles&quot;&gt;3.1.5. Fixed database roles&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;Fixed database roles&lt;/em&gt; are a set of pre-configured roles that provide convenient group of database-level permissions. Database users and user-defined database roles can be added to the fixed database roles using the &lt;code&gt;ALTER ROLE &amp;#8230;&amp;#8203; ADD MEMBER&lt;/code&gt; statement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information, see &lt;a href=&quot;https://learn.microsoft.com/en-us/sql/t-sql/statements/alter-role-transact-sql?view=sql-server-ver16&quot;&gt;ALTER ROLE (Transact-SQL)&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;user-defined-database-roles&quot;&gt;3.1.6. User-defined database roles&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Users with the &lt;code&gt;CREATE ROLE&lt;/code&gt; permission can create new &lt;em&gt;user-defined database roles&lt;/em&gt; to represent groups of users with common permissions. Typically permissions are granted or denied to the entire role, simplifying permissions management and monitoring. Database users can be added to the database roles by using the &lt;code&gt;ALTER ROLE &amp;#8230;&amp;#8203; ADD MEMBER&lt;/code&gt; statement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information, see &lt;a href=&quot;https://learn.microsoft.com/en-us/sql/t-sql/statements/alter-role-transact-sql?view=sql-server-ver16&quot;&gt;ALTER ROLE (Transact-SQL)&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;other-principals&quot;&gt;3.1.7. Other principals&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Additional security principals not discussed here include application roles, and logins and users based on certificates or asymmetric keys.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For a graphic showing the relationships between Windows users, Windows groups, logins, and database users, see &lt;a href=&quot;https://learn.microsoft.com/en-us/sql/relational-databases/security/authentication-access/create-a-database-user?view=sql-server-ver16&quot;&gt;Create a Database User&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;assign-permissions&quot;&gt;3.2. Assign permissions&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Most permission statements have the format:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;AUTHORIZATION&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PERMISSION&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SECURABLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NAME&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PRINCIPAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;AUTHORIZATION&lt;/code&gt; must be &lt;code&gt;GRANT&lt;/code&gt;, &lt;code&gt;REVOKE&lt;/code&gt; or &lt;code&gt;DENY&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;PERMISSION&lt;/code&gt; establishes what action is allowed or prohibited. The exact number of permissions differs between SQL Server and SQL Database. The permissions are listed in the article &lt;a href=&quot;https://learn.microsoft.com/en-us/sql/relational-databases/security/permissions-database-engine?view=sql-server-ver16&quot;&gt;Permissions (Database Engine)&lt;/a&gt; and in the chart referenced below.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ON SECURABLE::NAME&lt;/code&gt; is the type of securable (server, server object, database, or database object) and its name.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some permissions don&amp;#8217;t require &lt;code&gt;ON SECURABLE::NAME&lt;/code&gt; because it is unambiguous or inappropriate in the context. For example, the &lt;code&gt;CREATE TABLE&lt;/code&gt; permission doesn&amp;#8217;t require the &lt;code&gt;ON SECURABLE::NAME&lt;/code&gt; clause (&lt;code&gt;GRANT CREATE TABLE TO Mary&lt;/code&gt;; allows Mary to create tables).&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;PRINCIPAL&lt;/code&gt; is the security principal (login, user, or role) which receives or loses the permission. Grant permissions to roles whenever possible.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following example grant statement, grants the &lt;code&gt;UPDATE&lt;/code&gt; permission on the &lt;code&gt;Parts&lt;/code&gt; table or view that is contained in the &lt;code&gt;Production&lt;/code&gt; schema to the role named &lt;code&gt;PartsTeam&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;GRANT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;UPDATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;OBJECT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Production&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parts&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PartsTeam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following example grant statement grants the &lt;code&gt;UPDATE&lt;/code&gt; permission on the &lt;code&gt;Production&lt;/code&gt; schema, and by extension on any table or view contained within this schema to the role named &lt;code&gt;ProductionTeam&lt;/code&gt;, which is a more effective and salable approach to assigning permissions than on individual object-level:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;GRANT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;UPDATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SCHEMA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Production&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProductionTeam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Permissions are granted to security principals (logins, users, and roles) by using the &lt;code&gt;GRANT&lt;/code&gt; statement. Permissions are explicitly denied by using the &lt;code&gt;DENY&lt;/code&gt; command. A previously granted or denied permission is removed by using the &lt;code&gt;REVOKE&lt;/code&gt; statement. Permissions are cumulative, with the user receiving all the permissions granted to the user, login, and any group memberships; however any permission denial overrides all grants.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A common mistake is to attempt to remove a &lt;code&gt;GRANT&lt;/code&gt; by using &lt;code&gt;DENY&lt;/code&gt; instead of &lt;code&gt;REVOKE&lt;/code&gt;. This can cause problems when a user receives permissions from multiple sources; which is quite common. The following example demonstrates the principal.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Sales group receives &lt;code&gt;SELECT&lt;/code&gt; permissions on the OrderStatus table through the statement &lt;code&gt;GRANT SELECT ON OBJECT::OrderStatus TO Sales;&lt;/code&gt;. User Jae is a member of the Sales role. Jae has also been granted &lt;code&gt;SELECT&lt;/code&gt; permission to the &lt;code&gt;OrderStatus&lt;/code&gt; table under their own user name through the statement &lt;code&gt;GRANT SELECT ON OBJECT::OrderStatus TO Jae&lt;/code&gt;;. Presume the administer wishes to remove the &lt;code&gt;GRANT&lt;/code&gt; to the Sales role.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If the administrator correctly executes &lt;code&gt;REVOKE SELECT ON OBJECT::OrderStatus TO Sales&lt;/code&gt;;, then Jae will retain &lt;code&gt;SELECT&lt;/code&gt; access to the OrderStatus table through their individual &lt;code&gt;GRANT&lt;/code&gt; statement.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the administrator incorrectly executes &lt;code&gt;DENY SELECT ON OBJECT::OrderStatus TO Sales;&lt;/code&gt; then Jae, as a member of the Sales role, will be denied the &lt;code&gt;SELECT&lt;/code&gt; permission because the &lt;code&gt;DENY&lt;/code&gt; to Sales overrides their individual &lt;code&gt;GRANT&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Permissions can be configured using Management Studio. Find the securable in Object Explorer, right-click the securable, and then select &lt;strong&gt;Properties&lt;/strong&gt;. Select the &lt;strong&gt;Permissions&lt;/strong&gt; page.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For help on using the permission page, see &lt;a href=&quot;https://learn.microsoft.com/en-us/sql/relational-databases/security/permissions-or-securables-page?view=sql-server-ver16&quot;&gt;Permissions or Securables Page&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;permission-hierarchy&quot;&gt;3.3. Permission hierarchy&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Permissions have a parent/child hierarchy. That is, if you grant &lt;em&gt;SELECT&lt;/em&gt; permission on a database, that permission includes &lt;em&gt;SELECT&lt;/em&gt; permission on all (child) schemas in the database. If you grant &lt;em&gt;SELECT&lt;/em&gt; permission on a schema, it includes &lt;em&gt;SELECT&lt;/em&gt; permission on all the (child) tables and views in the schema. The permissions are transitive; that is, if you grant &lt;em&gt;SELECT&lt;/em&gt; permission on a database, it includes &lt;em&gt;SELECT&lt;/em&gt; permission on all (child) schemas, and all (grandchild) tables and views.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Permissions also have covering permissions. The &lt;em&gt;CONTROL&lt;/em&gt; permission on an object, normally gives you all other permissions on the object.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Because both the parent/child hierarchy and the covering hierarchy can act on the same permission, the permission system can get complicated. For example, let&amp;#8217;s take a table (Region), in a schema (Customers), in a database (SalesDB).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;CONTROL&lt;/code&gt; permission on table Region includes all the other permissions on the table Region, including &lt;code&gt;ALTER&lt;/code&gt;, &lt;code&gt;SELECT&lt;/code&gt;, &lt;code&gt;INSERT&lt;/code&gt;, &lt;code&gt;UPDATE&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt;, and some other permissions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;SELECT&lt;/code&gt; on the Customers schema that owns the Region table includes the &lt;code&gt;SELECT&lt;/code&gt; permission on the Region table.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So &lt;code&gt;SELECT&lt;/code&gt; permission on the Region table can be achieved through any of these six statements:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;GRANT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;OBJECT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Region&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Jae&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;GRANT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CONTROL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;OBJECT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Region&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Jae&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;GRANT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SCHEMA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Customers&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Jae&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;GRANT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CONTROL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SCHEMA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Customers&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Jae&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;GRANT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DATABASE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SalesDB&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Jae&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;GRANT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CONTROL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DATABASE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SalesDB&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Jae&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;monitor-permissions&quot;&gt;3.4. Monitor permissions&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following views return security information.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The logins and user-defined server roles on a server can be examined by using the &lt;code&gt;sys.server_principals&lt;/code&gt; view. This view isn&amp;#8217;t available in SQL Database.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The users and user-defined roles in a database can be examined by using the &lt;code&gt;sys.database_principals&lt;/code&gt; view.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The permissions granted to logins and user-defined fixed server roles can be examined by using the &lt;code&gt;sys.server_permissions&lt;/code&gt; view. This view isn&amp;#8217;t available in SQL Database.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The permissions granted to users and user-defined fixed database roles can be examined by using the &lt;code&gt;sys.database_permissions&lt;/code&gt; view.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Database role membership can be examined by using the &lt;code&gt;sys.database_role_members&lt;/code&gt; view.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Server role membership can be examined by using the &lt;code&gt;sys.server_role_members&lt;/code&gt; view. This view isn&amp;#8217;t available in SQL Database.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For additional security related views, see &lt;a href=&quot;https://learn.microsoft.com/en-us/sql/relational-databases/system-catalog-views/security-catalog-views-transact-sql?view=sql-server-ver16&quot;&gt;Security Catalog Views (Transact-SQL)&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;principals-database-engine&quot;&gt;3.5. Principals (Database Engine)&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;Principals&lt;/em&gt; are entities that can request SQL Server resources. Like other components of the SQL Server authorization model, principals can be arranged in a hierarchy. The scope of influence of a principal depends on the scope of the definition of the principal: Windows, server, database; and whether the principal is indivisible or a collection. A &lt;em&gt;Windows Login&lt;/em&gt; is an example of an indivisible principal, and a &lt;em&gt;Windows Group&lt;/em&gt; is an example of a principal that is a collection. Every principal has a &lt;em&gt;security identifier (SID)&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;sql-server-level-principals&quot;&gt;3.5.1. SQL Server-level principals&lt;/h4&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;SQL Server authentication Login&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Windows authentication login for a Windows user&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Windows authentication login for a Windows group&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Azure Active Directory authentication login for a AD user&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Azure Active Directory authentication login for a AD group&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Server Role&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;database-level-principals&quot;&gt;3.5.2. Database-level principals&lt;/h4&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Database User (There are 12 types of users. For more information, see CREATE USER.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Database Role&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Application Role&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;sa-login&quot;&gt;3.5.3. sa Login&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The SQL Server &lt;code&gt;sa&lt;/code&gt; login is a server-level principal. By default, it is created when an instance is installed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Beginning in SQL Server 2005 (9.x), the default database of sa is master. This is a change of behavior from earlier versions of SQL Server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;sa&lt;/code&gt; login is a member of the &lt;code&gt;sysadmin&lt;/code&gt; fixed server-level role.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;sa&lt;/code&gt; login has all permissions on the server and cannot be limited.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;sa&lt;/code&gt; login cannot be dropped, but it can be disabled so that no one can use it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;dbo-user-and-dbo-schema&quot;&gt;3.5.4. dbo User and dbo Schema&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;dbo&lt;/code&gt; user is a special user principal in each database.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All SQL Server administrators, members of the &lt;code&gt;sysadmin&lt;/code&gt; fixed server role, &lt;code&gt;sa&lt;/code&gt; login, and owners of the database, enter databases as the &lt;code&gt;dbo&lt;/code&gt; user.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;dbo&lt;/code&gt; user has all permissions in the database and cannot be limited or dropped.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;dbo&lt;/code&gt; stands for database owner, but the &lt;code&gt;dbo&lt;/code&gt; user account is not the same as the &lt;code&gt;db_owner&lt;/code&gt; fixed database role, and the &lt;code&gt;db_owner&lt;/code&gt; fixed database role is not the same as the user account that is recorded as the owner of the database.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;dbo&lt;/code&gt; user owns the &lt;code&gt;dbo&lt;/code&gt; schema. The &lt;code&gt;dbo&lt;/code&gt; schema is the default schema for all users, unless some other schema is specified. The &lt;code&gt;dbo&lt;/code&gt; schema cannot be dropped.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;public-server-role-and-database-role&quot;&gt;3.5.5. public Server Role and Database Role&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Every login belongs to the &lt;code&gt;public&lt;/code&gt; fixed server role, and every database user belongs to the &lt;code&gt;public&lt;/code&gt; database role.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When a login or user has not been granted or denied specific permissions on a securable, the login or user inherits the permissions granted to public on that securable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;public&lt;/code&gt; fixed server role and the &lt;code&gt;public&lt;/code&gt; fixed database role cannot be dropped. However you can revoke permissions from the &lt;code&gt;public&lt;/code&gt; roles.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are many permissions that are assigned to the &lt;code&gt;public&lt;/code&gt; roles by default. Most of these permissions are needed for routine operations in the database; the type of things that everyone should be able to do.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Be careful when revoking permissions from the public login or user, as it will affect all logins/users. Generally you should not deny permissions to public, because the deny statement overrides any grant statements you might make to individuals.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;sql-and-t-sql&quot;&gt;4. SQL and T-SQL&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;SQL, From Wikipedia, the free encyclopedia, &lt;a href=&quot;https://en.wikipedia.org/wiki/SQL&quot; class=&quot;bare&quot;&gt;https://en.wikipedia.org/wiki/SQL&lt;/a&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Structured Query Language&lt;/strong&gt;, abbreviated as &lt;strong&gt;SQL&lt;/strong&gt; (/ˌɛsˌkjuːˈɛl/ ) &lt;em&gt;S-Q-L&lt;/em&gt;, sometimes /ˈsiːkwəl/ &quot;sequel&quot; for historical reasons), is a domain-specific language used in programming and designed for managing data held in a relational database management system (RDBMS), or for stream processing in a relational data stream management system (RDSMS). It is particularly useful in handling structured data, i.e. data incorporating relations among entities and variables.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Transact-SQL, From Wikipedia, the free encyclopedia, &lt;a href=&quot;https://en.wikipedia.org/wiki/Transact-SQL&quot; class=&quot;bare&quot;&gt;https://en.wikipedia.org/wiki/Transact-SQL&lt;/a&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Transact-SQL (T-SQL) is Microsoft&amp;#8217;s and Sybase&amp;#8217;s proprietary extension to the SQL (Structured Query Language) used to interact with relational databases. T-SQL expands on the SQL standard to include procedural programming, local variables, various support functions for string processing, date processing, mathematics, etc. and changes to the DELETE and UPDATE statements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Transact-SQL is central to using Microsoft SQL Server. All applications that communicate with an instance of SQL Server do so by sending Transact-SQL statements to the server, regardless of the user interface of the application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Stored procedures in SQL Server are executable server-side routines. The advantage of stored procedures is the ability to pass parameters.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;sql-server-utilities-statements-go&quot;&gt;5. SQL Server Utilities Statements - GO&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;SQL Server provides commands that are not Transact-SQL statements, but are recognized by the &lt;strong&gt;sqlcmd&lt;/strong&gt; and &lt;strong&gt;osql&lt;/strong&gt; utilities and SQL Server Management Studio Code Editor. These commands can be used to facilitate the readability and execution of batches and scripts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;GO&lt;/code&gt; signals the end of a batch of Transact-SQL statements to the SQL Server utilities.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Syntax&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Arguments&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;count&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Is a positive integer. The batch preceding GO will execute the specified number of times.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Remarks&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;GO&lt;/code&gt; is not a Transact-SQL statement; it is a command recognized by the &lt;strong&gt;sqlcmd&lt;/strong&gt; and &lt;strong&gt;osql&lt;/strong&gt; utilities and SQL Server Management Studio Code editor.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;SQL Server utilities interpret &lt;code&gt;GO&lt;/code&gt; as a signal that they should send the current batch of Transact-SQL statements to an instance of SQL Server. The current batch of statements is composed of all statements entered since the last &lt;code&gt;GO&lt;/code&gt;, or since the start of the ad hoc session or script if this is the first &lt;code&gt;GO&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A Transact-SQL statement cannot occupy the same line as a &lt;code&gt;GO&lt;/code&gt; command. However, the line can contain comments.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Users must follow the rules for batches. For example, any execution of a stored procedure after the first statement in a batch must include the &lt;code&gt;EXECUTE&lt;/code&gt; keyword. The scope of local (user-defined) variables is limited to a batch, and cannot be referenced after a &lt;code&gt;GO&lt;/code&gt; command.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;n&quot;&gt;USE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AdventureWorks2012&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyMsg&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;VARCHAR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyMsg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Hello, World.'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- @MyMsg is not valid after this GO ends the batch.&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- Yields an error because @MyMsg not declared in this batch.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;PRINT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyMsg&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@@&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;VERSION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- Yields an error: Must be EXEC sp_who if not first statement in&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- batch.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sp_who&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;SQL Server applications can send multiple Transact-SQL statements to an instance of SQL Server for execution as a batch. The statements in the batch are then compiled into a single &lt;em&gt;execution plan&lt;/em&gt;. Programmers executing ad hoc statements in the SQL Server utilities, or building scripts of Transact-SQL statements to run through the SQL Server utilities, use &lt;code&gt;GO&lt;/code&gt; to signal the end of a batch.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Applications based on the ODBC or OLE DB APIs receive a syntax error if they try to execute a &lt;code&gt;GO&lt;/code&gt; command. The SQL Server utilities never send a &lt;code&gt;GO&lt;/code&gt; command to the server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Do not use a semicolon as a statement terminator after &lt;code&gt;GO&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;c1&quot;&gt;-- Yields an error because ; is not permitted after GO&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@@&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;VERSION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;transact-sql-syntax-conventions-transact-sql&quot;&gt;6. Transact-SQL syntax conventions (Transact-SQL)&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following table lists and describes conventions that are used in the syntax diagrams in the Transact-SQL reference.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 16.6666%;&quot;&gt;
&lt;col style=&quot;width: 83.3334%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Convention&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Used for&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;UPPERCASE&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Transact-SQL keywords.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;em&gt;italic&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;User-supplied parameters of Transact-SQL syntax.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;bold&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Type database names, table names, column names, index names, stored procedures, utilities, data type names, and text exactly as shown.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;| (vertical bar)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Separates syntax items enclosed in brackets or braces. You can use only one of the items.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;[ ] (brackets)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Optional syntax item.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;{ } (braces)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Required syntax items. Don&amp;#8217;t type the braces.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;[ , &amp;#8230;&amp;#8203;n ]&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Indicates the preceding item can be repeated n number of times. The occurrences are separated by commas.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;[ &amp;#8230;&amp;#8203;n ]&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Indicates the preceding item can be repeated n number of times. The occurrences are separated by blanks.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Transact-SQL statement terminator. Although the semicolon isn&amp;#8217;t required for most statements in this version of SQL Server, it will be required in a future version.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;::=&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;The name for a block of syntax. Use this convention to group and label sections of lengthy syntax or a unit of syntax that you can use in more than one location within a statement. Each location in which the block of syntax could be used is indicated with the label enclosed in chevrons: &amp;lt;label&amp;gt;.&lt;/p&gt;
&lt;p class=&quot;tableblock&quot;&gt;A set is a collection of expressions, for example &amp;lt;grouping set&amp;gt;; and a list is a collection of sets, for example &amp;lt;composite element list&amp;gt;.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;multipart-names&quot;&gt;6.1. Multipart names&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Unless specified otherwise, all Transact-SQL references to the name of a database object can be a four-part name in the following form:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;&lt;em&gt;server_name.[database_name].[schema_name].object_name&lt;/em&gt;

&lt;em&gt;| database_name.[schema_name].object_name&lt;/em&gt;

&lt;em&gt;| schema_name.object_name&lt;/em&gt;

&lt;em&gt;| object_name&lt;/em&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;server_name&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Specifies a linked server name or remote server name.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;database_name&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Specifies the name of a SQL Server database when the object resides in a local instance of SQL Server. When the object is in a linked server, database_name specifies an OLE DB catalog.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;schema_name&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Specifies the name of the schema that contains the object if the object is in a SQL Server database. When the object is in a linked server, schema_name specifies an OLE DB schema name.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;object_name&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Refers to the name of the object.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When referencing a specific object, you don&amp;#8217;t always have to specify the server, database, and schema for the SQL Server Database Engine to identify the object. However, if the object can&amp;#8217;t be found, an error is returned.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To avoid name resolution errors, we recommend specifying the schema name whenever you specify a schema-scoped object.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To omit intermediate nodes, use periods to indicate these positions. The following table shows the valid formats of object names.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 16.6666%;&quot;&gt;
&lt;col style=&quot;width: 83.3334%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Object reference format&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;em&gt;server_name.database_name.schema_name.object_name&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Four-part name.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;em&gt;server_name.database_name..object_name&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Schema name is omitted.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;em&gt;server_name..schema_name.object_name&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Database name is omitted.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;em&gt;server_name&amp;#8230;&amp;#8203;object_name&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Database and schema name are omitted.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;em&gt;database_name.schema_name.object_name&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Server name is omitted.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;em&gt;database_name..object_name&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Server and schema name are omitted.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;em&gt;schema_name.object_name&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Server and database name are omitted.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;em&gt;object_name&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Server, database, and schema name are omitted.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SERVERNAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- 8a90e1fbcc1b&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a90e1fbcc1b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;master&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;servers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;tutorial-write-transact-sql-statements&quot;&gt;7. Tutorial: Write Transact-SQL statements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This tutorial is intended as a brief introduction to the Transact-SQL language and not as a replacement for a Transact-SQL class. The statements in this tutorial are intentionally simple, and aren&amp;#8217;t meant to represent the complexity found in a typical production database.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;lesson-1-create-and-query-database-objects&quot;&gt;7.1. Lesson 1: Create and query database objects&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Transact-SQL statements can be written and submitted to the Database Engine in the following ways:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;By using SQL Server Management Studio.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;By using the &lt;strong&gt;sqlcmd&lt;/strong&gt; utility.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;By connecting from an application that you create.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;create-a-database&quot;&gt;7.1.1. Create a database&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Like many Transact-SQL statements, the &lt;a href=&quot;https://learn.microsoft.com/en-us/sql/t-sql/statements/create-database-transact-sql?view=sql-server-ver16&quot;&gt;CREATE DATABASE&lt;/a&gt; statement has a required parameter: the name of the database.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;CREATE DATABASE&lt;/code&gt; also has many optional parameters, such as the disk location where you want to put the database files.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When you execute &lt;code&gt;CREATE DATABASE&lt;/code&gt; without the optional parameters, SQL Server uses default values for many of these parameters.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;In a Query Editor window, type but don&amp;#8217;t execute the following code:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DATABASE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use the pointer to select the words &lt;code&gt;CREATE DATABASE&lt;/code&gt;, and then press &lt;strong&gt;F1&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In Query Editor, press &lt;strong&gt;F5&lt;/strong&gt; to execute the statement and create a database named TestData.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When you create a database, SQL Server makes a copy of the &lt;code&gt;model&lt;/code&gt; database, and renames the copy to the database name. This operation should only take several seconds, unless you specify a large initial size of the database as an optional parameter.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The keyword &lt;code&gt;GO&lt;/code&gt; separates statements when more than one statement is submitted in a single batch. &lt;code&gt;GO&lt;/code&gt; is optional when the batch contains only one statement.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;create-a-table&quot;&gt;7.1.2. Create a Table&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To create a table, you must provide a name for the table, and the names and data types of each column in the table.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is also a good practice to indicate whether null values are allowed in each column.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To create a table, you must have the &lt;code&gt;CREATE TABLE&lt;/code&gt; permission, and the &lt;code&gt;ALTER SCHEMA&lt;/code&gt; permission on the schema that will contain the table. The &lt;a href=&quot;https://learn.microsoft.com/en-us/sql/relational-databases/security/authentication-access/database-level-roles?view=sql-server-ver16&quot;&gt;db_ddladmin&lt;/a&gt; fixed database role has these permissions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Most tables have a primary key, made up of one or more columns of the table. A primary key is always unique. The Database Engine will enforce the restriction that any primary key value can&amp;#8217;t be repeated in the table.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For a list of data types and links for a description of each, see &lt;a href=&quot;https://learn.microsoft.com/en-us/sql/t-sql/data-types/data-types-transact-sql?view=sql-server-ver16&quot;&gt;Data Types (Transact-SQL)&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Database Engine can be installed as case sensitive or non-case sensitive. If the Database Engine is installed as case sensitive, object names must always have the same case. For example, a table named OrderData is a different table from a table named ORDERDATA. If the Database Engine is installed as non-case sensitive, those two table names are considered to be the same table, and that name can only be used one time.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;switch-the-query-editor-connection-to-the-testdata-database&quot;&gt;7.1.2.1. Switch the Query Editor connection to the TestData database&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a Query Editor window, type and execute the following code to change your connection to the TestData database.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;n&quot;&gt;USE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;create-the-table&quot;&gt;7.1.2.2. Create the table&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a Query Editor window, type and execute the following code to create a table named &lt;code&gt;Products&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The columns in the table are named &lt;code&gt;ProductID&lt;/code&gt;, &lt;code&gt;ProductName&lt;/code&gt;, &lt;code&gt;Price&lt;/code&gt;, and &lt;code&gt;ProductDescription&lt;/code&gt;. The &lt;code&gt;ProductID&lt;/code&gt; column is the primary key of the table. &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;varchar(25)&lt;/code&gt;, &lt;code&gt;money&lt;/code&gt;, and &lt;code&gt;varchar(max)&lt;/code&gt; are all data types. Only the &lt;code&gt;Price&lt;/code&gt; and &lt;code&gt;ProductionDescription&lt;/code&gt; columns can have no data when a row is inserted or changed.
This statement contains an optional element (&lt;code&gt;dbo.&lt;/code&gt;) called a schema. The schema is the database object that owns the table. If you are an administrator, &lt;code&gt;dbo&lt;/code&gt; is the default schema. &lt;code&gt;dbo&lt;/code&gt; stands for database owner.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Products&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProductID&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;KEY&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ProductName&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Price&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;money&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ProductDescription&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;insert-and-update-data-in-a-table&quot;&gt;7.1.3. Insert and update data in a table&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now that you have created the &lt;code&gt;Products&lt;/code&gt; table, you are ready to insert data into the table by using the INSERT statement. After the data is inserted, you will change the content of a row by using an UPDATE statement. You will use the WHERE clause of the UPDATE statement to restrict the update to a single row. The four statements will enter the following data.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;ProductID&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;ProductName&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Price&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;ProductDescription&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Clamp&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;12.48&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Workbench clamp&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;50&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Screwdriver&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3.17&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Flat head&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;75&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Tire Bar&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Tool for changing tires.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3000&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;mm&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Bracket&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The basic syntax is: INSERT, table name, column list, VALUES, and then a list of the values to be inserted. The two hyphens in front of a line indicate that the line is a comment and the text will be ignored by the compiler. In this case, the comment describes a permissible variation of the syntax.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;insert-data-into-a-table&quot;&gt;7.1.3.1. Insert data into a table&lt;/h5&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Execute the following statement to insert a row into the &lt;code&gt;Products&lt;/code&gt; table that was created in the previous task.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;c1&quot;&gt;-- Standard syntax&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Products&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProductID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProductName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProductDescription&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Clamp'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;48&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Workbench clamp'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If the insert succeeds, proceed to the next step.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If the insert fails, it may be because the &lt;code&gt;Product&lt;/code&gt; table already has a row with that product ID in it. To proceed, delete all the rows in the table and repeat the preceding step. &lt;a href=&quot;https://learn.microsoft.com/en-us/sql/t-sql/statements/truncate-table-transact-sql?view=sql-server-ver16&quot;&gt;TRUNCATE TABLE&lt;/a&gt; deletes all the rows in the table.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Run the following command to delete all the rows in the table:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;TRUNCATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Products&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After you truncate the table, repeat the INSERT command in this step.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The following statement shows how you can change the order in which the parameters are provided by switching the placement of the &lt;code&gt;ProductID&lt;/code&gt; and &lt;code&gt;ProductName&lt;/code&gt; in both the field list (in parentheses) and in the values list.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;c1&quot;&gt;-- Changing the order of the columns&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Products&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProductName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProductID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProductDescription&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Screwdriver'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Flat head'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The following statement demonstrates that the names of the columns are optional, as long as the values are listed in the correct order. This syntax is common but isn&amp;#8217;t recommended because it might be harder for others to understand your code. &lt;code&gt;NULL&lt;/code&gt; is specified for the &lt;code&gt;Price&lt;/code&gt; column because the price for this product isn&amp;#8217;t yet known.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;c1&quot;&gt;-- Skipping the column list, but keeping the values in order&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Products&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Tire Bar'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Tool for changing tires.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The schema name is optional as long as you are accessing and changing a table in your default schema. Because the &lt;code&gt;ProductDescription&lt;/code&gt; column allows null values and no value is being provided, the ProductDescription column name and value can be dropped from the statement completely.
SQL&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;c1&quot;&gt;-- Dropping the optional dbo and dropping the ProductDescription column&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Products&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProductID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProductName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'3 mm Bracket'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;52&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;update-the-products-table&quot;&gt;7.1.3.2. Update the products table&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Type and execute the following UPDATE statement to change the &lt;code&gt;ProductName&lt;/code&gt; of the second product from &lt;code&gt;Screwdriver&lt;/code&gt;, to &lt;code&gt;Flat Head Screwdriver&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;UPDATE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Products&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProductName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Flat Head Screwdriver'&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProductID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;read-data-from-a-table&quot;&gt;7.1.4. Read data from a table&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Use the SELECT statement to read the data in a table. The SELECT statement is one of the most important Transact-SQL statements, and there are many variations in the syntax. For this tutorial, you will work with five simple versions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;read-the-data-in-a-table&quot;&gt;7.1.4.1. Read the data in a table&lt;/h5&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Type and execute the following statements to read the data in the &lt;code&gt;Products&lt;/code&gt; table.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;c1&quot;&gt;-- The basic syntax for reading data from a single table&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProductID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProductName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProductDescription&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Products&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can use an asterisk (&lt;code&gt;*&lt;/code&gt;) to select all the columns in the table. The asterisk is for ad hoc queries. In permanent code, provide the column list so that the statement returns the predicted columns, even if a new column is added to the table later.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;c1&quot;&gt;-- Returns all columns in the table&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- Does not use the optional schema, dbo&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Products&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can omit columns that you don&amp;#8217;t want to return. The columns will be returned in the order that they are listed.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;c1&quot;&gt;-- Returns only two of the columns from the table&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProductName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Price&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Products&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use a &lt;code&gt;WHERE&lt;/code&gt; clause to limit the rows that are returned to the user.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;c1&quot;&gt;-- Returns only two of the records in the table&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProductID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProductName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProductDescription&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Products&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProductID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can work with the values in the columns as they are returned. The following example performs a mathematical operation on the &lt;code&gt;Price&lt;/code&gt; column. Columns that have been changed in this way won&amp;#8217;t have a name unless you provide one by using the &lt;code&gt;AS&lt;/code&gt; keyword.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;c1&quot;&gt;-- Returns ProductName and the Price including a 7% tax&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- Provides the name CustomerPays for the calculated column&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProductName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;07&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CustomerPays&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Products&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;useful-functions-in-a-select-statement&quot;&gt;7.1.4.2. Useful functions in a SELECT statement&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For information about some functions that you can use to work with data in SELECT statements, see the following articles:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/sql/t-sql/functions/string-functions-transact-sql?view=sql-server-ver16&quot;&gt;String Functions (Transact-SQL)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/sql/t-sql/functions/date-and-time-data-types-and-functions-transact-sql?view=sql-server-ver16&quot;&gt;Date and Time Data Types and Functions (Transact-SQL)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/sql/t-sql/functions/mathematical-functions-transact-sql?view=sql-server-ver16&quot;&gt;Mathematical Functions (Transact-SQL)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/sql/t-sql/functions/text-and-image-functions-textptr-transact-sql?view=sql-server-ver16&quot;&gt;Text and Image Functions (Transact-SQL)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;create-views-and-stored-procedures&quot;&gt;7.1.5. Create views and stored procedures&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A view is a stored SELECT statement, and a stored procedure is one or more Transact-SQL statements that execute as a batch.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Views are queried like tables and don&amp;#8217;t accept parameters. Stored procedures are more complex than views. Stored procedures can have both input and output parameters and can contain statements to control the flow of the code, such as IF and WHILE statements. It is good programming practice to use stored procedures for all repetitive actions in the database.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For this example, you will use CREATE VIEW to create a view that selects only two of the columns in the &lt;code&gt;Products&lt;/code&gt; table. Then, you will use CREATE PROCEDURE to create a stored procedure that accepts a price parameter and returns only those products that cost less than the specified parameter value.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;create-a-view&quot;&gt;7.1.5.1. Create a view&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Execute the following statement to create a view that executes a select statement, and returns the names and prices of our products to the user.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VIEW&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vw_Names&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProductName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Price&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Products&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;test-the-view&quot;&gt;7.1.5.2. Test the view&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Views are treated just like tables. Use a &lt;code&gt;SELECT&lt;/code&gt; statement to access a view.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vw_Names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;create-a-stored-procedure&quot;&gt;7.1.5.3. Create a stored procedure&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following statement creates a stored procedure name &lt;code&gt;pr_Names&lt;/code&gt;, accepts an input parameter named &lt;code&gt;@VarPrice&lt;/code&gt; of data type &lt;code&gt;money&lt;/code&gt;. The stored procedure prints the statement &lt;code&gt;Products less than&lt;/code&gt; concatenated with the input parameter that is changed from the &lt;code&gt;money&lt;/code&gt; data type into a &lt;code&gt;varchar(10)&lt;/code&gt; character data type. Then, the procedure executes a &lt;code&gt;SELECT&lt;/code&gt; statement on the view, passing the input parameter as part of the &lt;code&gt;WHERE&lt;/code&gt; clause. This returns all products that cost less than the input parameter value.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PROCEDURE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pr_Names&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VarPrice&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;money&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;-- The print statement returns text to the user&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;PRINT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Products less than '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;CAST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VarPrice&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;-- A second statement starts here&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProductName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Price&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vw_Names&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VarPrice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;END&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;test-the-stored-procedure&quot;&gt;7.1.5.4. Test the stored procedure&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To test the stored procedure, type and execute the following statement. The procedure should return the names of the two products entered into the &lt;code&gt;Products&lt;/code&gt; table in Lesson 1 with a price that is less than &lt;code&gt;10.00&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;EXECUTE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pr_Names&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;lesson-2-configure-permissions-on-database-objects&quot;&gt;7.2. Lesson 2: Configure permissions on database objects&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Granting a user access to a database involves three steps.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;First, you create a login. The login lets the user connect to the SQL Server Database Engine.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then you configure the login as a user in the specified database.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And finally, you grant that user permission to database objects.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This lesson shows you these three steps, and shows you how to create a view and a stored procedure as the object.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;create-a-login&quot;&gt;7.2.1. Create a login&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To access the Database Engine, users require a login. The login can represent the user&amp;#8217;s identity as a Windows account or as a member of a Windows group, or the login can be a SQL Server login that exists only in SQL Server. Whenever possible you should use Windows Authentication.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;create-a-new-windows-account&quot;&gt;7.2.1.1. Create a new Windows account&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By default, administrators on your computer have full access to SQL Server. For this lesson, we want to have a less privileged user; therefore, you will create a new local Windows Authentication account on your computer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To do this, you must be an administrator on your computer. Then you will grant that new user access to SQL Server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Select &lt;strong&gt;Start&lt;/strong&gt;, select &lt;strong&gt;Run&lt;/strong&gt;, in the &lt;strong&gt;Open&lt;/strong&gt; box, type &lt;code&gt;%SystemRoot%\system32\compmgmt.msc /s&lt;/code&gt; and then select &lt;strong&gt;OK&lt;/strong&gt; to open the Computer Management program.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Under &lt;strong&gt;System Tools&lt;/strong&gt;, expand &lt;strong&gt;Local Users and Groups&lt;/strong&gt;, right-click &lt;strong&gt;Users&lt;/strong&gt;, and then select &lt;strong&gt;New User&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the &lt;strong&gt;User&lt;/strong&gt; name box type &lt;strong&gt;Mary&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the &lt;strong&gt;Password&lt;/strong&gt; and &lt;strong&gt;Confirm password&lt;/strong&gt; box, type a strong password, and then select &lt;strong&gt;Create&lt;/strong&gt; to create a new local Windows user.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;create-a-sql-login-using-windows-authentication-with-t-sql&quot;&gt;7.2.1.2. Create a SQL login  using Windows Authentication with T-SQL&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a Query Editor window of SQL Server Management Studio, type and execute the following code replacing &lt;code&gt;computer_name&lt;/code&gt; with the name of your computer. &lt;code&gt;FROM WINDOWS&lt;/code&gt; indicates that Windows will authenticate the user. The optional &lt;code&gt;DEFAULT_DATABASE&lt;/code&gt; argument connects &lt;code&gt;Mary&lt;/code&gt; to the &lt;code&gt;TestData&lt;/code&gt; database, unless her connection string indicates another database. This statement introduces the semicolon as an optional termination for a Transact-SQL statement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LOGIN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;computer_name&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WINDOWS&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEFAULT_DATABASE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TestData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This authorizes a user name &lt;code&gt;Mary&lt;/code&gt;, authenticated by your computer, to access this instance of SQL Server. If there is more than one instance of SQL Server on the computer, you must create the login on each instance that Mary must access.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Because &lt;code&gt;Mary&lt;/code&gt; is not a domain account, this user name can only be authenticated on this computer.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;create-a-login-using-sql-server-authentication-with-t-sql&quot;&gt;7.2.1.3. Create a login using SQL Server Authentication with T-SQL&lt;/h5&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;c1&quot;&gt;-- Creates the user &quot;shcooper&quot; for SQL Server using the security credential &quot;RestrictedFaculty&quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- The user login starts with the password &quot;Baz1nga,&quot; but that password must be changed after the first login.&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LOGIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shcooper&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PASSWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Baz1nga'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MUST_CHANGE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;CREDENTIAL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RestrictedFaculty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;grant-access-to-a-database&quot;&gt;7.2.2. Grant access to a database&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mary now has access to this instance of SQL Server, but doesn&amp;#8217;t have permission to access the databases. She doesn&amp;#8217;t even have access to her default database &lt;code&gt;TestData&lt;/code&gt; until you authorize her as a database user.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To grant Mary access, switch to the &lt;code&gt;TestData&lt;/code&gt; database, and then use the &lt;code&gt;CREATE USER&lt;/code&gt; statement to map her login to a user named &lt;code&gt;Mary&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;create-a-user-in-a-database&quot;&gt;7.2.2.1. Create a user in a database&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Type and execute the following statements (replacing &lt;code&gt;computer_name&lt;/code&gt; with the name of your computer) to grant &lt;code&gt;Mary&lt;/code&gt; access to the &lt;code&gt;TestData&lt;/code&gt; database.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;n&quot;&gt;USE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TestData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;USER&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FOR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LOGIN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;computer_name&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, Mary has access to both SQL Server and the &lt;code&gt;TestData&lt;/code&gt; database.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;create-views-and-stored-procedures-2&quot;&gt;7.2.2.2. Create views and stored procedures&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As an administrator, you can execute the SELECT from the &lt;code&gt;Products&lt;/code&gt; table and the &lt;code&gt;vw_Names&lt;/code&gt; view, and execute the &lt;code&gt;pr_Names&lt;/code&gt; procedure; however, Mary can&amp;#8217;t. To grant Mary the necessary permissions, use the &lt;code&gt;GRANT&lt;/code&gt; statement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Grant permission to stored procedure&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Execute the following statement to give Mary the EXECUTE permission for the pr_Names stored procedure.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;GRANT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;EXECUTE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pr_Names&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this scenario, Mary can only access the &lt;code&gt;Products&lt;/code&gt; table by using the stored procedure. If you want Mary to be able to execute a SELECT statement against the view, then you must also execute &lt;code&gt;GRANT SELECT ON vw_Names TO Mary&lt;/code&gt;. To remove access to database objects, use the REVOKE statement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If the table, the view, and the stored procedure are not owned by the same schema, granting permissions becomes more complex.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;about-grant&quot;&gt;7.2.2.3. About GRANT&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You must have EXECUTE permission to execute a stored procedure. You must have SELECT, INSERT, UPDATE, and DELETE permissions to access and change data. The GRANT statement is also used for other permissions, such as permission to create tables.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;lesson-3-delete-database-objects&quot;&gt;7.3. Lesson 3: Delete database objects&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This short lesson removes the objects that you created in Lesson 1 and Lesson 2, and then drops the database.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Before you delete objects, make sure you are in the correct database:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;n&quot;&gt;USE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;revoke-stored-procedure-permissions&quot;&gt;7.3.1. Revoke stored procedure permissions&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Use the &lt;code&gt;REVOKE&lt;/code&gt; statement to remove execute permission for &lt;code&gt;Mary&lt;/code&gt; on the stored procedure:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;REVOKE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;EXECUTE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pr_Names&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;drop-permissions&quot;&gt;7.3.2. Drop permissions&lt;/h4&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Use the &lt;code&gt;DROP&lt;/code&gt; statement to remove permission for &lt;code&gt;Mary&lt;/code&gt; to access the &lt;code&gt;TestData&lt;/code&gt; database:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;USER&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use the &lt;code&gt;DROP&lt;/code&gt; statement to remove permission for &lt;code&gt;Mary&lt;/code&gt; to access this instance of SQL Server 2005 (9.x):&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LOGIN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;computer_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use the &lt;code&gt;DROP&lt;/code&gt; statement to remove the store procedure &lt;code&gt;pr_Names&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PROC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pr_Names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use the &lt;code&gt;DROP&lt;/code&gt; statement to remove the view &lt;code&gt;vw_Names&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VIEW&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vw_Names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;delete-table&quot;&gt;7.3.3. Delete table&lt;/h4&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Use the &lt;code&gt;DELETE&lt;/code&gt; statement to remove all rows from the &lt;code&gt;Products&lt;/code&gt; table:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;DELETE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Products&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use the &lt;code&gt;DROP&lt;/code&gt; statement to remove the &lt;code&gt;Products&lt;/code&gt; table:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Products&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;remove-database&quot;&gt;7.3.4. Remove database&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can&amp;#8217;t remove the &lt;code&gt;TestData&lt;/code&gt; database while you are in the database; therefore, first switch context to another database, and then use the &lt;code&gt;DROP&lt;/code&gt; statement to remove the &lt;code&gt;TestData&lt;/code&gt; database:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;n&quot;&gt;USE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MASTER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DATABASE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;references&quot;&gt;8. References&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/sql/linux/sql-server-linux-docker-container-deployment?view=sql-server-ver16&amp;amp;pivots=cs1-bash&quot; class=&quot;bare&quot;&gt;https://learn.microsoft.com/en-us/sql/linux/sql-server-linux-docker-container-deployment?view=sql-server-ver16&amp;amp;pivots=cs1-bash&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/sql/linux/quickstart-install-connect-docker?view=sql-server-ver16&amp;amp;preserve-view=true&amp;amp;pivots=cs1-bash&quot; class=&quot;bare&quot;&gt;https://learn.microsoft.com/en-us/sql/linux/quickstart-install-connect-docker?view=sql-server-ver16&amp;amp;preserve-view=true&amp;amp;pivots=cs1-bash&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/sql/relational-databases/databases/databases?view=sql-server-ver16&quot; class=&quot;bare&quot;&gt;https://learn.microsoft.com/en-us/sql/relational-databases/databases/databases?view=sql-server-ver16&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/sql/relational-databases/databases/contained-databases?view=sql-server-ver16&quot; class=&quot;bare&quot;&gt;https://learn.microsoft.com/en-us/sql/relational-databases/databases/contained-databases?view=sql-server-ver16&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/sql/sql-server/install/file-locations-for-default-and-named-instances-of-sql-server?view=sql-server-ver16&quot; class=&quot;bare&quot;&gt;https://learn.microsoft.com/en-us/sql/sql-server/install/file-locations-for-default-and-named-instances-of-sql-server?view=sql-server-ver16&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/sql/relational-databases/security/authentication-access/getting-started-with-database-engine-permissions?view=sql-server-ver16&quot; class=&quot;bare&quot;&gt;https://learn.microsoft.com/en-us/sql/relational-databases/security/authentication-access/getting-started-with-database-engine-permissions?view=sql-server-ver16&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/sql/relational-databases/security/authentication-access/principals-database-engine?view=sql-server-ver16&quot; class=&quot;bare&quot;&gt;https://learn.microsoft.com/en-us/sql/relational-databases/security/authentication-access/principals-database-engine?view=sql-server-ver16&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/sql/t-sql/language-elements/sql-server-utilities-statements-go?view=sql-server-ver16&quot; class=&quot;bare&quot;&gt;https://learn.microsoft.com/en-us/sql/t-sql/language-elements/sql-server-utilities-statements-go?view=sql-server-ver16&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/sql/t-sql/language-elements/transact-sql-syntax-conventions-transact-sql?view=sql-server-ver16&quot; class=&quot;bare&quot;&gt;https://learn.microsoft.com/en-us/sql/t-sql/language-elements/transact-sql-syntax-conventions-transact-sql?view=sql-server-ver16&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/sql/t-sql/tutorial-writing-transact-sql-statements?view=sql-server-ver16&quot; class=&quot;bare&quot;&gt;https://learn.microsoft.com/en-us/sql/t-sql/tutorial-writing-transact-sql-statements?view=sql-server-ver16&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/SQL&quot; class=&quot;bare&quot;&gt;https://en.wikipedia.org/wiki/SQL&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><category term="database" /><category term="database" /><category term="sqlserver" /></entry><entry><title type="html">OpenGPG, GnuPG and SecureApt</title><link href="https://blog.codefarm.me/2023/03/15/opengpg-gnupg-secureapt/" rel="alternate" type="text/html" title="OpenGPG, GnuPG and SecureApt" /><published>2023-03-15T15:40:07+08:00</published><updated>2023-03-15T15:40:07+08:00</updated><id>https://blog.codefarm.me/2023/03/15/opengpg-gnupg-secureapt</id><content type="html" xml:base="https://blog.codefarm.me/2023/03/15/opengpg-gnupg-secureapt/">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;OpenPGP is a non-proprietary format for authenticating or encrypting data, using public key cryptography. &lt;a href=&quot;#opengpg&quot;&gt;[opengpg]&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is based on the original PGP (Pretty Good Privacy) software.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Beginning in 1997, the OpenPGP Working Group was formed in the Internet Engineering Task Force (IETF) to define this standard that had formerly been a proprietary product since 1991.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Over the past decade, PGP, and later OpenPGP, has become the standard for nearly all of the world’s signed or encrypted email.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#gnu-privacy-guard&quot;&gt;1. GNU Privacy Guard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#hands-on-guide-on-gpg-keys&quot;&gt;2. Hands-on Guide on GPG Keys&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#generate-a-key-pair&quot;&gt;2.1. Generate a Key Pair&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#generate-an-authentication-subkey&quot;&gt;2.2. Generate an Authentication Subkey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#list-keys&quot;&gt;2.3. List Keys&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#exporting-keys&quot;&gt;2.4. Exporting Keys&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#fingerprints&quot;&gt;2.5. Fingerprints&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#generating-a-revocation-certificate&quot;&gt;2.6. Generating a Revocation Certificate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sending-and-importing-keys&quot;&gt;2.7. Sending and Importing Keys&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#signing-keys&quot;&gt;2.8. Signing Keys&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#openpgp-integration-in-apt&quot;&gt;3. OpenPGP integration in APT&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#debianrepositoryusethirdparty-instructions-to-connect-to-a-third-party-repository&quot;&gt;3.1. DebianRepositoryUseThirdParty: Instructions to connect to a third-party repository&lt;/a&gt;
&lt;ul class=&quot;sectlevel3&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#openpgp-certificate-distribution&quot;&gt;3.1.1. OpenPGP certificate distribution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sources-list-entry&quot;&gt;3.1.2. Sources.list entry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#how-to-find-and-add-a-key&quot;&gt;3.1.3. How to find and add a key&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#complete-example&quot;&gt;3.1.4. Complete example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#troubleshooting&quot;&gt;3.1.5. Troubleshooting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#references&quot;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;gnu-privacy-guard&quot;&gt;1. GNU Privacy Guard&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;GNU Privacy Guard&lt;/strong&gt; (&lt;strong&gt;GnuPG&lt;/strong&gt; or &lt;strong&gt;GPG&lt;/strong&gt;) is a free-software replacement for Symantec&amp;#8217;s PGP cryptographic software suite. The software is compliant with RFC 4880, the IETF standards-track specification of OpenPGP. Modern versions of PGP are interoperable with GnuPG and other OpenPGP-compliant systems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;GnuPG is part of the &lt;a href=&quot;https://en.wikipedia.org/wiki/GNU_Project&quot;&gt;GNU Project&lt;/a&gt; and received major funding from the German government in 1999.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;GnuPG is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Hybrid_cryptosystem&quot;&gt;hybrid-encryption&lt;/a&gt; software program because it uses a combination of conventional &lt;a href=&quot;https://en.wikipedia.org/wiki/Symmetric-key_algorithm&quot;&gt;symmetric-key cryptography&lt;/a&gt; for speed, and &lt;a href=&quot;https://en.wikipedia.org/wiki/Public-key_cryptography&quot;&gt;public-key cryptography&lt;/a&gt; for ease of secure key exchange, typically by using the recipient&amp;#8217;s public key to encrypt a &lt;a href=&quot;https://en.wikipedia.org/wiki/Session_key&quot;&gt;session key&lt;/a&gt; which is used only once.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;From Wikipedia, the free encyclopedia&lt;/em&gt; &lt;a href=&quot;#sessionkey&quot;&gt;[sessionkey]&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A &lt;strong&gt;session key&lt;/strong&gt; is a single-use symmetric key used for encrypting all messages in one communication session. A closely related term is content &lt;strong&gt;encryption key&lt;/strong&gt; (CEK), &lt;strong&gt;traffic encryption key&lt;/strong&gt; (TEK), or &lt;strong&gt;multicast key&lt;/strong&gt; which refers to any key used for encrypting messages.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;GnuPG encrypts messages using asymmetric key pairs individually generated by GnuPG users. The resulting public keys may be exchanged with other users in a variety of ways, such as Internet &lt;a href=&quot;https://en.wikipedia.org/wiki/Key_server_(cryptographic)&quot;&gt;key servers&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;From Wikipedia, the free encyclopedia&lt;/em&gt; &lt;a href=&quot;#keyserver&quot;&gt;[keyserver]&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In computer security, a key server is a computer that receives and then serves existing cryptographic keys to users or other programs. The users' programs can be running on the same network as the key server or on another networked computer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The keys distributed by the key server are almost always provided as part of a cryptographically protected public key certificates containing not only the key but also 'entity' information about the owner of the key. The certificate is usually in a standard format, such as the OpenPGP public key format, the X.509 certificate format, or the PKCS format. Further, the key is almost always a public key for use with an asymmetric key encryption algorithm.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Key servers play an important role in public key cryptography. In public key cryptography an individual is able to generate a key pair, where one of the keys is kept private while the other is distributed publicly. Knowledge of the public key does not compromise the security of public key cryptography. An individual holding the public key of a key pair can use that key to carry out cryptographic operations that allow secret communications with strong authentication of the holder of the matching private key. The need to have the public key of a key pair in order to start communication or verify signatures is a bootstrapping problem. Locating keys on the web or writing to the individual asking them to transmit their public keys can be time consuming and unsecure. Key servers act as central repositories to alleviate the need to individually transmit public keys and can act as the root of a &lt;a href=&quot;https://en.wikipedia.org/wiki/Chain_of_trust&quot;&gt;chain of trust&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These are some keyservers that are often used for looking up keys with &lt;code&gt;gpg --recv-keys&lt;/code&gt;. These can be queried via &lt;code&gt;https://&lt;/code&gt; (HTTPS) or &lt;code&gt;hkps://&lt;/code&gt; (HKP over TLS) respectively.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;keys.openpgp.org&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;keys.mailvelope.com/manage.html&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;pgp.mit.edu&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;keyring.debian.org&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;keyserver.ubuntu.com&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;pgp.surf.nl&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;hands-on-guide-on-gpg-keys&quot;&gt;2. Hands-on Guide on GPG Keys&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To generate a key pair, first make sure you can run the following command.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;gpg &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;gpg (GnuPG) 2.2.27
libgcrypt 1.8.8
Copyright (C) 2021 Free Software Foundation, Inc.
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;License GNU GPL-3.0-or-later &amp;lt;https://gnu.org/licenses/gpl.html&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Home: /home/x/.gnupg
Supported algorithms:
Pubkey: RSA, ELG, DSA, ECDH, ECDSA, EDDSA
Cipher: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH,
        CAMELLIA128, CAMELLIA192, CAMELLIA256
Hash: SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224
Compression: Uncompressed, ZIP, ZLIB, BZIP2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If not, then you need to install it, the package is &lt;code&gt;gnupg&lt;/code&gt; (for gpg) or &lt;code&gt;gnupg2&lt;/code&gt; (for gpg2).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get update
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;gnupg2&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;generate-a-key-pair&quot;&gt;2.1. Generate a Key Pair&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Simply run the following command and answer the prompt questions to generate a new key pair.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;gpg &lt;span class=&quot;nt&quot;&gt;--full-gen-key&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;gpg (GnuPG) 2.2.27;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;Copyright &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;C&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 2021 Free Software Foundation, Inc.
&lt;span class=&quot;go&quot;&gt;This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Please select what kind of key you want:
   (1) RSA and RSA (default)
   (2) DSA and Elgamal
   (3) DSA (sign only)
   (4) RSA (sign only)
  (14) Existing key from card
Your selection? 1
RSA keys may be between 1024 and 4096 bits long.
What keysize do you want? (3072) 4096
Requested keysize is 4096 bits
Please specify how long the key should be valid.
         0 = key does not expire
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;      &amp;lt;n&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; key expires &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;n days
&lt;span class=&quot;gp&quot;&gt;      &amp;lt;n&amp;gt;&lt;/span&gt;w &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; key expires &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;n weeks
&lt;span class=&quot;gp&quot;&gt;      &amp;lt;n&amp;gt;&lt;/span&gt;m &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; key expires &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;n months
&lt;span class=&quot;gp&quot;&gt;      &amp;lt;n&amp;gt;&lt;/span&gt;y &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; key expires &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;n years
&lt;span class=&quot;go&quot;&gt;Key is valid for? (0) 3y
Key expires at Fri 20 Mar 2026 10:58:15 AM CST
Is this correct? (y/N) y

GnuPG needs to construct a user ID to identify your key.

Real name: Your Name
Email address: your.name@example.com
Comment:
You selected this USER-ID:
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    &quot;Your Name &amp;lt;your.name@example.com&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;
Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? O
We need to generate a lot of random bytes. It is a good idea to perform
some other action (type on the keyboard, move the mouse, utilize the
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;disks) during the prime generation;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;this gives the random number
&lt;span class=&quot;go&quot;&gt;generator a better chance to gain enough entropy.
We need to generate a lot of random bytes. It is a good idea to perform
some other action (type on the keyboard, move the mouse, utilize the
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;disks) during the prime generation;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;this gives the random number
&lt;span class=&quot;go&quot;&gt;generator a better chance to gain enough entropy.
gpg: key E3347ECE4ECCD835 marked as ultimately trusted
gpg: revocation certificate stored as '/home/x/.gnupg/openpgp-revocs.d/BF743CF56A6EF9A4B0F94ACCE3347ECE4ECCD835.rev'
public and secret key created and signed.

pub   rsa4096 2023-03-21 [SC] [expires: 2026-03-20]
      BF743CF56A6EF9A4B0F94ACCE3347ECE4ECCD835
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;uid                      Your Name &amp;lt;your.name@example.com&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;sub   rsa4096 2023-03-21 [E] [expires: 2026-03-20]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;generate-an-authentication-subkey&quot;&gt;2.2. Generate an Authentication Subkey&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An authentication subkey is used if you want to use your GPG key for SSH authentication. To generate this, just follow these steps:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;gpg &lt;span class=&quot;nt&quot;&gt;--expert&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--edit-key&lt;/span&gt; BF743CF56A6EF9A4B0F94ACCE3347ECE4ECCD835
&lt;span class=&quot;gp&quot;&gt;gpg (GnuPG) 2.2.27;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;Copyright &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;C&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 2021 Free Software Foundation, Inc.
&lt;span class=&quot;go&quot;&gt;This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Secret key is available.

sec  rsa4096/E3347ECE4ECCD835
     created: 2023-03-21  expires: 2026-03-20  usage: SC
     trust: ultimate      validity: ultimate
ssb  rsa4096/DFAFCFC264DE8767
     created: 2023-03-21  expires: 2026-03-20  usage: E
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;[ultimate] (1). Your Name &amp;lt;your.name@example.com&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;gpg&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;addkey
&lt;span class=&quot;go&quot;&gt;Please select what kind of key you want:
   (3) DSA (sign only)
   (4) RSA (sign only)
   (5) Elgamal (encrypt only)
   (6) RSA (encrypt only)
   (7) DSA (set your own capabilities)
   (8) RSA (set your own capabilities)
  (10) ECC (sign only)
  (11) ECC (set your own capabilities)
  (12) ECC (encrypt only)
  (13) Existing key
  (14) Existing key from card
Your selection? 8

Possible actions for a RSA key: Sign Encrypt Authenticate
Current allowed actions: Sign Encrypt

   (S) Toggle the sign capability
   (E) Toggle the encrypt capability
   (A) Toggle the authenticate capability
   (Q) Finished

Your selection? S

Possible actions for a RSA key: Sign Encrypt Authenticate
Current allowed actions: Encrypt

   (S) Toggle the sign capability
   (E) Toggle the encrypt capability
   (A) Toggle the authenticate capability
   (Q) Finished

Your selection? E

Possible actions for a RSA key: Sign Encrypt Authenticate
Current allowed actions:

   (S) Toggle the sign capability
   (E) Toggle the encrypt capability
   (A) Toggle the authenticate capability
   (Q) Finished

Your selection? A

Possible actions for a RSA key: Sign Encrypt Authenticate
Current allowed actions: Authenticate

   (S) Toggle the sign capability
   (E) Toggle the encrypt capability
   (A) Toggle the authenticate capability
   (Q) Finished

Your selection? Q
RSA keys may be between 1024 and 4096 bits long.
What keysize do you want? (3072) 4096
Requested keysize is 4096 bits
Please specify how long the key should be valid.
         0 = key does not expire
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;      &amp;lt;n&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; key expires &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;n days
&lt;span class=&quot;gp&quot;&gt;      &amp;lt;n&amp;gt;&lt;/span&gt;w &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; key expires &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;n weeks
&lt;span class=&quot;gp&quot;&gt;      &amp;lt;n&amp;gt;&lt;/span&gt;m &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; key expires &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;n months
&lt;span class=&quot;gp&quot;&gt;      &amp;lt;n&amp;gt;&lt;/span&gt;y &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; key expires &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;n years
&lt;span class=&quot;go&quot;&gt;Key is valid for? (0) 2y
Key expires at Thu 20 Mar 2025 12:01:37 PM CST
Is this correct? (y/N) y
Really create? (y/N) y
We need to generate a lot of random bytes. It is a good idea to perform
some other action (type on the keyboard, move the mouse, utilize the
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;disks) during the prime generation;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;this gives the random number
&lt;span class=&quot;go&quot;&gt;generator a better chance to gain enough entropy.

sec  rsa4096/E3347ECE4ECCD835
     created: 2023-03-21  expires: 2026-03-20  usage: SC
     trust: ultimate      validity: ultimate
ssb  rsa4096/DFAFCFC264DE8767
     created: 2023-03-21  expires: 2026-03-20  usage: E
ssb  rsa4096/EF4D2528DEB8EB02
     created: 2023-03-21  expires: 2025-03-20  usage: A
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;[ultimate] (1). Your Name &amp;lt;your.name@example.com&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;list-keys&quot;&gt;2.3. List Keys&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To list all the public GPG keys. Give the following command.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;gpg &lt;span class=&quot;nt&quot;&gt;--list-keys&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To obtain the key id in LONG (complete) format, use this flag &amp;#8220;--keyid-format LONG&amp;#8221;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;gpg &lt;span class=&quot;nt&quot;&gt;--list-keys&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--keyid-format&lt;/span&gt; LONG&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To list all the private GPG keys.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;gpg &lt;span class=&quot;nt&quot;&gt;--list-secret-keys&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All these commands give you the following information about your GPG keys and subkeys.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Which algorithm your keys use, e.i &lt;code&gt;rsa&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Key size, e.i &lt;code&gt;4096&lt;/code&gt; bits.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Key IDs, e.i &lt;code&gt;123AB456&lt;/code&gt; (this is the short key id of 8-bytes, in the long format you get the complete key id of 16-bytes).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Date of creation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Their usage e.i&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&amp;#8216;E&amp;#8217;=encryption, &amp;#8216;S&amp;#8217;=signing, &amp;#8216;C&amp;#8217;=certification, &amp;#8216;A&amp;#8217;=authentication.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Their expiry date.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Their trust level, e.i &lt;code&gt;Ultimate&lt;/code&gt;, &lt;code&gt;unknown&lt;/code&gt;, etc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Name and Email associated with them that&amp;#8217;s also known as &lt;code&gt;UID&lt;/code&gt; &quot;User ID&quot;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;exporting-keys&quot;&gt;2.4. Exporting Keys&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Exporting means, to bring out the keys from GPG database so that we may see or store them in files.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you want to see your GPG key in ASCII characters, then you need to export it to a file by the following command.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;gpg &lt;span class=&quot;nt&quot;&gt;--output&lt;/span&gt; public.key &lt;span class=&quot;nt&quot;&gt;--armor&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--export&lt;/span&gt; your.email@example.com&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;--output&lt;/code&gt;: specifies the output file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;--export&lt;/code&gt;: to instruct GPG to export your public key.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;--armor&lt;/code&gt;: to export in ASCII characters.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Similarly, to export a private key directly on the terminal just change one flag.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;gpg &lt;span class=&quot;nt&quot;&gt;--armor&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--export-secret-keys&lt;/span&gt; your.email@example.com&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This will ask for your passphrase. Here you may also add the &lt;code&gt;--output&lt;/code&gt; flag to put its output in a file as done in the previous command.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Never give/share your private key anywhere. Keep it as secure as you can. The private key is required to decrypt the data encrypted just for you. So, compromising this key may result in security issues whose severity depends on the data you deal with.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;fingerprints&quot;&gt;2.5. Fingerprints&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A key can be verified by a number of ways. One such way is to use its fingerprint. The fingerprint is a shorter number (usually expressed as a 40-hexadecimal-digit number) that contains a cryptographically strong hash of the public key.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To see the fingerprint of any GPG key associated with an email. Use this command.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;gpg &lt;span class=&quot;nt&quot;&gt;--fingerprint&lt;/span&gt; email@example.com&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can cross check this fingerprint with the person to verify if it is trustworthy.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;generating-a-revocation-certificate&quot;&gt;2.6. Generating a Revocation Certificate&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is vital to have revocation certificate to declare your keys invalid in case your private key has been compromised or lost. It should be generated as soon as you generate your key pair, not when you need it. So, let&amp;#8217;s generate it with the following command.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;gpg &lt;span class=&quot;nt&quot;&gt;--output&lt;/span&gt; ~/revocation.crt &lt;span class=&quot;nt&quot;&gt;--gen-revoke&lt;/span&gt; your.email@example.com&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order to save this file from unauthorized access, you may immediately put restrictions (if not present by default).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chmod &lt;/span&gt;600 ~/revocation.crt&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In case you want to revoke your key, then you would have to upload this revocation certificate to a public keyserver (assuming that you have already sent your public key to a keyserver.)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;sending-and-importing-keys&quot;&gt;2.7. Sending and Importing Keys&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Sending&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Why are you using GPG keys in the first place?&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Because with GPG you can sign messages or other people can encrypt messages to you.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Therefore, to make your key publicly available might be of great help. So that, anyone can take your public key to encrypt messages to you. For this, we can send our public key to a keyserver.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Would it be safe to upload your public key on keyservers?&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Absolutely yes, as I have already mentioned before that GPG works on &lt;a href=&quot;https://en.wikipedia.org/wiki/Public-key_cryptography&quot;&gt;asymmetric cryptography&lt;/a&gt;, therefore having your public key to someone doesn&amp;#8217;t make a threat to your security. Because it is practically impossible to generate a private key from a public key.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are multiple keyservers available to hold public keys like, &lt;code&gt;keys.fedoraproject.org&lt;/code&gt;, &lt;code&gt;keyserver.ubuntu.com&lt;/code&gt;, etc. and they regularly synchronize among themselves. So if you send your key on &lt;code&gt;keyserver.ubuntu.com&lt;/code&gt;, then after some time, it would also be available at &lt;code&gt;keys.fedoraproject.org.&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To send your key to the keyserver use the following command.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;gpg &lt;span class=&quot;nt&quot;&gt;--send-keys&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--keyserver&lt;/span&gt; keyserver_url key_id&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you don&amp;#8217;t want to upload your key to a keyserver (in case your communication is limited to a group of people) then you can also send your public key to them through email.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Importing&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Importing means to include the key in your GPG database, so that you may use them in future. For example, if you wanna send your friends an encrypted message, which can be done with their public keys. Therefore, first, you would need to import their keys into your GPG system and then only you may use them for encryption.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can import the key of someone from a file, with the following command. For this, you must have their public key in a file say &quot;&lt;em&gt;their_gpg.key&lt;/em&gt;&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;gpg &lt;span class=&quot;nt&quot;&gt;--import&lt;/span&gt; their_gpg.key&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now when you would list-keys with &amp;#8220;gpg --list-keys&amp;#8221;, this imported key will also be listed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But if the person&amp;#8217;s key is available at a keyserver, then you can also directly pull their keys from there. Because keyservers distribute public keys to anyone who requests them. Once you have sent your key to a keyserver, others can request your key using the command.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;gpg &lt;span class=&quot;nt&quot;&gt;--keyserver&lt;/span&gt; keyserver_url &lt;span class=&quot;nt&quot;&gt;--recv-keys&lt;/span&gt; key_id&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To refresh all your keys from a keyserver, to obtain new signatures, new UIDs and new key revocations, use this.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;gpg &lt;span class=&quot;nt&quot;&gt;--refresh-keys&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And to pull from specific servers, use this.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;gpg &lt;span class=&quot;nt&quot;&gt;--keyserver&lt;/span&gt; keyserver_url &lt;span class=&quot;nt&quot;&gt;--refresh-keys&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You should do this regularly. But you may receive error messages if any of your keys cannot be found on the key server.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;signing-keys&quot;&gt;2.8. Signing Keys&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A major benefit of GPG is that you can sign a file to prove that it is genuinely coming form you. Because signs are created using private keys and only the person who owns the GPG keys, have its private key (if not compromised or lost).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Your key is already signed by you when it was created. That you may verify with.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;gpg &lt;span class=&quot;nt&quot;&gt;--list-sig&lt;/span&gt; your.email@example.com&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the output, the line after &amp;#8220;sig&amp;#8221; shows the &lt;code&gt;UID&lt;/code&gt; of those people who have signed your key.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can also sign keys of other people (assuming that you have already imported the key of that person). Signing a key means you verify that you trust the person, who they claim to be. If you sign a person&amp;#8217;s key then sending the signed key back to him/her is a good idea, otherwise, they won&amp;#8217;t be able to take advantage of your sign. For this, you have 2 methods.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Method 1:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;gpg &lt;span class=&quot;nt&quot;&gt;--sign-key&lt;/span&gt; person.email@example.com
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;gpg &lt;span class=&quot;nt&quot;&gt;--output&lt;/span&gt; ~/signed.key &lt;span class=&quot;nt&quot;&gt;--sign-key&lt;/span&gt; person.email@example.com&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then you can send this &amp;#8220;signed.key&amp;#8221; file to the person via mail.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once that person receives your signed key, then s//he can update their own GPG database to include your signature.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;gpg &lt;span class=&quot;nt&quot;&gt;--import&lt;/span&gt; signed.key&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Method 2:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;gpg &lt;span class=&quot;nt&quot;&gt;--sign-key&lt;/span&gt; person.email@example.com
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;gpg &lt;span class=&quot;nt&quot;&gt;--keyserver&lt;/span&gt; key_server &lt;span class=&quot;nt&quot;&gt;--send-key&lt;/span&gt; person_keyid&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This will directly upload your sign to the keyserver (assuming that the person has sent his key to a keyserver). So when next time that person would refresh his/her GPG database, your sign would be included.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;Why should you sign a person&amp;#8217;s key?&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Because this can help other people decide whether to trust that person too or not. If someone trusts you, and they see that you&amp;#8217;ve signed this person&amp;#8217;s key, they may be more likely to trust their identity too. There is a concept behind signing a key known as &lt;a href=&quot;https://en.wikipedia.org/wiki/Web_of_trust&quot;&gt;Web of Trust&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;openpgp-integration-in-apt&quot;&gt;3. OpenPGP integration in APT&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;man&quot;&gt;$ apt-key list
Warning: apt-key is deprecated. Manage keyring files in trusted.gpg.d instead (see apt-key(8)).
/etc/apt/trusted.gpg
...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;debianrepositoryusethirdparty-instructions-to-connect-to-a-third-party-repository&quot;&gt;3.1. DebianRepositoryUseThirdParty: Instructions to connect to a third-party repository&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are many different ways of configuring an unofficial APT repository on a machine. This document aims to standardize the procedure to add such a third-party repository to a Debian-based system so that the new repository can only ship a set of expected packages, and so that those packages will be securely delivered to the system. &lt;a href=&quot;#usethirdparty&quot;&gt;[usethirdparty]&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;openpgp-certificate-distribution&quot;&gt;3.1.1. OpenPGP certificate distribution&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Repositories MUST be signed with an OpenPGP certificate. A binary export (&lt;code&gt;gpg --export&lt;/code&gt;) of the certificate SHOULD be available at the root of the repository under the filename &lt;em&gt;deriv-archive-keyring.pgp&lt;/em&gt;, where &lt;em&gt;deriv&lt;/em&gt; is the a short name for the repository. The file SHOULD NOT be ASCII-Armored (&lt;code&gt;gpg --export --armor&lt;/code&gt;) although a separate armored version MAY be available under &lt;em&gt;deriv-archive-keyring.asc&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The certificate SHOULD be served over HTTPS if possible. A free X509 certificate MAY be obtained from &lt;a href=&quot;https://letsencrypt.org/&quot;&gt;Let&amp;#8217;s Encrypt&lt;/a&gt; and automatically configured using the certbot package.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The certificate MAY also be made available on key servers. If so, operators SHOULD choose an appropriate keyserver or keyserver pool, such as &lt;code&gt;keys.openpgp.org&lt;/code&gt; or &lt;code&gt;keyserver.ubuntu.com&lt;/code&gt;, or implement a OpenPGP Web Key Directory. It should be noted that the previously recommended ad-hoc standard pool, &lt;code&gt;sks-keyservers.net&lt;/code&gt; is out of service permanently. This certificate SHOULD be signed by other keys, preferably including some that are close to the strong set, in order to leverage the OpenPGP web of trust. The certificate MUST be downloaded over a secure mechanism like HTTPS to a location only writable by root. The certificate MUST NOT be placed in &lt;code&gt;/etc/apt/trusted.gpg.d&lt;/code&gt; or loaded by &lt;code&gt;apt-key add&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If future updates to the certificate will be managed by an apt/dpkg package as recommended below, then it SHOULD be downloaded into &lt;code&gt;/usr/share/keyrings&lt;/code&gt; using the same filename that will be provided by the package. If it will be managed locally , it SHOULD be downloaded into &lt;code&gt;/etc/apt/keyrings&lt;/code&gt; instead.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In releases older than Debian 12 and Ubuntu 22.04, &lt;code&gt;/etc/apt/keyrings&lt;/code&gt; does not exist by default. It SHOULD be created with permissions &lt;code&gt;0755&lt;/code&gt; if it is needed and does not already exist.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example, users MAY be told to run a command to download the certificate, but because chances are the certificate being distributed is ASCII-Armored, it is best to unconditionally dearmor them. With Sequoia-PGP:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;curl https://deriv.example.net/debian/deriv-archive-keyring.pgp | &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  sq &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; /usr/share/keyrings/deriv-archive-keyring.pgp dearmor&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;or with GnuPG:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;curl https://deriv.example.net/debian/deriv-archive-keyring.pgp | &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  gpg &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; /usr/share/keyrings/deriv-archive-keyring.pgp &lt;span class=&quot;nt&quot;&gt;--dearmor&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
The reason why we avoid ASCII-Armored files is that they can only be used by SecureApt in version 1.4 or later (which appeared in stretch). We also strongly recommend the use of HTTPS as it bypasses certain MITM attacks that would allow a hostile third party to inject OpenPGP certificate material in the repository setup.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;sources-list-entry&quot;&gt;3.1.2. Sources.list entry&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A &lt;code&gt;sources.list&lt;/code&gt; entry SHOULD have the &lt;code&gt;signed-by&lt;/code&gt; option set. The &lt;code&gt;signed-by&lt;/code&gt; entry MUST point to a file, and not a fingerprint.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;suite&lt;/code&gt; entry SHOULD correspond to the target Debian release if the binaries are built for a specific suite. In other cases, the &lt;code&gt;suite&lt;/code&gt; SHOULD be the string &quot;stable&quot;, or it MAY be a repository-specific string describing the suite concisely. If the &lt;code&gt;suite&lt;/code&gt; does not correspond to a target Debian release, the &lt;code&gt;suite&lt;/code&gt; naming convention MUST be clearly documented.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If the repository has no reason to be split into multiple components, then the &lt;code&gt;component&lt;/code&gt; name SHOULD be &lt;code&gt;main&lt;/code&gt;. If there is a reason for splitting the repo into multiple components, the reason for the split should be clearly documented (e.g. &lt;a href=&quot;https://www.debian.org/doc/debian-policy/ch-archive#s-sections&quot;&gt;Debian&amp;#8217;s documented split&lt;/a&gt;) and the &lt;code&gt;component&lt;/code&gt; names should concisely reflect that split.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Entries MUST be added in the &lt;code&gt;/etc/apt/sources.list.d&lt;/code&gt; directory using a shortened repository name (e.g. &lt;code&gt;deriv.list&lt;/code&gt;). The &quot;Deb822&quot; file format MAY be used instead to improve clarity for complex entries (e.g. &lt;code&gt;deriv.sources&lt;/code&gt;). (See sources.list(5))&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example, this would be the content of the &lt;code&gt;/etc/apt/sources.list.d/deriv.list&lt;/code&gt; file:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;text&quot;&gt;deb [signed-by=/usr/share/keyrings/deriv-archive-keyring.pgp] https://deriv.example.net/debian/ stable main&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The above is a &lt;code&gt;sources.list&lt;/code&gt; line for a fictitious Deriv Debian derivative. The &lt;code&gt;suite&lt;/code&gt; is &lt;code&gt;stable&lt;/code&gt; and the &lt;code&gt;component&lt;/code&gt; is the standard &lt;code&gt;main&lt;/code&gt; component.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is equivalent to the following Deb822 file format, under deriv.sources:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;text&quot;&gt;Types: deb
URIs: https://deriv.example.net/debian/
Suites: stable
Components: main
Signed-By: /usr/share/keyrings/deriv-archive-keyring.pgp&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
The reason we point to a file instead of a fingerprint is that the latter forces the user to add the certificate to the global &lt;a href=&quot;https://wiki.debian.org/SecureApt&quot;&gt;SecureApt&lt;/a&gt; trust anchor in &lt;code&gt;/etc/apt/trusted.gpg.d&lt;/code&gt;, which would cause the system to accept signatures from the third-party keyholder on all other repositories configured on the system that don&amp;#8217;t have a &lt;code&gt;signed-by&lt;/code&gt; option (including the official Debian repositories).
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Serving the repository under HTTPS is OPTIONAL, as it may make running a round-robin network of untrusted mirrors more difficult, and the trust chain provided by SecureApt should suffice.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;how-to-find-and-add-a-key&quot;&gt;3.1.3. How to find and add a key&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The debian-archive-keyring package is used to distribute keys to apt. Upgrades to this package can add (or remove) OpenPGP keys for the main Debian archive. &lt;a href=&quot;#secureapt&quot;&gt;[secureapt]&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For other archives, there is not yet a standard location where you can find the key for a given apt repository. There&amp;#8217;s a rough standard of putting the key up on the web page for the repository or as a file in the repository itself, but no real standard, so you might have to hunt for it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The current and the retired Debian archive &quot;signing&quot; keys are available from &lt;a href=&quot;https://ftp-master.debian.org/keys.html&quot; class=&quot;bare&quot;&gt;https://ftp-master.debian.org/keys.html&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The OpenPGP ecosystem has a standard way to distribute keys, using a keyserver that OpenPGP implementation can use to download a key from and add it to a keyring. For example with Sequoia-PGP:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;user@host:~&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;sq keyserver get &lt;span class=&quot;nt&quot;&gt;--binary&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--output&lt;/span&gt; debian-archive-bullseye-stable.pgp &lt;span class=&quot;s1&quot;&gt;'A428 5295 FC7B 1A81 6000  62A9 605C 66F0 0D6C 9793'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Or with GnuPG:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;user@host:~&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;gpg &lt;span class=&quot;nt&quot;&gt;--keyserver&lt;/span&gt; hkps://keyserver.ubuntu.com &lt;span class=&quot;nt&quot;&gt;--recv-keys&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'A428 5295 FC7B 1A81 6000  62A9 605C 66F0 0D6C 9793'&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;gpg: key 605C66F00D6C9793: public key &quot;Debian Stable Release Key (11/bullseye) &amp;lt;debian-release@lists.debian.org&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; imported
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;gpg: Total number processed: 1
gpg:               imported: 1
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;user@host:~&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;gpg &lt;span class=&quot;nt&quot;&gt;--output&lt;/span&gt; debian-archive-bullseye-stable.pgp &lt;span class=&quot;nt&quot;&gt;--export&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'A428 5295 FC7B 1A81 6000  62A9 605C 66F0 0D6C 9793'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To install the keyring simply copy it to the apt trusted.gpg.d directory:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;user@host:~&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo cp&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; debian-archive-bullseye-stable.pgp /etc/apt/trusted.gpg.d/&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;complete-example&quot;&gt;3.1.4. Complete example&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This example may serve as a template for instructions provided at the root of the archive to help users configure the APT repository.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a Debian repository. To install packages from this repository, you should first download a trust anchor into your system using this command:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;wget &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; /usr/share/keyrings/deriv-archive-keyring.pgp https://deriv.example.net/debian/deriv-archive-keyring.pgp&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then you can add the repository to your sources.list by creating a text file in &lt;code&gt;/etc/apt/sources.list.d/deriv.sources&lt;/code&gt; containing the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;Types: deb deb-src
URIs: https://deriv.example.net/debian/
Suites: stable
Architectures: i386 amd64
Components: main
Signed-By: /usr/share/keyrings/deriv-archive-keyring.pgp&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, you should also add the following preferences file to restrict what this repository can install, by creating the following file in &lt;code&gt;/etc/apt/preferences.d/deriv.pref&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;Package: &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
Pin: origin deriv.example.net
Pin-Priority: 100&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once this is done, you can run &lt;code&gt;apt-get update&lt;/code&gt; for the changes to take effect and use &lt;code&gt;apt-get install deriv-archive-keyring&lt;/code&gt; to make sure updates to the keyring are received in a timely manner.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;troubleshooting&quot;&gt;3.1.5. Troubleshooting&lt;/h4&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get update
&lt;span class=&quot;go&quot;&gt;Hit:1 https://mirrors.ustc.edu.cn/debian bullseye InRelease
Hit:2 https://mirrors.ustc.edu.cn/debian bullseye-updates InRelease
Hit:3 https://mirrors.ustc.edu.cn/debian-security bullseye-security InRelease
Hit:4 https://mirrors.ustc.edu.cn/kubernetes/apt kubernetes-xenial InRelease
Hit:5 https://download.docker.com/linux/debian bullseye InRelease
Hit:6 https://packages.microsoft.com/debian/11/prod bullseye InRelease
Err:6 https://packages.microsoft.com/debian/11/prod bullseye InRelease
  The following signatures couldn't be verified because the public key is not available: NO_PUBKEY EB3E94ADBE1229CF
Reading package lists... Done
W: An error occurred during the signature verification. The repository is not updated and the previous index files will be used. GPG error: https://packages.microsoft.com/debian/11/prod bullseye InRelease: The following signatures couldn't be verified because the public key is not available: NO_PUBKEY EB3E94ADBE1229CF
W: Failed to fetch https://packages.microsoft.com/debian/11/prod/dists/bullseye/InRelease  The following signatures couldn't be verified because the public key is not available: NO_PUBKEY EB3E94ADBE1229CF
W: Some index files failed to download. They have been ignored, or old ones used instead.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;gpg &lt;span class=&quot;nt&quot;&gt;--keyserver&lt;/span&gt; hkps://keyserver.ubuntu.com &lt;span class=&quot;nt&quot;&gt;--recv-keys&lt;/span&gt; EB3E94ADBE1229CF
&lt;span class=&quot;gp&quot;&gt;gpg: key EB3E94ADBE1229CF: public key &quot;Microsoft (Release signing) &amp;lt;gpgsecurity@microsoft.com&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; imported
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;gpg: Total number processed: 1
gpg:               imported: 1
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;gpg &lt;span class=&quot;nt&quot;&gt;--output&lt;/span&gt; microsoft-prod.gpg &lt;span class=&quot;nt&quot;&gt;--export&lt;/span&gt; EB3E94ADBE1229CF
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo chown &lt;/span&gt;root.root microsoft-prod.gpg
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo mv &lt;/span&gt;microsoft-prod.gpg /etc/apt/trusted.gpg.d/
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get update
&lt;span class=&quot;go&quot;&gt;Hit:1 https://download.docker.com/linux/debian bullseye InRelease
Hit:2 https://packages.microsoft.com/debian/11/prod bullseye InRelease
Hit:3 https://mirrors.ustc.edu.cn/debian bullseye InRelease
Hit:4 https://mirrors.ustc.edu.cn/debian bullseye-updates InRelease
Hit:5 https://mirrors.ustc.edu.cn/debian-security bullseye-security InRelease
Hit:6 https://mirrors.ustc.edu.cn/kubernetes/apt kubernetes-xenial InRelease
Reading package lists... Done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist bibliography&quot;&gt;
&lt;ul class=&quot;bibliography&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;opengpg&quot;&gt;&lt;/a&gt;[opengpg] &lt;a href=&quot;https://www.openpgp.org/about/&quot; class=&quot;bare&quot;&gt;https://www.openpgp.org/about/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;sessionkey&quot;&gt;&lt;/a&gt;[sessionkey] &lt;a href=&quot;https://en.wikipedia.org/wiki/Session_key&quot; class=&quot;bare&quot;&gt;https://en.wikipedia.org/wiki/Session_key&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;keyserver&quot;&gt;&lt;/a&gt;[keyserver] &lt;a href=&quot;https://en.wikipedia.org/wiki/Key_server_(cryptographic&quot; class=&quot;bare&quot;&gt;https://en.wikipedia.org/wiki/Key_server_(cryptographic&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;handsongpg&quot;&gt;&lt;/a&gt;[handsongpg] &lt;a href=&quot;https://www.thegeekyway.com/hands-on-guide-on-gpg-keys/&quot; class=&quot;bare&quot;&gt;https://www.thegeekyway.com/hands-on-guide-on-gpg-keys/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;usethirdparty&quot;&gt;&lt;/a&gt;[usethirdparty] &lt;a href=&quot;https://wiki.debian.org/DebianRepository/UseThirdParty&quot; class=&quot;bare&quot;&gt;https://wiki.debian.org/DebianRepository/UseThirdParty&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;secureapt&quot;&gt;&lt;/a&gt;[secureapt] &lt;a href=&quot;https://wiki.debian.org/SecureApt&quot; class=&quot;bare&quot;&gt;https://wiki.debian.org/SecureApt&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><category term="linux" /><category term="apt" /><category term="gpg" /></entry><entry><title type="html">DHCP Options in VMware</title><link href="https://blog.codefarm.me/2023/03/06/dhcp-options-in-vmware/" rel="alternate" type="text/html" title="DHCP Options in VMware" /><published>2023-03-06T14:47:48+08:00</published><updated>2023-03-06T14:47:48+08:00</updated><id>https://blog.codefarm.me/2023/03/06/dhcp-options-in-vmware</id><content type="html" xml:base="https://blog.codefarm.me/2023/03/06/dhcp-options-in-vmware/">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Edit &lt;em&gt;vmnetdhcp.conf&lt;/em&gt; at &lt;em&gt;%ProgramData%\VMware\vmnetdhcp.conf&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following is a sample which was reconfigured the DHCP subnet from &lt;code&gt;192.168.227.0/24&lt;/code&gt; to &lt;code&gt;192.168.91.0/24&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;txt&quot;&gt;#
# Configuration file for VMware port of ISC 2.0 release running on
# Windows.
#
# This file is generated by the VMware installation procedure; it
# is edited each time you add or delete a VMware host-only network
# adapter.
#
# We set domain-name-servers to make some clients happy
# (dhclient as configued in SuSE, TurboLinux, etc.).
# We also supply a domain name to make pump (Red Hat 6.x) happy.
#
allow unknown-clients;
default-lease-time 1800;                # default is 30 minutes
max-lease-time 7200;                    # default is 2 hours

# Virtual ethernet segment 1
# Added at 03/06/23 10:26:32
subnet 192.168.211.0 netmask 255.255.255.0 {
range 192.168.211.128 192.168.211.254;            # default allows up to 125 VM's
option broadcast-address 192.168.211.255;
option domain-name-servers 192.168.211.1;
option domain-name &quot;localdomain&quot;;
default-lease-time 1800;
max-lease-time 7200;
}
host VMnet1 {
    hardware ethernet 00:50:56:C0:00:01;
    fixed-address 192.168.211.1;
    option domain-name-servers 0.0.0.0;
    option domain-name &quot;&quot;;
}
# End

&lt;span class=&quot;hll&quot;&gt;# Virtual ethernet segment 8
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;# Added at 03/06/23 10:26:32
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;subnet 192.168.91.0 netmask 255.255.255.0 {
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;range 192.168.91.128 192.168.91.254;            # default allows up to 125 VM's
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;option broadcast-address 192.168.91.255;
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;option domain-name-servers 192.168.91.2;
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;option domain-name &quot;localdomain&quot;;
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;option netbios-name-servers 192.168.91.2;
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;option routers 192.168.91.2;
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;default-lease-time 1800;
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;max-lease-time 7200;
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;}
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;host VMnet8 {
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;    hardware ethernet 00:50:56:C0:00:08;
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;    fixed-address 192.168.91.1;
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;    option domain-name-servers 0.0.0.0;
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;    option domain-name &quot;&quot;;
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;    option routers 0.0.0.0;
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;}
&lt;/span&gt;# End&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Edit &lt;em&gt;vmnetnat.conf&lt;/em&gt; at &lt;em&gt;%ProgramData%\VMware\vmnetnat.conf&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;txt&quot;&gt;# Windows NAT configuration file

[host]

# NAT gateway address
&lt;span class=&quot;hll&quot;&gt;ip = 192.168.91.2/24
&lt;/span&gt;hostMAC = 00:50:56:C0:00:08

# enable configuration; disabled by default for security reasons
#configport = 33445

# VMnet device if not specified on command line
device = vmnet8
...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Edit startup parametes of &lt;em&gt;VMware DHCP Service&lt;/em&gt; at  &lt;em&gt;HKLM\System\CurrentControlSet\services\VMnetDHCP\Parameters\VirtualEthernetSegments\8\HostIpAddress&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please note that address has reverse HEX notation. e.g. &lt;a href=&quot;#1&quot;&gt;[1]&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;192.168.1.1 is reversed to 1.1.168.192 and key value is 0101A8C0&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;According to the above sample, we should update this value to &lt;code&gt;15ba8c0&lt;/code&gt;, which is &lt;code&gt;192.168.91.1&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now, we need to restart the both the &lt;em&gt;VMware DHCP Service&lt;/em&gt; and &lt;em&gt;VMware NAT Service&lt;/em&gt; using Windows Services Manager.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#references&quot;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist bibliography&quot;&gt;
&lt;ul class=&quot;bibliography&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;VMNOSUBNET&quot;&gt;&lt;/a&gt;[1]  &lt;a href=&quot;http://randronov.blogspot.com/2015/10/vmware-error-vmnetdhcp-no-subnet.html&quot; class=&quot;bare&quot;&gt;http://randronov.blogspot.com/2015/10/vmware-error-vmnetdhcp-no-subnet.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><category term="vmware" /></entry><entry><title type="html">TCP/IP: TCP Congestion Control</title><link href="https://blog.codefarm.me/2023/02/07/tcp-ip-tcp-congestion-control/" rel="alternate" type="text/html" title="TCP/IP: TCP Congestion Control" /><published>2023-02-07T15:13:37+08:00</published><updated>2023-02-07T15:13:37+08:00</updated><id>https://blog.codefarm.me/2023/02/07/tcp-ip-tcp-congestion-control</id><content type="html" xml:base="https://blog.codefarm.me/2023/02/07/tcp-ip-tcp-congestion-control/">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When a router is forced to discard data because it cannot handle the arriving traffic rate, is called &lt;strong&gt;congestion&lt;/strong&gt;. A router is said to be &lt;em&gt;congested&lt;/em&gt; when it is in this state, and even a single connection can drive one or more routers into congestion.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Left unaddressed, congestion can cause the performance of a network to be reduced so badly that it becomes unusable. In the very worst cases, it is said to be in a state of &lt;em&gt;congestion collapse&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To either avoid or at least react effectively to mitigate this situation, each TCP implements &lt;strong&gt;congestion control procedures&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Congestion control is a set of behaviors determined by algorithms that each TCP implements in an attempt to prevent the network from being overwhelmed by too large an aggregate offered traffic load.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The basic approach is to have TCP slow down when it has reason to believe the network is about to be congested (or is already so congested that routers are discarding packets).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The challenge is to determine exactly when and how TCP should slow down, and when it can speed up again.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In today&amp;#8217;s wired networks, packet loss is caused primarily by congestion in routers or switches.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With wireless networks, transmission and reception errors become a significant cause of packet loss.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Determining whether loss is due to congestion or transmission errors has been an active research topic since the mid-1990s when wireless networks started to attain widespread use.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A value used to hold the estimate of the network&amp;#8217;s available capacity is called the &lt;strong&gt;&lt;em&gt;congestion window&lt;/em&gt;&lt;/strong&gt;, written more compactly as simply &lt;em&gt;cwnd&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A sender&amp;#8217;s actual (usable) window &lt;em&gt;W&lt;/em&gt; is then written as the minimum of the receiver&amp;#8217;s advertised window &lt;em&gt;awnd&lt;/em&gt; and the congestion window:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;&lt;em&gt;W&lt;/em&gt; = min(&lt;em&gt;cwnd&lt;/em&gt;, &lt;em&gt;awnd&lt;/em&gt;)&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With this relationship, the TCP sender is not permitted to have more than &lt;em&gt;W&lt;/em&gt; unacknowledged packets or bytes outstanding in the network.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The total amount of data a sender has introduced into the network for which it has not yet received an acknowledgment is sometimes called the &lt;em&gt;flight size&lt;/em&gt;, which is always less than or equal to &lt;em&gt;W&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In general, &lt;em&gt;W&lt;/em&gt; can be maintained in either packet or byte units.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This all seems logical but is far from the whole story.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Because both the state of the network and the state of the receiver change with time, the values of both &lt;em&gt;awnd&lt;/em&gt; and &lt;em&gt;cwnd&lt;/em&gt; change over time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition, because of the lack of explicit signals, the correct value of &lt;em&gt;cwnd&lt;/em&gt; is generally not directly available to the sending TCP. Thus, all of the values &lt;em&gt;W&lt;/em&gt;, &lt;em&gt;cwnd&lt;/em&gt;, and &lt;em&gt;awnd&lt;/em&gt; must be empirically determined and dynamically updated.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition, as we said before, we do not want &lt;em&gt;W&lt;/em&gt; to be too big or too small—we want it to be set to about the &lt;em&gt;bandwidth-delay product&lt;/em&gt; (BDP) of the network path, also called the &lt;em&gt;optimal&lt;/em&gt; window size. This is the amount of data that can be stored in the network in transit to the receiver.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Bandwidth-delay product from Wikipedia, the free encyclopedia. &lt;a href=&quot;#BDP&quot;&gt;[BDP]&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In data communications, the &lt;strong&gt;bandwidth-delay product&lt;/strong&gt; is the product of a data link&amp;#8217;s capacity (in bits per second) and its round-trip delay time (in seconds). The result, an amount of data measured in bits (or bytes), is equivalent to the maximum amount of data on the network circuit at any given time, i.e., data that has been transmitted but not yet acknowledged. A network with a large bandwidth-delay product is commonly known as a &lt;strong&gt;long fat network&lt;/strong&gt; (shortened to &lt;strong&gt;LFN&lt;/strong&gt;, pronounced &quot;elephan(t)&quot; &lt;a href=&quot;#RFC1072&quot;&gt;[RFC1072]&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A high bandwidth-delay product is an important problem case in the design of protocols such as &lt;strong&gt;Transmission Control Protocol&lt;/strong&gt; (TCP) in respect of TCP tuning, because the protocol can only achieve optimum throughput if a sender sends a sufficiently large quantity of data before being required to stop and wait until a confirming message is received from the receiver, acknowledging successful receipt of that data. If the quantity of data sent is insufficient compared with the bandwidth-delay product, then the link is not being kept busy and the protocol is operating below peak efficiency for the link. Protocols that hope to succeed in this respect need carefully designed self-monitoring, self-tuning algorithms. The TCP window scale option may be used to solve this problem caused by insufficient window size, which is limited to 65,535 bytes without scaling.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On the Internet, determining the BDP for a connection can be challenging, given that routes, delay, and the level of statistical multiplexing (i.e., sharing of capacity) change as a function of time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Although handling congestion at the TCP sender is our primary area of interest, work has been done on handling the cases where congestion occurs on the reverse path, because of ACKs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In [RFC5690] a method is introduced to inform a TCP receiver of the ACK ratio it should use (i.e., how many packets it should receive before sending an ACK).&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Definitions in TCP Congestion Control &lt;a href=&quot;#RFC5681&quot;&gt;[RFC5681]&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist square&quot;&gt;
&lt;ul class=&quot;square&quot;&gt;
&lt;li&gt;
&lt;p&gt;SEGMENT: A segment is ANY TCP/IP data or acknowledgment packet (or both).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SENDER MAXIMUM SEGMENT SIZE (SMSS): The SMSS is the size of the largest segment that the sender can transmit.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This value can be based on the maximum transmission unit of the network, the path MTU discovery [RFC1191, RFC4821] algorithm, RMSS (see next item), or other factors.  The size does not include the TCP/IP headers and options.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RECEIVER MAXIMUM SEGMENT SIZE (RMSS): The RMSS is the size of the largest segment the receiver is willing to accept.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is the value specified in the MSS option sent by the receiver during connection startup.  Or, if the MSS option is not used, it is 536 bytes [RFC1122].  The size does not include the TCP/IP headers and options.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;FULL-SIZED SEGMENT: A segment that contains the maximum number of data bytes permitted (i.e., a segment containing SMSS bytes of data).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RECEIVER WINDOW (rwnd): The most recently advertised receiver window.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CONGESTION WINDOW (cwnd): A TCP state variable that limits the amount of data a TCP can send.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At any given time, a TCP MUST NOT send data with a sequence number higher than the sum of the highest acknowledged sequence number and the minimum of cwnd and rwnd.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;INITIAL WINDOW (IW): The initial window is the size of the sender&amp;#8217;s congestion window after the three-way handshake is completed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;LOSS WINDOW (LW): The loss window is the size of the congestion window after a TCP sender detects loss using its retransmission timer.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RESTART WINDOW (RW): The restart window is the size of the congestion window after a TCP restarts transmission after an idle period (if the slow start algorithm is used; see section 4.1 for more discussion).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;FLIGHT SIZE: The amount of data that has been sent but not yet cumulatively acknowledged.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DUPLICATE ACKNOWLEDGMENT: An acknowledgment is considered a &quot;duplicate&quot; in the following algorithms when&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;(a) the receiver of the ACK has outstanding data,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;(b) the incoming acknowledgment carries no data,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;(c) the SYN and FIN bits are both off,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;(d) the acknowledgment number is equal to the greatest acknowledgment received on the given connection (TCP.UNA from [RFC793]) and&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;(e) the advertised window in the incoming acknowledgment equals the advertised window in the last incoming acknowledgment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Alternatively, a TCP that utilizes selective acknowledgments (SACKs) [RFC2018, RFC2883] can leverage the SACK information to determine when an incoming ACK is a &quot;duplicate&quot; (e.g., if the ACK contains previously unknown SACK information).&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#the-classic-algorithms&quot;&gt;1. The Classic Algorithms&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#slow-start&quot;&gt;1.1. Slow Start&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#congestion-avoidance&quot;&gt;1.2. Congestion Avoidance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#selecting-between-slow-start-and-congestion-avoidance&quot;&gt;1.3. Selecting between Slow Start and Congestion Avoidance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#tahoe-reno-and-fast-recovery&quot;&gt;1.4. Tahoe, Reno, and Fast Recovery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#standard-tcp&quot;&gt;1.5. Standard TCP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#evolution-of-the-standard-algorithms&quot;&gt;2. Evolution of the Standard Algorithms&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#newreno&quot;&gt;2.1. NewReno&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#tcp-congestion-control-with-sack&quot;&gt;2.2. TCP Congestion Control with SACK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#forward-acknowledgment-fack-and-rate-halving&quot;&gt;2.3. Forward Acknowledgment (FACK) and Rate Halving&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#references&quot;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-classic-algorithms&quot;&gt;1. The Classic Algorithms&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When a new TCP connection first starts out, it usually has no idea what the initial value for &lt;em&gt;cwnd&lt;/em&gt; should be, as it has no idea how much network capacity is available for it to send its data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;TCP learns the value for &lt;em&gt;awnd&lt;/em&gt; with one packet exchange to the receiver, but without any explicit signaling, the only obvious way it has to learn a good value for &lt;em&gt;cwnd&lt;/em&gt; is to try sending data at faster and faster rates until it experiences a packet drop (or other congestion indicator).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This could be accomplished by either sending immediately at the maximum rate it can (subject to the value of &lt;em&gt;awnd&lt;/em&gt;), or it could start more slowly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Because of the detrimental effects on the performance of other TCP connections sharing the same network path that could be experienced when starting at full rate, a TCP generally uses one algorithm to avoid starting so fast when it starts up to get to steady state. It uses a different one once it is in steady state.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The operation of TCP congestion control at a sender is driven or clocked by the receipt of ACKs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If a TCP is operating at steady state (with an appropriate value of &lt;em&gt;cwnd&lt;/em&gt;), receipt of an ACK indicates that one or more packets have been removed from the network, and consequently that an opportunity to send more has arisen.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Following this line of reasoning, the TCP congestion behavior in steady state attempts to achieve a &lt;em&gt;conservation of packets&lt;/em&gt; in the network.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/tcp-ip/tcp-congestion-control/conservation-of-packets.png&quot; alt=&quot;Conservation of Packets&quot; width=&quot;55%&quot; height=&quot;55%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. TCP congestion control operates on a principle of conservation of packets. Packets (P&lt;sub&gt;b&lt;/sub&gt;) are stretched out in time as they are sent from sender to receiver over links with constrained capacity. As they are received at the receiver spaced apart (P&lt;sub&gt;r&lt;/sub&gt;), ACKs are generated (A&lt;sub&gt;r&lt;/sub&gt;), which return to the sender. ACKs traveling from receiver to sender become spaced out (A&lt;sub&gt;b&lt;/sub&gt;) in relation to the inter-packet spacing of the packets. When ACKs reach the sender (A&lt;sub&gt;s&lt;/sub&gt;), their arrivals provide a signal or &lt;em&gt;ACK clock&lt;/em&gt;, used to tell the sender it is time to send more. In steady state, the overall system is said to be &lt;em&gt;self-clocked&lt;/em&gt;.&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The top funnel holds (larger) data packets traveling along the path from the sender to the receiver.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The comparatively narrow width of the funnel depicts how packets are &lt;em&gt;stretched out&lt;/em&gt; in time as they travel through a relatively slow link.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The ends of the funnels (at sender and receiver) show the queues where packets are held before or after they travel along the path.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The bottom funnel holds the ACKs sent by the receiver back to the sender that correspond to the data packets in the top funnel.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When operating efficiently at steady state, there are no bunches of packets in the top or bottom funnels.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In addition, there is no significant extra space between packets in the top funnel.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Note that an arrival of an ACK at the sender &lt;em&gt;liberates&lt;/em&gt; another data packet to be sent into the top funnel, and that this happens at just the right time (i.e., when the network is able to accept another packet).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This relationship is sometimes called &lt;em&gt;self-clocking&lt;/em&gt;, because the arrival of an ACK, called the &lt;em&gt;ACK clock&lt;/em&gt;, triggers the system to take the action of sending another packet.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;slow-start&quot;&gt;1.1. Slow Start&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The slow start algorithm is executed when a new TCP connection is created or when a loss has been detected due to a retransmission timeout (RTO). It may also be invoked after a sending TCP has gone idle for some time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The purpose of slow start is to help TCP find a value for &lt;em&gt;cwnd&lt;/em&gt; before probing for more available bandwidth using congestion avoidance and to establish the ACK clock.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Typically, a TCP begins a new connection in slow start, eventually drops a packet, and then settles into steady-state operation using the congestion avoidance algorithm.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To quote from &lt;a href=&quot;#RFC5681&quot;&gt;[RFC5681]&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Beginning transmission into a network with unknown conditions requires TCP to slowly probe the network to determine the available capacity, in order to avoid congesting the network with an inappropriately large burst of data. The slow start algorithm is used for this purpose at the beginning of a transfer, or after repairing loss detected by the retransmission timer.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;TCP begins in slow start by sending a certain number of segments (after the SYN exchange), called the &lt;em&gt;initial window&lt;/em&gt; (IW).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The value of &lt;em&gt;IW&lt;/em&gt; was originally one &lt;em&gt;SMSS&lt;/em&gt;, although with &lt;a href=&quot;#RFC5681&quot;&gt;[RFC5681]&lt;/a&gt; it is allowed to be larger.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Note that in most cases &lt;em&gt;SMSS&lt;/em&gt; is equal to the smaller of the receiver&amp;#8217;s MSS and the path MTU (less header sizes).
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Assuming no packets are lost and each packet causes an ACK to be sent in response, an ACK is returned for the first segment, allowing the sending TCP to send another segment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, slow start operates by incrementing &lt;em&gt;cwnd&lt;/em&gt; by min(&lt;em&gt;N&lt;/em&gt;, SMSS) for each good ACK received, where &lt;em&gt;N&lt;/em&gt; is the number of previously unacknowledged bytes ACKed by the received &lt;em&gt;good ACK&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
A &lt;em&gt;good ACK&lt;/em&gt; is one that returns a higher ACK number than has been seen so far.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thus, after one segment is ACKed, the &lt;em&gt;cwnd&lt;/em&gt; value is ordinarily increased to 2, and two segments are sent. If each of those causes new good ACKs to be returned, 2 increases to 4, 4 to 8, and so on.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In general, assuming no loss and an ACK for every packet, the value of &lt;em&gt;W&lt;/em&gt; after &lt;em&gt;k&lt;/em&gt; round-trip exchanges is W = 2&lt;sup&gt;k&lt;/sup&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rewriting, we can say that &lt;em&gt;k&lt;/em&gt; = log&lt;sub&gt;2&lt;/sub&gt;&lt;em&gt;W&lt;/em&gt; RTTs are required to reach an operating window of &lt;em&gt;W&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This growth seems quite fast (increasing as an exponential function) but is still slower than what TCP would do if it were allowed to send immediately a window of packets equal in size to the receiver&amp;#8217;s advertised window. Recall that &lt;em&gt;W&lt;/em&gt; is still never allowed to exceed &lt;em&gt;awnd&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Eventually, cwnd (and thus &lt;em&gt;W&lt;/em&gt;) could become so large that the corresponding window of packets sent overwhelms the network (recall that TCP&amp;#8217;s throughput rate is proportional to &lt;em&gt;W/RTT&lt;/em&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;When this happens, &lt;em&gt;cwnd&lt;/em&gt; is reduced substantially (to half of its former value).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In addition, this is the point at which TCP switches from operating in slow start to operating in congestion avoidance.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The switch point is determined by the relationship between &lt;em&gt;cwnd&lt;/em&gt; and a value called the &lt;strong&gt;&lt;em&gt;slow start threshold&lt;/em&gt;&lt;/strong&gt; (or &lt;em&gt;ssthresh&lt;/em&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/tcp-ip/tcp-congestion-control/classic-slow-start.png&quot; alt=&quot;Operation of the classic slow start algorithm&quot; width=&quot;55%&quot; height=&quot;55%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2. Operation of the classic slow start algorithm. In the simple case where ACKs are not delayed, every arriving good ACK allows the sender to inject two new packets (left). This leads to an exponential growth in the size of the sender’s window as a function of time (right, upper line). When ACKs are delayed, such as when an ACK is produced for every other packet, the growth is still exponential but slower (right, lower line).&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;congestion-avoidance&quot;&gt;1.2. Congestion Avoidance&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To find additional capacity that may become available, but to not do so too aggressively, TCP implements the congestion avoidance algorithm.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once &lt;em&gt;ssthresh&lt;/em&gt; is established and &lt;em&gt;cwnd&lt;/em&gt; is at least at this level, a TCP runs the congestion avoidance algorithm, which seeks additional capacity by increasing &lt;em&gt;cwnd&lt;/em&gt; by approximately one segment for each window&amp;#8217;s worth of data that is moved from sender to receiver successfully.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This provides a much slower growth rate than slow start: approximately linear in terms of time, as opposed to slow start&amp;#8217;s exponential growth.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;More precisely, &lt;em&gt;cwnd&lt;/em&gt; is usually updated as follows for each received nonduplicate ACK:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;&lt;em&gt;cwnd&lt;sub&gt;t+1&lt;/sub&gt;&lt;/em&gt; = &lt;em&gt;cwnd&lt;sub&gt;t&lt;/sub&gt;&lt;/em&gt; + SMSS * SMSS/&lt;em&gt;cwnd&lt;sub&gt;t&lt;/sub&gt;&lt;/em&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Looking at this relationship briefly, assume &lt;em&gt;cwnd&lt;sub&gt;0&lt;/sub&gt;&lt;/em&gt; = &lt;em&gt;k&lt;/em&gt;*&lt;em&gt;SMSS&lt;/em&gt; bytes were sent into the network in &lt;em&gt;k&lt;/em&gt; segments. After the first ACK arrives, &lt;em&gt;cwnd&lt;/em&gt; is updated to be larger by a factor of (1/&lt;em&gt;k&lt;/em&gt;):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;&lt;em&gt;cwnd&lt;sub&gt;1&lt;/sub&gt;&lt;/em&gt; = &lt;em&gt;cwnd&lt;sub&gt;0&lt;/sub&gt;&lt;/em&gt; + SMSS * SMSS/&lt;em&gt;cwnd&lt;sub&gt;0&lt;/sub&gt;&lt;/em&gt;

= &lt;em&gt;k&lt;/em&gt;*SMSS + SMSS * (SMSS/(k*SMSS))

= &lt;em&gt;k&lt;/em&gt;*SMSS + (1/&lt;em&gt;k&lt;/em&gt;) * SMSS

= (&lt;em&gt;k&lt;/em&gt; + (1/&lt;em&gt;k&lt;/em&gt;))*SMSS

= cwnd&lt;sub&gt;0&lt;/sub&gt; + (1/&lt;em&gt;k&lt;/em&gt;)*SMSS&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Because the value of &lt;em&gt;cwnd&lt;/em&gt; grows slightly with each new ACK arrival, and this value is in the denominator of the expression in the first equation above, the overall growth rate of &lt;em&gt;cwnd&lt;/em&gt; is slightly sublinear.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/tcp-ip/tcp-congestion-control/congestion-avoidance.png&quot; alt=&quot;Operation of the congestion avoidance algorithm&quot; width=&quot;55%&quot; height=&quot;55%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 3. Operation of the congestion avoidance algorithm. In the simple case where ACKs are not delayed, every arriving good ACK allows the sender to inject approximately &lt;em&gt;1/W&lt;/em&gt; fraction of a new packet. This leads to approximately linear growth in the size of the sender&amp;#8217;s window as a function of time (right, upper line). When ACKs are delayed, such as when an ACK is produced for every other packet, the growth is still approximately linear but somewhat slower (right, lower line).&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The assumption of the algorithm is that packet loss caused by bit errors is very small (much less than 1%), and therefore the loss of a packet signals congestion somewhere in the network between the source and destination.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If this assumption is false, which it sometimes is for wireless networks, TCP slows down even when no congestion is present.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In addition, many RTTs may be required for the value of &lt;em&gt;cwnd&lt;/em&gt; to grow large, which is required for efficient use of networks with high capacity.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;selecting-between-slow-start-and-congestion-avoidance&quot;&gt;1.3. Selecting between Slow Start and Congestion Avoidance&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In normal operations, a TCP connection is always running either the slow start or the congestion avoidance procedure, but never the two simultaneously.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;When &lt;em&gt;cwnd &amp;lt; ssthresh&lt;/em&gt;, slow start is used, and when &lt;em&gt;cwnd &amp;gt; ssthresh&lt;/em&gt;, congestion avoidance is used.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When they are equal, either can be used.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The initial value of &lt;em&gt;ssthresh&lt;/em&gt; may be set arbitrarily high (e.g., to &lt;em&gt;awnd&lt;/em&gt; or higher), which causes TCP to always start with slow start. When a retransmission occurs, caused by either a retransmission timeout or the execution of fast retransmit, &lt;em&gt;ssthresh&lt;/em&gt; is updated as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;&lt;em&gt;ssthresh&lt;/em&gt; = max(&lt;em&gt;flight size&lt;/em&gt;/2, 2*&lt;em&gt;SMSS&lt;/em&gt;)&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;tahoe-reno-and-fast-recovery&quot;&gt;1.4. Tahoe, Reno, and Fast Recovery&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The slow start and congestion avoidance constitute the first congestion control algorithms which were introduced in the late 1980s with the 4.2 release of UC Berkeley&amp;#8217;s version of UNIX, called the &lt;em&gt;Berkeley Software Distribution&lt;/em&gt;, or &lt;em&gt;BSD UNIX&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The 4.2 release of BSD (called &lt;em&gt;Tahoe&lt;/em&gt;) included a version of TCP that started connections in slow start, and if a packet was lost, detected by either a timeout or the fast retransmit procedure, the slow start algorithm was reinitiated.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Tahoe was implemented by simply reducing &lt;em&gt;cwnd&lt;/em&gt; to its starting value (1 SMSS at that time) upon any loss, forcing the connection to slow start until &lt;em&gt;cwnd&lt;/em&gt; grew to the value &lt;em&gt;ssthresh&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One problem with this approach is that for large BDP paths, this can cause the connection to significantly underutilize the available bandwidth while the sending TCP goes through slow start to get back to the point at which it was operating before the packet loss.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To address this problem, the reinitiation of slow start on any packet loss was reconsidered.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Ultimately, if packet loss is detected by duplicate ACKs (invoking fast retransmit), &lt;em&gt;cwnd&lt;/em&gt; is instead reset to the last value of &lt;em&gt;ssthresh&lt;/em&gt; instead of only 1 SMSS.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Slow start is still initiated on a timeout, which is generally the case for most TCP variants.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This approach allows the TCP to slow down to half of its previous rate without reverting to slow start.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In exploring the issue of large BDP paths further and thinking back to the conservation of packets principle mentioned before, it has been observed that any ACKs that are received, even while recovering after a loss, still represent opportunities to inject new packets into the network.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This became the basis of the &lt;strong&gt;fast recovery&lt;/strong&gt; procedure, which was released in conjunction with the popular 4.3 BSD &lt;strong&gt;Reno&lt;/strong&gt; version of BSD UNIX.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fast recovery allows &lt;em&gt;cwnd&lt;/em&gt; to (temporarily) grow by 1 SMSS for each ACK received while recovering.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The congestion window is therefore &lt;em&gt;inflated&lt;/em&gt; for a period of time, allowing an additional new packet to be sent for each ACK received, until a good ACK is seen.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Any nonduplicate (&lt;em&gt;good&lt;/em&gt;) ACK causes TCP to exit recovery and reduces the congestion back to its pre-inflated value.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;TCP Reno became very popular and ultimately the basis for what might reasonably be called &quot;standard TCP&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;standard-tcp&quot;&gt;1.5. Standard TCP&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To summarize the combined algorithm from &lt;a href=&quot;#RFC5681&quot;&gt;[RFC5681]&lt;/a&gt;, TCP begins a connection in slow start (&lt;em&gt;cwnd&lt;/em&gt; = &lt;em&gt;IW&lt;/em&gt;) with a large value of &lt;em&gt;ssthresh&lt;/em&gt;, generally at least the value of &lt;em&gt;awnd&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Upon receiving a good ACK (one that acknowledges new data), TCP updates the value of &lt;em&gt;cwnd&lt;/em&gt; as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;&lt;em&gt;cwnd&lt;/em&gt; += &lt;em&gt;SMSS&lt;/em&gt;         (if &lt;em&gt;cwnd&lt;/em&gt; &amp;lt; &lt;em&gt;ssthresh&lt;/em&gt;)        Slow start
&lt;em&gt;cwnd&lt;/em&gt; += &lt;em&gt;SMSS&lt;/em&gt;*&lt;em&gt;SMSS&lt;/em&gt;/&lt;em&gt;cwnd&lt;/em&gt;         (if &lt;em&gt;cwnd&lt;/em&gt; &amp;gt; &lt;em&gt;ssthresh&lt;/em&gt;)        Congestion avoidance&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When fast retransmit is invoked because of receipt of a third duplicate ACK (or other signal, if conventional fast retransmit initiation is not used), the following actions are performed:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;ssthresh&lt;/em&gt; is updated to no more than the value given in equation &lt;em&gt;ssthresh&lt;/em&gt; = max(&lt;em&gt;flight size&lt;/em&gt;/2, 2*&lt;em&gt;SMSS&lt;/em&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The fast retransmit algorithm is performed, and &lt;em&gt;cwnd&lt;/em&gt; is set to (&lt;em&gt;ssthresh&lt;/em&gt; + 3*&lt;em&gt;SMSS&lt;/em&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;cwnd&lt;/em&gt; is temporarily increased by &lt;em&gt;SMSS&lt;/em&gt; for each duplicate ACK received.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When a good ACK is received, &lt;em&gt;cwnd&lt;/em&gt; is reset back to &lt;em&gt;ssthresh&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The actions in steps 2 and 3 constitute &lt;em&gt;fast recovery&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Step 2 first adjusts &lt;em&gt;cwnd&lt;/em&gt;, which usually causes it to be reduced to half of its former value, and then temporarily inflates it to take into account the fact that the receipt of each duplicate ACK indicates that some packet has left the network (and thus should permit another to be inserted).&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This step is also where &lt;em&gt;multiplicative decrease&lt;/em&gt; occurs, as &lt;em&gt;cwnd&lt;/em&gt; is ordinarily multiplied by some value (0.5 here) to form its new value.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Step 3 continues the inflation process, allowing the sender to send additional packets (assuming &lt;em&gt;awnd&lt;/em&gt; is not exceeded).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In step 4, the TCP is assumed to have recovered, so the temporary inflation is removed (and so this step is sometimes called &lt;em&gt;deflation&lt;/em&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Slow start is always used in two cases: when a new connection is started, and when a retransmission timeout occurs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It can also be invoked when a sender has been idle for a relatively long time or there is some other reason to suspect that &lt;em&gt;cwnd&lt;/em&gt; may not accurately reflect the current network congestion state.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this case, the initial value of &lt;em&gt;cwnd&lt;/em&gt; is set to the &lt;em&gt;restart window&lt;/em&gt; (&lt;em&gt;RW&lt;/em&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In &lt;a href=&quot;#RFC5681&quot;&gt;[RFC5681]&lt;/a&gt;, the recommended value of &lt;em&gt;RW&lt;/em&gt; = min(&lt;em&gt;IW&lt;/em&gt;, &lt;em&gt;cwnd&lt;/em&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Other than this case, when slow start is invoked, &lt;em&gt;cwnd&lt;/em&gt; is set to &lt;em&gt;IW&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;evolution-of-the-standard-algorithms&quot;&gt;2. Evolution of the Standard Algorithms&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The classic and standard TCP algorithms made a tremendous contribution to the operation of TCP, essentially addressing the major problem of Internet congestion collapse.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The problem of Internet congestion collapse was a serious concern during the
years 1986–1988. In October 1986 the NSFNET backbone, an important component
of the early Internet, had been observed to operate with an effective capacity
some 1000 times less than it should have (called the &quot;NSFNET meltdown&quot;).
The primary reason for the problem was aggressive retransmissions during times
of loss without any controls. This behavior drove the network into a persistently
congested state where packet loss was massive (causing more retransmissions)
and throughput was low. Adoption of the classic congestion control algorithms
effectively eliminated this problem.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;newreno&quot;&gt;2.1. NewReno&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One problem with fast recovery is that when multiple packets are dropped in a window of data, once one packet is recovered (i.e., successfully delivered and ACKed), a good ACK can be received at the sender that causes the temporary window inflation in fast recovery to be erased before all the packets that were lost have been retransmitted.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
ACKs that trigger this behavior are called &lt;em&gt;partial ACKs&lt;/em&gt; (ACKs that cover previously unacknowledged data, but not all the data outstanding when loss was detected).
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A Reno TCP reacting to a partial ACK by reducing its inflated congestion window can go idle until a retransmission timer fires.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;To understand why this happens, recall that (non-SACK) TCP depends on the signal of three (or &lt;em&gt;dupthresh&lt;/em&gt;) duplicate ACKs to trigger its fast retransmit procedure.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If there are not enough packets in the network, it is not possible to trigger this procedure on packet loss, ultimately leading to the expiration of the retransmission timer and invocation of the slow start procedure, which drastically impacts TCP throughput performance.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To address this problem with Reno, a modification called &lt;strong&gt;&lt;em&gt;NewReno&lt;/em&gt;&lt;/strong&gt; &lt;a href=&quot;#RFC3782&quot;&gt;[RFC3782]&lt;/a&gt; has been developed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This procedure modifies fast recovery by keeping track of the highest sequence number from the last transmitted window of data (the &lt;em&gt;recovery point&lt;/em&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Only when an ACK with an ACK number at least as large as the recovery point is received is the inflation of fast recovery removed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This allows a TCP to continue sending one segment for each ACK it receives while recovering and reduces the occurrence of retransmission timeouts, especially when multiple packets are dropped in a single window of data.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;NewReno is a popular variant of modern TCPs—it does not suffer from the problems of the original fast recovery and is significantly less complicated to implement than SACKs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With SACKs, however, a TCP can perform better than NewReno when multiple packets are lost in a window of data, but doing this requires careful attention to the congestion control procedures.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;tcp-congestion-control-with-sack&quot;&gt;2.2. TCP Congestion Control with SACK&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With SACK TCP, the sender can be informed of multiple missing segments and would theoretically be able to send them all immediately because they would all be in the valid window.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, this might involve sending too much data into the network at once, thereby compromising the congestion control.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following issue arises with SACK TCP: using only &lt;em&gt;cwnd&lt;/em&gt; as a bound on the sender&amp;#8217;s sliding window to indicate how many (and which) packets to send during recovery periods is not sufficient.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Instead, the selection of &lt;em&gt;which&lt;/em&gt; packets to send needs to be decoupled from the choice of &lt;em&gt;when&lt;/em&gt; to send them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One way to implement this decoupling is to have a TCP keep track of how much data it has injected into the network separately from the maintenance of the window.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In &lt;a href=&quot;#RFC3517&quot;&gt;[RFC3517]&lt;/a&gt; this is called the &lt;em&gt;pipe&lt;/em&gt; variable, an estimate of the flight size.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Importantly, the &lt;em&gt;pipe&lt;/em&gt; variable counts bytes (or packets, depending on the implementation) of transmissions and retransmissions, provided they are not known to be lost.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Assuming a large value of &lt;em&gt;awnd&lt;/em&gt;, a SACK TCP is permitted to send a segment anytime the following relationship holds true: &lt;em&gt;cwnd&lt;/em&gt; - &lt;em&gt;pipe&lt;/em&gt; ≥ &lt;em&gt;SMSS&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In other words, &lt;em&gt;cwnd&lt;/em&gt; is still used to place a limit on the amount of data that can be outstanding in the network, but the amount of data estimated to be in the network is accounted for separately from the window itself.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;forward-acknowledgment-fack-and-rate-halving&quot;&gt;2.3. Forward Acknowledgment (FACK) and Rate Halving&lt;/h3&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist bibliography&quot;&gt;
&lt;ul class=&quot;bibliography&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;ASA00&quot;&gt;&lt;/a&gt;[ASA00] A. Aggarwal, S. Savage, and T. Anderson, &quot;Understanding the Performance of TCP Pacing&quot;, &lt;em&gt;Proc. INFOCOM&lt;/em&gt;, Mar. 2004.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;TCPIPV1&quot;&gt;&lt;/a&gt;[TCPIPV1] Kevin Fall, W. Stevens &lt;em&gt;TCP/IP Illustrated: The Protocols, Volume 1&lt;/em&gt;. 2nd edition, Addison-Wesley Professional, 2011&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;RFC1072&quot;&gt;&lt;/a&gt;[RFC1072] V. Jacobson, R. Braden, &lt;em&gt;TCP Extensions for Long-Delay Paths&lt;/em&gt;, Internet RFC 1072, Oct. 1988, See &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc1072&quot; class=&quot;bare&quot;&gt;https://www.rfc-editor.org/rfc/rfc1072&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;RFC5681&quot;&gt;&lt;/a&gt;[RFC5681] M. Allman, V. Paxson, E. Blanton, &lt;em&gt;TCP Congestion Control&lt;/em&gt;, Internet RFC 5681, Sept. 2009, See &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc5681&quot; class=&quot;bare&quot;&gt;https://www.rfc-editor.org/rfc/rfc5681&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;RFC3782&quot;&gt;&lt;/a&gt;[RFC3782] S. Floyd, T. Henderson, and A. Gurtov, &lt;em&gt;The NewReno Modification to TCP&amp;#8217;s Fast Recovery Algorithm&lt;/em&gt;, Internet RFC 3782, Apr. 2004, See &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc3782&quot; class=&quot;bare&quot;&gt;https://www.rfc-editor.org/rfc/rfc3782&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;RFC3517&quot;&gt;&lt;/a&gt;[RFC3517]] E. Blanton, M. Allman, K. Fall, and L. Wang, &lt;em&gt;A Conservative Selective Acknowledgment (SACK)-Based Loss Recovery Algorithm for TCP&lt;/em&gt;, Internet RFC 3517, Apr. 2003, See &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc3517&quot; class=&quot;bare&quot;&gt;https://www.rfc-editor.org/rfc/rfc3517&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;BDP&quot;&gt;&lt;/a&gt;[BDP] &lt;a href=&quot;https://en.wikipedia.org/wiki/Bandwidth-delay_product&quot; class=&quot;bare&quot;&gt;https://en.wikipedia.org/wiki/Bandwidth-delay_product&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><category term="networking" /><category term="networking" /><category term="tcp" /></entry><entry><title type="html">TCP/IP: TCP Data Flow and Window Management</title><link href="https://blog.codefarm.me/2023/01/31/tcp-ip-tcp-data-flow-and-window-management/" rel="alternate" type="text/html" title="TCP/IP: TCP Data Flow and Window Management" /><published>2023-01-31T16:22:46+08:00</published><updated>2023-01-31T16:22:46+08:00</updated><id>https://blog.codefarm.me/2023/01/31/tcp-ip-tcp-data-flow-and-window-management</id><content type="html" xml:base="https://blog.codefarm.me/2023/01/31/tcp-ip-tcp-data-flow-and-window-management/">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We now examine the dynamics of TCP data transfers, focusing initially on &lt;em&gt;interactive&lt;/em&gt; connections and then introducing flow control and associated window management procedures that are used in conjunction with congestion control for bulk data transfers (i.e., &lt;em&gt;noninteractive&lt;/em&gt; communications).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An &lt;em&gt;interactive&lt;/em&gt; TCP connection is one in which user input such as keystrokes, short messages, or joystick/mouse movements need to be delivered between a client and a server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If small segments are used to carry such user input, the protocol imposes more overhead because there are fewer useful payload bytes per packet exchanged.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On the other hand, filling packets with more data usually requires them to be delayed, which can have a negative impact on delay-sensitive applications such as online games and collaboration tools.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#interactive-communication&quot;&gt;1. Interactive Communication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#delayed-acknowledgments&quot;&gt;2. Delayed Acknowledgments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#nagle-algorithm&quot;&gt;3. Nagle Algorithm&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#delayed-ack-and-nagle-algorithm-interaction&quot;&gt;3.1. Delayed ACK and Nagle Algorithm Interaction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#disabling-the-nagle-algorithm&quot;&gt;3.2. Disabling the Nagle Algorithm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#flow-control-and-window-management&quot;&gt;4. Flow Control and Window Management&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#sliding-windows&quot;&gt;4.1. Sliding Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#zero-windows-and-the-tcp-persist-timer&quot;&gt;4.2. Zero Windows and the TCP Persist Timer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#silly-window-syndrome-sws&quot;&gt;4.3. Silly Window Syndrome (SWS)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#large-buffers-and-auto-tuning&quot;&gt;4.4. Large Buffers and Auto-Tuning&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#urgent-mechanism&quot;&gt;5. Urgent Mechanism&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#references&quot;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;interactive-communication&quot;&gt;1. Interactive Communication&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Studies of TCP traffic usually find that 90% or more of all TCP segments contain &lt;em&gt;bulk data&lt;/em&gt; (e.g., Web, file sharing, electronic mail, backups) and the remaining portion contains &lt;em&gt;interactive data&lt;/em&gt; (e.g., remote login, network games).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Bulk data segments tend to be relatively large (1500 bytes or larger), while interactive data segments tend to be much smaller (tens of bytes of user data).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TCP handles both types of data using the same protocol and packet format, but different algorithms come into play for each.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let us look at the flow of data when we type an interactive command on an ssh connection.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Secure shell (&lt;code&gt;ssh&lt;/code&gt;) is a remote login protocol that provides strong security (privacy and authentication based on cryptography). It has mostly replaced the earlier UNIX &lt;code&gt;rlogin&lt;/code&gt; and Telnet programs that provide remote login service but without strong security.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/tcp-ip/tcp-data-flow-and-window-management/ssh-echo.png&quot; alt=&quot;ssh echo&quot; width=&quot;75%&quot; height=&quot;75%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. One possible way to remotely echo an interactive keystroke is a separate ACK and echo packet (a). A typical TCP coalesces the ACK for the data byte and the echo of the byte into a single packet (using &lt;em&gt;delayed acknowledgments&lt;/em&gt; with &lt;em&gt;piggybacking&lt;/em&gt;) (b).&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;delayed-acknowledgments&quot;&gt;2. Delayed Acknowledgments&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In many cases, TCP does not provide an ACK for every incoming packet because of TCP&amp;#8217;s cumulative ACK field.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Using a cumulative ACK allows TCP to intentionally &lt;em&gt;delay&lt;/em&gt; sending an ACK for some amount of time, in the hope that it can combine the ACK it needs to send with some data the local application wishes to send in the other direction, that is a form of &lt;strong&gt;piggybacking&lt;/strong&gt; which is used most often in conjunction with bulk data transfers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Host Requirements RFC [RFC1122] states that TCP should implement a delayed ACK but the delay must be less than 500ms. Many implementations use a maximum of 200ms.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Delaying ACKs causes less traffic to be carried over the network than when ACKs are not delayed because fewer ACKs are used.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Linux uses a dynamic adjustment algorithm whereby it can change between ACKing every segment (called &lt;em&gt;quickack&lt;/em&gt; mode) and conventional delayed ACK mode.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On Red Hat Enterprise Linux, there are two modes used by TCP to acknowledge data reception: &lt;a href=&quot;#RHELDELACK&quot;&gt;[RHELDELACK]&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Quick ACK&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This mode is used at the start of a TCP connection so that the congestion window can grow quickly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The acknowledgment (ACK) timeout interval (ATO) is set to &lt;code&gt;tcp_ato_min&lt;/code&gt;, the minimum timeout value.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To change the default TCP ACK timeout value, write the required value in milliseconds to the &lt;code&gt;/proc/sys/net/ipv4/tcp_ato_min&lt;/code&gt; file:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;~]#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;4 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /proc/sys/net/ipv4/tcp_ato_min&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Delayed ACK&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After the connection is established, TCP assumes this mode, in which ACKs for multiple received packets can be sent in a single packet.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;ATO is set to &lt;code&gt;tcp_delack_min&lt;/code&gt; to restart or reset the timer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To change the default TCP Delayed ACK value, write the required value in milliseconds to the &lt;code&gt;/proc/sys/net/ipv4/tcp_delack_min&lt;/code&gt; file:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;~]#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;4 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /proc/sys/net/ipv4/tcp_delack_min&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;TCP switches between the two modes depending on the current congestion.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;nagle-algorithm&quot;&gt;3. Nagle Algorithm&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When using IPv4, sending one single key press across an ssh connection generates TCP/IPv4 packets of about 88 bytes in size (using the encryption and authentication from the example): 20 bytes for the IP header, 20 bytes for the TCP header (assuming no options), and 48 bytes of data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These small packets (called &lt;strong&gt;tinygrams&lt;/strong&gt;) have a relatively high overhead for the network beacuse they contain relatively little useful application data compared to the rest of the packet contents.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Such high-overhead packets are normally not a problem on LANs, because most LANs are not congested and such packets would not need to be carried very far.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;However, these tinygrams can add to congestion and lead to inefficient use of capacity on wide area networks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A simple and elegant solution was proposed by John Nagle in &lt;a href=&quot;#RFC0896&quot;&gt;[RFC0896]&lt;/a&gt;, now called the &lt;em&gt;Nagle algorithm&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;strong&gt;Nagle algorithm&lt;/strong&gt; says that when a TCP connection has outstanding data that has not yet been acknowledged, small segments (those smaller than the SMSS) cannot be sent until all outstanding data is acknowledged.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Instead, small amounts of data are collected by TCP and sent in a single segment when an acknowledgment arrives.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This procedure effectively forces TCP into &lt;em&gt;stop-and-wait&lt;/em&gt; behavior—it stops sending until an ACK is received for any outstanding data.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The beauty of this algorithm is that it is &lt;em&gt;self-clocking&lt;/em&gt;: the faster the ACKs come back, the faster the data is sent.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On a comparatively high-delay WAN, where reducing the number of tinygrams is desirable, fewer segments are sent per unit time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Said another way, the RTT controls the packet sending rate.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To illustrate the effect of the Nagle algorithm, we can compare the behaviors of an application using TCP with the Nagle algorithm enabled and disabled.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Using a connection with a relatively large RTT of about 190ms, we can see the differences.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Using the &lt;code&gt;tc&lt;/code&gt; to emulate the network delay on the destination server:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;tc qdisc add dev ens32 root netem delay 190ms
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;tc qdisc show dev ens32
&lt;span class=&quot;go&quot;&gt;qdisc netem 8001: root refcnt 2 limit 1000 delay 190.0ms&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, we examine the case with typing a &lt;code&gt;date&lt;/code&gt; command when Nagle is disabled (the default for ssh):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;00:00:00.000000 IP 192.168.91.1.17203 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.141.22: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;3968491625:3968491661, ack 2989677446, win 513, length 36
&lt;span class=&quot;gp&quot;&gt;00:00:00.172405 IP 192.168.91.1.17203 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.141.22: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;36:72, ack 1, win 513, length 36
&lt;span class=&quot;gp&quot;&gt;00:00:00.191476 IP 192.168.91.141.22 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.1.17203: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1:37, ack 36, win 501, length 36
&lt;span class=&quot;gp&quot;&gt;00:00:00.234297 IP 192.168.91.1.17203 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.141.22: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], ack 37, win 513, length 0
&lt;span class=&quot;gp&quot;&gt;00:00:00.364007 IP 192.168.91.141.22 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.1.17203: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;37:73, ack 72, win 501, length 36
&lt;span class=&quot;gp&quot;&gt;00:00:00.371952 IP 192.168.91.1.17203 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.141.22: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;72:108, ack 73, win 513, length 36
&lt;span class=&quot;gp&quot;&gt;00:00:00.523976 IP 192.168.91.1.17203 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.141.22: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;108:144, ack 73, win 513, length 36
&lt;span class=&quot;gp&quot;&gt;00:00:00.562856 IP 192.168.91.141.22 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.1.17203: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;73:109, ack 108, win 501, length 36
&lt;span class=&quot;gp&quot;&gt;00:00:00.609221 IP 192.168.91.1.17203 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.141.22: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], ack 109, win 512, length 0
&lt;span class=&quot;gp&quot;&gt;00:00:00.714586 IP 192.168.91.141.22 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.1.17203: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;109:145, ack 144, win 501, length 36
&lt;span class=&quot;gp&quot;&gt;00:00:00.764111 IP 192.168.91.1.17203 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.141.22: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], ack 145, win 512, length 0
&lt;span class=&quot;gp&quot;&gt;00:00:01.382426 IP 192.168.91.1.17203 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.141.22: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;144:180, ack 145, win 512, length 36
&lt;span class=&quot;gp&quot;&gt;00:00:01.576594 IP 192.168.91.141.22 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.1.17203: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;145:181, ack 180, win 501, length 36
&lt;span class=&quot;gp&quot;&gt;00:00:01.584727 IP 192.168.91.141.22 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.1.17203: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;181:249, ack 180, win 501, length 68
&lt;span class=&quot;gp&quot;&gt;00:00:01.584731 IP 192.168.91.141.22 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.1.17203: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;249:285, ack 180, win 501, length 36
&lt;span class=&quot;gp&quot;&gt;00:00:01.584731 IP 192.168.91.141.22 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.1.17203: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;285:353, ack 180, win 501, length 68
&lt;span class=&quot;gp&quot;&gt;00:00:01.584995 IP 192.168.91.1.17203 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.141.22: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], ack 353, win 511, length 0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;An ssh trace showing a TCP connection with approximately a 190ms RTT.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Nagle algorithm is disabled.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Transmissions and ACKs are intermingled, and the exchange takes 1.58s.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pure ACKs (segments with no data) indicate that command output at the server has been processed by the client.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If we repeat this measurement soon after (i.e., in similar network conditions) when Nagle is enabled:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;00:00:00.000000 IP 192.168.91.1.17263 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.141.22: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;3369922274:3369922310, ack 3162733327, win 513, length 36
&lt;span class=&quot;gp&quot;&gt;00:00:00.191032 IP 192.168.91.141.22 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.1.17263: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1:37, ack 36, win 501, length 36
&lt;span class=&quot;gp&quot;&gt;00:00:00.191425 IP 192.168.91.1.17263 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.141.22: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;36:72, ack 37, win 513, length 36
&lt;span class=&quot;gp&quot;&gt;00:00:00.381981 IP 192.168.91.141.22 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.1.17263: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;37:73, ack 72, win 501, length 36
&lt;span class=&quot;gp&quot;&gt;00:00:00.382316 IP 192.168.91.1.17263 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.141.22: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;72:108, ack 73, win 513, length 36
&lt;span class=&quot;gp&quot;&gt;00:00:00.573124 IP 192.168.91.141.22 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.1.17263: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;73:109, ack 108, win 501, length 36
&lt;span class=&quot;gp&quot;&gt;00:00:00.573501 IP 192.168.91.1.17263 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.141.22: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;108:144, ack 109, win 512, length 36
&lt;span class=&quot;gp&quot;&gt;00:00:00.763985 IP 192.168.91.141.22 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.1.17263: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;109:145, ack 144, win 501, length 36
&lt;span class=&quot;gp&quot;&gt;00:00:00.816253 IP 192.168.91.1.17263 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.141.22: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], ack 145, win 512, length 0
&lt;span class=&quot;gp&quot;&gt;00:00:01.191218 IP 192.168.91.1.17263 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.141.22: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;144:180, ack 145, win 512, length 36
&lt;span class=&quot;gp&quot;&gt;00:00:01.382047 IP 192.168.91.141.22 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.1.17263: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;145:181, ack 180, win 501, length 36
&lt;span class=&quot;gp&quot;&gt;00:00:01.383712 IP 192.168.91.141.22 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.1.17263: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;181:249, ack 180, win 501, length 68
&lt;span class=&quot;gp&quot;&gt;00:00:01.383716 IP 192.168.91.141.22 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.1.17263: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;249:285, ack 180, win 501, length 36
&lt;span class=&quot;gp&quot;&gt;00:00:01.383717 IP 192.168.91.141.22 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.1.17263: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;285:353, ack 180, win 501, length 68
&lt;span class=&quot;gp&quot;&gt;00:00:01.384295 IP 192.168.91.1.17263 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.141.22: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], ack 353, win 511, length 0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An ssh trace showing a TCP connection with a 190ms RTT and the Nagle algorithm in
operation. Requests are followed in lockstep with responses, and the exchange takes
0.80s using 11 packets.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Nagle algorithm forces TCP to operate in a stop-and-wait fashion, so that the TCP sender cannot proceed until ACKs are received.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If we look at the times for each request/response pair—0.0, 0.19, 0.19, and 0.38—we see that they follow a pattern; each is separated by almost exactly 190ms, which is very close to the RTT of the connection.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is the trade-off the Nagle algorithm makes: fewer and larger packets are used, but the required delay is higher.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/tcp-ip/tcp-data-flow-and-window-management/nagle-alg-comapring.png&quot; alt=&quot;nagle alg comapring&quot; width=&quot;35%&quot; height=&quot;35%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2. Comparing the use of the Nagle algorithm for TCP connections with a similar operating environment. With Nagle enabled, at most one packet is allowed to be outstanding at any given time. This reduces the number of small packets but increases delay.&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;delayed-ack-and-nagle-algorithm-interaction&quot;&gt;3.1. Delayed ACK and Nagle Algorithm Interaction&lt;/h3&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/tcp-ip/tcp-data-flow-and-window-management/delayack-nagle-inter.png&quot; alt=&quot;delayack nagle inter&quot; width=&quot;35%&quot; height=&quot;35%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 3. The interaction between the Nagle algorithm and delayed ACKs. A temporary form of deadlock can occur until the delayed ACK timer fires.&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here we see that the client, after receiving two packets from the server, withholds an ACK, hoping that additional data headed toward the server can be piggybacked.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Generally, TCP is required to provide an ACK for two received packets only if they are full-size, and they are not here.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At the server side, because the Nagle algorithm is operating, no additional packets are permitted to be sent to the client until an ACK is returned because at most one &lt;em&gt;small&lt;/em&gt; packet is allowed to be outstanding.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The combination of delayed ACKs and the Nagle algorithm leads to a form of &lt;em&gt;deadlock&lt;/em&gt; (each side waiting for the other).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Fortunately, this deadlock is not permanent and is broken when the delayed ACK timer fires, which forces the client to provide an ACK even if the client has no additional data to send.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;disabling-the-nagle-algorithm&quot;&gt;3.2. Disabling the Nagle Algorithm&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Nagle algorithm can be disabled in a number of ways. The ability to disable it is required by the Host Requirements RFC &lt;a href=&quot;#RFC1122&quot;&gt;[RFC1122]&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An application can specify the &lt;code&gt;TCP_NODELAY&lt;/code&gt; option when using the Berkeley sockets API.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;man&quot;&gt;TCP(7)                     Linux Programmer's Manual                    TCP(7)

NAME
       tcp - TCP protocol
.....
       TCP_NODELAY
              If set, disable the Nagle algorithm.  This means  that  segments
              are  always  sent  as  soon as possible, even if there is only a
              small amount of data.  When not  set,  data  is  buffered  until
              there  is  a sufficient amount to send out, thereby avoiding the
              frequent sending of small packets, which results  in  poor  uti‐
              lization of the network.  This option is overridden by TCP_CORK;
              however, setting this option forces an explicit flush of pending
              output, even if TCP_CORK is currently set.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition, it is possible to disable the Nagle algorithm on a system-wide basis.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;flow-control-and-window-management&quot;&gt;4. Flow Control and Window Management&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Every TCP segment (except those exchanged during connection establishment) includes a valid &lt;em&gt;Sequence Number&lt;/em&gt; field, an &lt;em&gt;ACK Number&lt;/em&gt; or &lt;em&gt;Acknowledgment&lt;/em&gt; field, and a &lt;em&gt;Window Size&lt;/em&gt; field (containing the window advertisement).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/tcp-ip/tcp-data-flow-and-window-management/flow-control-window-update.png&quot; alt=&quot;Flow Control and Window Management&quot; width=&quot;45%&quot; height=&quot;45%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 4. Each TCP connection is bidirectional. Data going in one direction causes the peer to respond with ACKs and window advertisements. The same is true for the reverse direction.&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When TCP-based applications are not busy doing other things, they are typically able to consume any and all data TCP has received and queued for them, leading to no change of the &lt;em&gt;Window Size&lt;/em&gt; field as the connection progresses.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On slow systems, or when the application has other things to accomplish, data may have arrived for the application, been acknowledged by TCP, and be sitting in a queue waiting for the application to read or &lt;em&gt;consume&lt;/em&gt; it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;When TCP starts to queue data in this way, the amount of space available to hold new incoming data decreases, and this change is reflected by a decreasing value of the &lt;em&gt;Window Size&lt;/em&gt; field.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Eventually, if the application does not read or otherwise consume the data at all, TCP must take some action to cause the sender to cease sending new data entirely, because there would be no place to put it on arrival (zero window).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;em&gt;Window Size&lt;/em&gt; field in each TCP header indicates the amount of empty space, in bytes, remaining in the receive buffer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The field is 16 bits in TCP, but with the &lt;em&gt;Window Scale&lt;/em&gt; option, values larger than 65,535 can be used.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The largest sequence number the sender of a segment is willing to accept in the reverse direction is equal to the sum of the &lt;em&gt;Acknowledgment Number&lt;/em&gt; and &lt;em&gt;Window Size&lt;/em&gt; fields in the TCP header (scaled appropriately).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;summary class=&quot;title&quot;&gt;&lt;em&gt;Show slow_client.c&lt;/em&gt;&lt;/summary&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/* slow_client.c */&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;stdbool.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;sys/types.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;sys/socket.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;arpa/inet.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define RCVBUFSIZE 4096
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* Create a TCP socket */&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* Create a reliable, stream socket using TCP */&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client_sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client_sock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PF_INET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SOCK_STREAM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPPROTO_TCP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;perror&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;socket() failed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/* Establish connection */&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serv_ip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serv_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6666&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sockaddr_in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serv_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;serv_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sin_family&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AF_INET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                     &lt;span class=&quot;cm&quot;&gt;/* Internet address family */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;serv_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sin_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inet_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serv_ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/* Server IP address*/&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;serv_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sin_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;htons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serv_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;              &lt;span class=&quot;cm&quot;&gt;/* Server port */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client_sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sockaddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serv_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serv_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;perror&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;connect() failed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/* Communicate */&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RCVBUFSIZE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recv_msg_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(;;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* Sleep 1s */&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;cm&quot;&gt;/* Receive mesage from server */&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recv_msg_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client_sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read_buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RCVBUFSIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;perror&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;recv() failed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;cm&quot;&gt;/*  EOF */&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recv_msg_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;fputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;memset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'\0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RCVBUFSIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/* Close the connection */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client_sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;zcat /usr/share/doc/linux-doc/Documentation/networking/ip-sysctl.rst.gz | nc &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--send-only&lt;/span&gt; 6666&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;cc slow_client.c &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; slow_client
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;./slow_client&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/tcp-ip/tcp-data-flow-and-window-management/win-update-wireshark.png&quot; alt=&quot;win update wireshark&quot; width=&quot;85%&quot; height=&quot;85%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;summary class=&quot;title&quot;&gt;&lt;em&gt;Show tcpdump trace&lt;/em&gt;&lt;/summary&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;tcpdump &lt;span class=&quot;nt&quot;&gt;-tttttn&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; lo port 6666 &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--number&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; /tmp/win.pcap
&lt;span class=&quot;go&quot;&gt;reading from file /tmp/win.pcap, link-type EN10MB (Ethernet), snapshot length 262144
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    1   00:00:00.000000 IP 127.0.0.1.34804 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;127.0.0.1.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;3397576437, win 65495, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 65495,sackOK,TS val 3010873789 ecr 0,nop,wscale 7], length 0
&lt;span class=&quot;gp&quot;&gt;    2   00:00:00.000010 IP 127.0.0.1.6666 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;127.0.0.1.34804: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;993859068, ack 3397576438, win 65483, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 65495,sackOK,TS val 3010873789 ecr 3010873789,nop,wscale 7], length 0
&lt;span class=&quot;gp&quot;&gt;    3   00:00:00.000018 IP 127.0.0.1.34804 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;127.0.0.1.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], ack 1, win 512, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3010873789 ecr 3010873789], length 0
&lt;span class=&quot;gp&quot;&gt;    4   00:00:00.000214 IP 127.0.0.1.6666 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;127.0.0.1.34804: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1:8193, ack 1, win 512, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3010873789 ecr 3010873789], length 8192
&lt;span class=&quot;gp&quot;&gt;    5   00:00:00.000219 IP 127.0.0.1.34804 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;127.0.0.1.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], ack 8193, win 475, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3010873789 ecr 3010873789], length 0
&lt;span class=&quot;gp&quot;&gt;    6   00:00:00.000230 IP 127.0.0.1.6666 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;127.0.0.1.34804: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;8193:16385, ack 1, win 512, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3010873789 ecr 3010873789], length 8192
&lt;span class=&quot;gp&quot;&gt;    7   00:00:00.000232 IP 127.0.0.1.34804 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;127.0.0.1.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], ack 16385, win 443, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3010873789 ecr 3010873789], length 0
&lt;span class=&quot;gp&quot;&gt;    8   00:00:00.000241 IP 127.0.0.1.6666 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;127.0.0.1.34804: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;16385:24577, ack 1, win 512, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3010873789 ecr 3010873789], length 8192
&lt;span class=&quot;gp&quot;&gt;    9   00:00:00.000242 IP 127.0.0.1.34804 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;127.0.0.1.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], ack 24577, win 411, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3010873789 ecr 3010873789], length 0
&lt;span class=&quot;gp&quot;&gt;   10   00:00:00.000249 IP 127.0.0.1.6666 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;127.0.0.1.34804: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;24577:32769, ack 1, win 512, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3010873789 ecr 3010873789], length 8192
&lt;span class=&quot;gp&quot;&gt;   11   00:00:00.000250 IP 127.0.0.1.34804 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;127.0.0.1.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], ack 32769, win 379, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3010873789 ecr 3010873789], length 0
&lt;span class=&quot;gp&quot;&gt;   12   00:00:00.000260 IP 127.0.0.1.6666 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;127.0.0.1.34804: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;32769:40961, ack 1, win 512, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3010873789 ecr 3010873789], length 8192
&lt;span class=&quot;gp&quot;&gt;   13   00:00:00.000399 IP 127.0.0.1.6666 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;127.0.0.1.34804: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;40961:73729, ack 1, win 512, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3010873789 ecr 3010873789], length 32768
&lt;span class=&quot;gp&quot;&gt;   14   00:00:00.019402 IP 127.0.0.1.6666 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;127.0.0.1.34804: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;40961:73729, ack 1, win 512, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3010873808 ecr 3010873789], length 32768
&lt;span class=&quot;gp&quot;&gt;   15   00:00:00.042870 IP 127.0.0.1.34804 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;127.0.0.1.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], ack 73729, win 59, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3010873832 ecr 3010873789,nop,nop,sack 1 &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;40961:73729&lt;span class=&quot;o&quot;&gt;}]&lt;/span&gt;, length 0
&lt;span class=&quot;gp&quot;&gt;   16   00:00:00.255179 IP 127.0.0.1.6666 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;127.0.0.1.34804: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;73729:81281, ack 1, win 512, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3010874044 ecr 3010873832], length 7552
&lt;span class=&quot;gp&quot;&gt;   17   00:00:00.255208 IP 127.0.0.1.34804 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;127.0.0.1.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], ack 81281, win 0, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3010874044 ecr 3010874044], length 0
&lt;span class=&quot;gp&quot;&gt;   18   00:00:00.467255 IP 127.0.0.1.6666 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;127.0.0.1.34804: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], ack 1, win 512, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3010874256 ecr 3010874044], length 0
&lt;span class=&quot;gp&quot;&gt;   19   00:00:00.467261 IP 127.0.0.1.34804 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;127.0.0.1.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], ack 81281, win 0, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3010874256 ecr 3010874044], length 0
&lt;span class=&quot;gp&quot;&gt;   20   00:00:00.911243 IP 127.0.0.1.6666 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;127.0.0.1.34804: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], ack 1, win 512, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3010874700 ecr 3010874256], length 0
&lt;span class=&quot;gp&quot;&gt;   21   00:00:01.774727 IP 127.0.0.1.6666 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;127.0.0.1.34804: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], ack 1, win 512, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3010875564 ecr 3010874256], length 0
&lt;span class=&quot;gp&quot;&gt;   22   00:00:01.774733 IP 127.0.0.1.34804 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;127.0.0.1.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], ack 81281, win 0, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3010875564 ecr 3010874044], length 0
&lt;span class=&quot;gp&quot;&gt;   23   00:00:03.471052 IP 127.0.0.1.6666 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;127.0.0.1.34804: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], ack 1, win 512, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3010877260 ecr 3010875564], length 0
&lt;span class=&quot;gp&quot;&gt;   24   00:00:03.471059 IP 127.0.0.1.34804 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;127.0.0.1.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], ack 81281, win 0, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3010877260 ecr 3010874044], length 0
&lt;span class=&quot;gp&quot;&gt;   25   00:00:06.862590 IP 127.0.0.1.6666 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;127.0.0.1.34804: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], ack 1, win 512, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3010880652 ecr 3010877260], length 0
&lt;span class=&quot;gp&quot;&gt;   26   00:00:06.862598 IP 127.0.0.1.34804 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;127.0.0.1.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], ack 81281, win 0, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3010880652 ecr 3010874044], length 0
&lt;span class=&quot;gp&quot;&gt;   27   00:00:13.775745 IP 127.0.0.1.6666 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;127.0.0.1.34804: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], ack 1, win 512, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3010887565 ecr 3010880652], length 0
&lt;span class=&quot;gp&quot;&gt;   28   00:00:13.775752 IP 127.0.0.1.34804 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;127.0.0.1.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], ack 81281, win 0, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3010887565 ecr 3010874044], length 0
&lt;span class=&quot;gp&quot;&gt;   29   00:00:20.017166 IP 127.0.0.1.34804 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;127.0.0.1.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], ack 81281, win 512, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3010893806 ecr 3010874044], length 0
&lt;span class=&quot;gp&quot;&gt;   30   00:00:20.017177 IP 127.0.0.1.6666 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;127.0.0.1.34804: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;FP.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;81281:91177, ack 1, win 512, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3010893806 ecr 3010893806], length 9896
&lt;span class=&quot;gp&quot;&gt;   31   00:00:20.058828 IP 127.0.0.1.34804 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;127.0.0.1.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], ack 91178, win 469, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3010893848 ecr 3010893806], length 0
&lt;span class=&quot;gp&quot;&gt;   32   00:00:24.020231 IP 127.0.0.1.34804 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;127.0.0.1.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;F.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1, ack 91178, win 512, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3010897809 ecr 3010893806], length 0
&lt;span class=&quot;gp&quot;&gt;   33   00:00:24.020242 IP 127.0.0.1.6666 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;127.0.0.1.34804: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], ack 2, win 512, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3010897809 ecr 3010897809], length 0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;sliding-windows&quot;&gt;4.1. Sliding Windows&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Each endpoint of a TCP connection is capable of sending and receiving data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The amount of data sent or received on a connection is maintained by a set of window structures.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For each active connection, each TCP endpoint maintains a &lt;em&gt;send window structure&lt;/em&gt; and a &lt;em&gt;receive window structure&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/tcp-ip/tcp-data-flow-and-window-management/sender-side-sliding-window-structure.png&quot; alt=&quot;Sender Sliding Window&quot; width=&quot;45%&quot; height=&quot;45%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 5. The TCP sender-side sliding window structure keeps track of which sequence numbers have already been acknowledged, which are in flight, and which are yet to be sent. The size of the offered window is controlled by the &lt;em&gt;Window Size&lt;/em&gt; field sent by the receiver in each ACK.&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;TCP maintains its window structures in terms of bytes (not packets).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The window advertised by the receiver is called the &lt;em&gt;offered window&lt;/em&gt; and covers bytes 4 through 9, meaning that the receiver has acknowledged all bytes up through and including number 3 and has advertised a window size of 6.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;em&gt;Window Size&lt;/em&gt; field contains a byte offset relative to the ACK number.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The sender computes its &lt;em&gt;usable window&lt;/em&gt;, which is how much data it can send immediately.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The usable window is the offered window minus the amount of data already sent but not yet acknowledged.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The variables SND.UNA and SND.WND are used to hold the values of the left window edge and offered window.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The variable SND.NXT holds the next sequence number to be sent, so the usable window is equal to (SND.UNA + SND.WND – SND.NXT).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Over time this sliding window moves to the right, as the receiver acknowledges data. The relative motion of the two ends of the window increases or decreases the size of the window.
Three terms are used to describe the movement of the right and left edges of the window:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;The window &lt;em&gt;closes&lt;/em&gt; as the left edge advances to the right. This happens when data that has been sent is acknowledged and the window size gets smaller.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The window &lt;em&gt;opens&lt;/em&gt; when the right edge moves to the right, allowing more data to be sent. This happens when the receiving process on the other end reads acknowledged data, freeing up space in its TCP receive buffer.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The window &lt;em&gt;shrinks&lt;/em&gt; when the right edge moves to the left. The Host Requirements RFC &lt;a href=&quot;#RFC1122&quot;&gt;[RFC1122]&lt;/a&gt; strongly discourages this, but TCP must be able to cope with it.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Because every TCP segment contains both an ACK number and a window advertisement, a TCP sender adjusts the window structure based on both values whenever an incoming segment arrives.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The left edge of the window cannot move to the left, because this edge is controlled by the ACK number received from the other end that is cumulative and never goes backward.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When the ACK number advances the window but the window size does not change (a common case), the window is said to advance or &lt;em&gt;slide&lt;/em&gt; forward.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the ACK number advances but the window advertisement grows smaller with other arriving ACKs, the left edge of the window moves closer to the right edge.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the left edge reaches the right edge, it is called a &lt;em&gt;zero window&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This stops the sender from transmitting any data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If this happens, the sending TCP begins to &lt;em&gt;probe&lt;/em&gt; the peer&amp;#8217;s window to look for an increase in the offered window.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The receiver also keeps a window structure, which is somewhat simpler than the sender&amp;#8217;s.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The receiver window structure keeps track of what data has already been received and ACKed, as well as the maximum sequence number it is willing to receive.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The TCP receiver depends on this structure to ensure the correctness of the data it receives.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In particular, it wishes to avoid storing duplicate bytes it has already received and ACKed, and it also wishes to avoid storing bytes that it should not have received (any bytes beyond the sender&amp;#8217;s right window edge).&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/tcp-ip/tcp-data-flow-and-window-management/receiver-side-sliding-window-structure.png&quot; alt=&quot;Receiver Sliding Window&quot; width=&quot;45%&quot; height=&quot;45%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 6. The TCP receiver-side sliding window structure helps the receiver know which sequence numbers to expect next. Sequence numbers in the receive window are stored when received. Those outside the window are discarded.&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This structure also contains a left and right window edge like the sender&amp;#8217;s window, but the in-window bytes (4–9 in this picture) need not be differentiated as they are in the sender&amp;#8217;s window structure.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For the receiver,&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;any bytes received with sequence numbers less than the left window edge (called RCV.NXT) are discarded as duplicates, and&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;any bytes received with sequence numbers beyond the right window edge (RCV.WND bytes beyond RCV.NXT) are discarded as out of scope.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bytes arriving with any sequence number in the receive window range are accepted.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Note that the ACK number generated at the receiver may be advanced only when segments fill in directly at the left window edge because of TCP&amp;#8217;s cumulative ACK structure.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;With selective ACKs, other in-window segments can be acknowledged using the TCP SACK option, but ultimately the ACK number itself is advanced only when data contiguous to the left window edge is received.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;zero-windows-and-the-tcp-persist-timer&quot;&gt;4.2. Zero Windows and the TCP Persist Timer&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When the receiver&amp;#8217;s advertised window goes to zero, the sender is effectively stopped from transmitting data until the window becomes nonzero.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When the receiver once again has space available, it provides a &lt;strong&gt;window update&lt;/strong&gt; to the sender to indicate that data is permitted to flow once again.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Because such updates do not generally contain data (they are a form of &lt;em&gt;pure ACK&lt;/em&gt;), they are not reliably delivered by TCP.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TCP must therefore handle the case where such window updates that would open the window are lost.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If an acknowledgment (containing a window update) is lost, we could end up with both sides waiting for the other:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the receiver waiting to receive data (because it provided the sender with a nonzero window and expects to see incoming data) and&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the sender waiting to receive the window update allowing it to send.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To prevent this form of deadlock from occurring, the sender uses a &lt;strong&gt;persist timer&lt;/strong&gt; to query the receiver periodically, to find out if the window size has increased. The persist timer triggers the transmission of &lt;strong&gt;window probes&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Window probes are segments that force the receiver to provide an ACK, which also necessarily contains a &lt;em&gt;Window Size&lt;/em&gt; field.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The Host Requirements RFC &lt;a href=&quot;#RFC1122&quot;&gt;[RFC1122]&lt;/a&gt; suggests that the first probe should happen after one RTO and subsequent problems should occur at exponentially spaced intervals.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Window probes contain a single byte of data and are therefore reliably delivered (retransmitted) by TCP if lost, thereby eliminating the potential deadlock condition caused by lost window updates.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The probes are sent whenever the TCP persist timer expires, and the byte included may or may not be accepted by the receiver, depending on how much buffer space it has available.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As with the TCP retransmission timer, the normal exponential backoff can be used when calculating the timeout for the persist timer. An important difference, however, is that a normal TCP never gives up sending window probes, whereas it may eventually give up trying to perform retransmissions.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/tcp-ip/tcp-data-flow-and-window-management/zero-window-probe.png&quot; alt=&quot;ZeroWindowProbe&quot; width=&quot;85%&quot; height=&quot;85%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;summary class=&quot;title&quot;&gt;&lt;em&gt;Show tcpdump trace&lt;/em&gt;&lt;/summary&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;00:00:00.000000 IP 192.168.91.128.55534 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;10.170.109.10.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1303159618, win 1460, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 1460,sackOK,TS val 1413095399 ecr 0,nop,wscale 7], length 0
&lt;span class=&quot;gp&quot;&gt;00:00:00.000827 IP 10.170.109.10.6666 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.55534: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;102306775, ack 1303159619, win 64240, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 1460], length 0
&lt;span class=&quot;gp&quot;&gt;00:00:00.000872 IP 192.168.91.128.55534 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;10.170.109.10.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], ack 1, win 1460, length 0
&lt;span class=&quot;gp&quot;&gt;00:00:00.001144 IP 10.170.109.10.6666 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.55534: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1:1461, ack 1, win 64240, length 1460
&lt;span class=&quot;gp&quot;&gt;00:00:00.001162 IP 192.168.91.128.55534 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;10.170.109.10.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], ack 1461, win 0, length 0
&lt;span class=&quot;gp&quot;&gt;00:00:00.001740 IP 10.170.109.10.6666 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.55534: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1461:1462, ack 1, win 64240, length 1
&lt;span class=&quot;gp&quot;&gt;00:00:00.001757 IP 192.168.91.128.55534 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;10.170.109.10.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], ack 1461, win 0, length 0
&lt;span class=&quot;gp&quot;&gt;00:00:00.202020 IP 10.170.109.10.6666 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.55534: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1461:1462, ack 1, win 64240, length 1
&lt;span class=&quot;gp&quot;&gt;00:00:00.202045 IP 192.168.91.128.55534 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;10.170.109.10.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], ack 1461, win 0, length 0
&lt;span class=&quot;gp&quot;&gt;00:00:00.606200 IP 10.170.109.10.6666 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.55534: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1461:1462, ack 1, win 64240, length 1
&lt;span class=&quot;gp&quot;&gt;00:00:00.606252 IP 192.168.91.128.55534 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;10.170.109.10.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], ack 1461, win 0, length 0
&lt;span class=&quot;gp&quot;&gt;00:00:01.417705 IP 10.170.109.10.6666 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.55534: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1461:1462, ack 1, win 64240, length 1
&lt;span class=&quot;gp&quot;&gt;00:00:01.417742 IP 192.168.91.128.55534 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;10.170.109.10.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], ack 1461, win 0, length 0
&lt;span class=&quot;gp&quot;&gt;00:00:03.017846 IP 10.170.109.10.6666 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.55534: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1461:1462, ack 1, win 64240, length 1
&lt;span class=&quot;gp&quot;&gt;00:00:03.017872 IP 192.168.91.128.55534 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;10.170.109.10.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], ack 1461, win 0, length 0
&lt;span class=&quot;gp&quot;&gt;00:00:06.225839 IP 10.170.109.10.6666 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.55534: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1461:1462, ack 1, win 64240, length 1
&lt;span class=&quot;gp&quot;&gt;00:00:06.225879 IP 192.168.91.128.55534 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;10.170.109.10.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], ack 1461, win 0, length 0
&lt;span class=&quot;gp&quot;&gt;00:00:12.638135 IP 10.170.109.10.6666 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.55534: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1461:1462, ack 1, win 64240, length 1
&lt;span class=&quot;gp&quot;&gt;00:00:12.638153 IP 192.168.91.128.55534 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;10.170.109.10.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], ack 1461, win 0, length 0
&lt;span class=&quot;gp&quot;&gt;00:00:20.002875 IP 192.168.91.128.55534 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;10.170.109.10.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], ack 1461, win 1460, length 0
&lt;span class=&quot;c&quot;&gt;.....&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;silly-window-syndrome-sws&quot;&gt;4.3. Silly Window Syndrome (SWS)&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Window-based flow control schemes, especially those that do not use fixed-size segments (such as TCP), can fall victim to a condition known as the &lt;strong&gt;silly window syndrome&lt;/strong&gt; (SWS).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;When it occurs, small data segments are exchanged across the connection instead of full-size segments &lt;a href=&quot;#RFC0813&quot;&gt;[RFC0813]&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This leads to undesirable inefficiency because each segment has relatively high overhead—a small number of data bytes relative to the number of bytes in the headers.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;SWS can be caused by either end of a TCP connection:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the receiver can advertise small windows (instead of waiting until a larger window can be advertised), and&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the sender can transmit small data segments (instead of waiting for additional data to send a larger segment).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Correct avoidance of silly window syndrome requires a TCP to implement rules specifically for this purpose, whether operating as a sender or a receiver. TCP never knows ahead of time how a peer TCP will behave. The following rules are applied:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;When operating as a receiver, small windows are not advertised.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The receive algorithm specified by &lt;a href=&quot;#RFC1122&quot;&gt;[RFC1122]&lt;/a&gt; is to not send a segment advertising a larger window than is currently being advertised (which can be 0) until the window can be increased by either one full-size segment (i.e., the receive MSS) or by one-half of the receiver&amp;#8217;s buffer space, whichever is smaller.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that there are two cases where this rule can come into play: when buffer space has become available because of an application consuming data from the network, and when TCP must respond to a window probe.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When sending, small segments are not sent and the Nagle algorithm governs when to send.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Senders avoid SWS by not transmitting a segment unless at least one of the following conditions is true:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist loweralpha&quot;&gt;
&lt;ol class=&quot;loweralpha&quot; type=&quot;a&quot;&gt;
&lt;li&gt;
&lt;p&gt;A full-size (send MSS bytes) segment can be sent.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Condition (a) is the most straightforward and directly avoids the high-overhead segment problem.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TCP can send at least one-half of the maximum-size window that the other end has ever advertised on this connection.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Condition (b) deals with hosts that always advertise tiny windows, perhaps smaller than the segment size.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TCP can send everything it has to send and either (i) an ACK is not currently expected (i.e., we have no outstanding unacknowledged data) or (ii) the Nagle algorithm is disabled for this connection.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Condition (c) prevents TCP from sending small segments when there is unacknowledged data waiting to be ACKed and the Nagle algorithm is enabled. If the sending application is doing small writes (e.g., smaller than the segment size), condition (c) avoids silly window syndrome.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;large-buffers-and-auto-tuning&quot;&gt;4.4. Large Buffers and Auto-Tuning&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Many TCP stacks now decouple the allocation of the receive buffer from the size specified by the application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In most cases, the size specified by the application is effectively ignored, and the operating system instead uses either a large fixed value or a dynamically calculated value.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With auto-tuning, the amount of data that can be outstanding in the connection (its bandwidth-delay product) is continuously estimated, and the advertised window is arranged to always be at least this large (provided enough buffer space remains to do so).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This has the advantage of allowing TCP to achieve its maximum available throughput rate (subject to the available network capacity) without having to allocate excessively large buffers at the sender or receiver ahead of time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Windows (Vista/7) , the receiver&amp;#8217;s buffer size is auto-sized by the operating system by default.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With Linux 2.4 and later, sender-side auto-tuning is supported. With version 2.6.7 and later, both receiver- and sender-side auto-tuning is supported. However, auto-tuning is subject to limits placed on the buffer sizes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following Linux &lt;code&gt;sysctl&lt;/code&gt; variables control the sender and receiver maximum buffer sizes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The values after the equal sign are the default values (which may vary depending on the particular Linux distribution), which should be increased if the system is to be used in high bandwidth-delay-product environments:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;ini&quot;&gt;&lt;span class=&quot;py&quot;&gt;net.core.rmem_default&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;212992&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;net.core.wmem_default&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;212992&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;net.core.rmem_max&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;212992&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;net.core.wmem_max&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;212992&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In addition, the auto-tuning parameters are given by the following variables:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;ini&quot;&gt;&lt;span class=&quot;py&quot;&gt;net.ipv4.tcp_rmem&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;4096	131072	6291456&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;net.ipv4.tcp_wmem&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;4096	16384	4194304&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Each of these variables contains three values: the minimum, default, and maximum buffer size used by auto-tuning.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;tcpdump &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;dst port 6666 and tcp[14:2] &amp;gt; 0&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;19:00:52.774633 IP 192.168.91.128.56256 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;10.170.109.10.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;4259244136, win 2920, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 1460,sackOK,TS val 1089797899 ecr 0,nop,wscale 7], length 0
&lt;span class=&quot;gp&quot;&gt;19:00:52.775403 IP 192.168.91.128.56256 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;10.170.109.10.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], ack 1713968064, win 2920, length 0
&lt;span class=&quot;gp&quot;&gt;19:00:52.911851 IP 192.168.91.128.56256 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;10.170.109.10.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], ack 2921, win 1460, length 0
&lt;span class=&quot;gp&quot;&gt;19:00:54.776998 IP 192.168.91.128.56256 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;10.170.109.10.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], ack 4381, win 2920, length 0
&lt;span class=&quot;gp&quot;&gt;19:00:54.777424 IP 192.168.91.128.56256 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;10.170.109.10.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], ack 7301, win 1460, length 0
&lt;span class=&quot;gp&quot;&gt;19:00:56.777414 IP 192.168.91.128.56256 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;10.170.109.10.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], ack 8761, win 2920, length 0
&lt;span class=&quot;gp&quot;&gt;19:00:56.777741 IP 192.168.91.128.56256 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;10.170.109.10.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], ack 11681, win 8760, length 0
&lt;span class=&quot;gp&quot;&gt;19:00:56.778085 IP 192.168.91.128.56256 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;10.170.109.10.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], ack 20441, win 26280, length 0
&lt;span class=&quot;gp&quot;&gt;19:00:56.778334 IP 192.168.91.128.56256 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;10.170.109.10.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], ack 46721, win 65535, length 0
&lt;span class=&quot;c&quot;&gt;.....&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;urgent-mechanism&quot;&gt;5. Urgent Mechanism&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An application is able to mark data as urgent by specifying a special option to the Berkeley sockets API (MSG_OOB) when it performs a write operation, although the use of urgent data is no longer recommended [RFC6093].&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist bibliography&quot;&gt;
&lt;ul class=&quot;bibliography&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;TCPIPV1&quot;&gt;&lt;/a&gt;[TCPIPV1] Kevin Fall, W. Stevens &lt;em&gt;TCP/IP Illustrated: The Protocols, Volume 1&lt;/em&gt;. 2nd edition, Addison-Wesley Professional, 2011&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;RFC0813&quot;&gt;&lt;/a&gt;[RFC0813] D. Clark, &lt;em&gt;Window and Acknowledgment Strategy in TCP&lt;/em&gt;, Internet RFC 0813, July 1982.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;RFC0896&quot;&gt;&lt;/a&gt;[RFC0896] J. Nagle, &lt;em&gt;Congestion Control in IP/TCP Internetworks&lt;/em&gt;, Internet RFC 0896, Jan. 1984. See &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc896&quot; class=&quot;bare&quot;&gt;https://www.rfc-editor.org/rfc/rfc896&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;RFC1112&quot;&gt;&lt;/a&gt;[RFC1112] S. E. Deering, &lt;em&gt;Host Extensions for IP Multicasting&lt;/em&gt;, Internet RFC 1112/STD 0005, Aug. 1989.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;RHELDELACK&quot;&gt;&lt;/a&gt;[RHELDELACK] &lt;em&gt;Reducing the TCP Delayed ACK Timeout&lt;/em&gt; [online]. &lt;a href=&quot;https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux_for_real_time/7/html/tuning_guide/reducing_the_tcp_delayed_ack_timeout&quot; class=&quot;bare&quot;&gt;https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux_for_real_time/7/html/tuning_guide/reducing_the_tcp_delayed_ack_timeout&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;WTCP&quot;&gt;&lt;/a&gt;[WTCP] &lt;a href=&quot;https://en.wikipedia.org/wiki/Transmission_Control_Protocol&quot; class=&quot;bare&quot;&gt;https://en.wikipedia.org/wiki/Transmission_Control_Protocol&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;WSCALE&quot;&gt;&lt;/a&gt;[WSCALE] &lt;a href=&quot;https://en.wikipedia.org/wiki/TCP_window_scale_option&quot; class=&quot;bare&quot;&gt;https://en.wikipedia.org/wiki/TCP_window_scale_option&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><category term="networking" /><category term="networking" /><category term="tcp" /></entry><entry><title type="html">TCP/IP: TCP Timeout and Retransmission</title><link href="https://blog.codefarm.me/2023/01/17/tcp-ip-tcp-timeout-and-retransmission/" rel="alternate" type="text/html" title="TCP/IP: TCP Timeout and Retransmission" /><published>2023-01-17T14:45:16+08:00</published><updated>2023-01-17T14:45:16+08:00</updated><id>https://blog.codefarm.me/2023/01/17/tcp-ip-tcp-timeout-and-retransmission</id><content type="html" xml:base="https://blog.codefarm.me/2023/01/17/tcp-ip-tcp-timeout-and-retransmission/">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To decide what data it needs to resend, TCP depends on a continuous flow of acknowledgments from receiver to sender.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When data segments or acknowledgments are lost, TCP initiates a &lt;strong&gt;retransmission&lt;/strong&gt; of the data that has not been acknowledged.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;TCP has two separate mechanisms for accomplishing retransmission, one based on time and one based on the structure of the acknowledgments.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;TCP sets a timer when it sends data, and if the data is not acknowledged when the timer expires, a &lt;strong&gt;&lt;em&gt;timeout&lt;/em&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;em&gt;timer-based retransmission&lt;/em&gt;&lt;/strong&gt; of data occurs.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The timeout occurs after an interval called the &lt;strong&gt;&lt;em&gt;retransmission timeout&lt;/em&gt;&lt;/strong&gt; (RTO).&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It has another way of initiating a retransmission called &lt;strong&gt;&lt;em&gt;fast retransmission&lt;/em&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;em&gt;fast retransmit&lt;/em&gt;&lt;/strong&gt;, which usually happens without any delay.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Fast retransmit is based on inferring losses by noticing&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;when TCP&amp;#8217;s cumulative acknowledgment fails to advance in the (duplicate) ACKs received over time, or&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;when ACKs carrying selective acknowledgment information (SACKs) indicate that out-of-order segments are present at the receiver.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#simple-timeout-and-retransmission-time-based-example&quot;&gt;1. Simple Timeout and Retransmission (Time-based) Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#setting-the-retransmission-timeout-rto&quot;&gt;2. Setting the Retransmission Timeout (RTO)&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#the-classic-method&quot;&gt;2.1. The Classic Method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#the-standard-method&quot;&gt;2.2. The Standard Method&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#timer-based-retransmission&quot;&gt;3. Timer-Based Retransmission&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#fast-retransmit&quot;&gt;4. Fast Retransmit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#retransmission-with-selective-acknowledgments&quot;&gt;5. Retransmission with Selective Acknowledgments&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#sack-receiver-behavior&quot;&gt;5.1. SACK Receiver Behavior&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sack-sender-behavior&quot;&gt;5.2. SACK Sender Behavior&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#example&quot;&gt;5.3. Example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#spurious-timeouts-and-retransmissions&quot;&gt;6. Spurious Timeouts and Retransmissions&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#duplicate-sack-dsack-extension&quot;&gt;6.1. Duplicate SACK (DSACK) Extension&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#the-eifel-detection-algorithm&quot;&gt;6.2. The Eifel Detection Algorithm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#forward-rto-recovery-f-rto&quot;&gt;6.3. Forward-RTO Recovery (F-RTO)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#the-eifel-response-algorithm&quot;&gt;6.4. The Eifel Response Algorithm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#packet-reordering-and-duplication&quot;&gt;7. Packet Reordering and Duplication&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#reordering&quot;&gt;7.1. Reordering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#duplication&quot;&gt;7.2. Duplication&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#destination-metrics&quot;&gt;8. Destination Metrics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#repacketization&quot;&gt;9. Repacketization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#dropping-packets-in-linux-using-tc-and-iptables&quot;&gt;Appendix A: Dropping Packets in Linux using tc and iptables&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#dropping-packets-with-tc&quot;&gt;A.1. Dropping Packets with tc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#dropping-packets-with-iptables&quot;&gt;A.2. Dropping Packets with iptables&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#references&quot;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;simple-timeout-and-retransmission-time-based-example&quot;&gt;1. Simple Timeout and Retransmission (Time-based) Example&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We will establish a connection, send some data to verify that everything is OK, isolate one end of the connection, send some more data, and watch what TCP does.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-1:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;nc &lt;span class=&quot;nt&quot;&gt;-kl&lt;/span&gt; 6666&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;telnet node-1 6666
&lt;span class=&quot;go&quot;&gt;Trying 192.168.91.135...
Connected to node-1.localdomain.
Escape character is '^]'.
hello
Connection closed by foreign host.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-1:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ip &lt;span class=&quot;nb&quot;&gt;link set &lt;/span&gt;ens32 down&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;ss &lt;span class=&quot;nt&quot;&gt;-nta&lt;/span&gt; dst &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;:6666
&lt;span class=&quot;go&quot;&gt;State     Recv-Q     Send-Q            Local Address:Port              Peer Address:Port     Process
ESTAB     0          7                192.168.91.128:36824           192.168.91.137:6666
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;netstat &lt;span class=&quot;nt&quot;&gt;-nta4&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Active Internet connections (servers and established)
Proto Recv-Q Send-Q Local Address           Foreign Address         State
tcp        0      7 192.168.91.128:36824    192.168.91.137:6666     ESTABLISHED&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;tcpdump &lt;span class=&quot;nt&quot;&gt;-tttttSnv&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; any icmp or port 6666
&lt;span class=&quot;go&quot;&gt; 00:00:00.000000 ens32 Out IP (tos 0x10, ttl 64, id 26731, offset 0, flags [DF], proto TCP (6), length 60)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.50688 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x3889 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0xc8d2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1476981540, win 64240, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 1460,sackOK,TS val 3360184417 ecr 0,nop,wscale 7], length 0
&lt;span class=&quot;go&quot;&gt; 00:00:00.000396 ens32 In  IP (tos 0x0, ttl 64, id 0, offset 0, flags [DF], proto TCP (6), length 60)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.137.6666 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.50688: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x34e8 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;correct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;2021627494, ack 1476981541, win 65160, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 1460,sackOK,TS val 1682840845 ecr 3360184417,nop,wscale 7], length 0
&lt;span class=&quot;go&quot;&gt; 00:00:00.000462 ens32 Out IP (tos 0x10, ttl 64, id 26732, offset 0, flags [DF], proto TCP (6), length 52)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.50688 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x3881 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0x6046&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, ack 2021627495, win 502, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3360184418 ecr 1682840845], length 0
&lt;span class=&quot;go&quot;&gt; 00:00:33.520679 ens32 Out IP (tos 0x10, ttl 64, id 26733, offset 0, flags [DF], proto TCP (6), length 59)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.50688 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x3888 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0x8f67&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1476981541:1476981548, ack 2021627495, win 502, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3360217938 ecr 1682840845], length 7
&lt;span class=&quot;c&quot;&gt;...
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt; 00:00:40.385007 ens32 Out IP (tos 0x10, ttl 64, id 26739, offset 0, flags [DF], proto TCP (6), length 59)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.50688 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x3888 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0x7497&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1476981541:1476981548, ack 2021627495, win 502, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3360224802 ecr 1682840845], length 7
&lt;span class=&quot;go&quot;&gt; 00:00:50.113908 lo    In  IP (tos 0xd0, ttl 64, id 25299, offset 0, flags [none], proto ICMP (1), length 87)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128: ICMP host 192.168.91.137 unreachable, length 67
&lt;span class=&quot;go&quot;&gt;	IP (tos 0x10, ttl 64, id 26740, offset 0, flags [DF], proto TCP (6), length 59)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.50688 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x3888 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0x5a96&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1476981541:1476981548, ack 2021627495, win 502, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3360231459 ecr 1682840845], length 7
&lt;span class=&quot;c&quot;&gt;...
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt; 00:15:55.330154 lo    In  IP (tos 0xd0, ttl 64, id 7913, offset 0, flags [none], proto ICMP (1), length 87)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128: ICMP host 192.168.91.137 unreachable, length 67
&lt;span class=&quot;go&quot;&gt;	IP (tos 0x10, ttl 64, id 26876, offset 0, flags [DF], proto TCP (6), length 59)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.50688 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x3888 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0x8a89&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1476981541:1476981548, ack 2021627495, win 502, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3361136674 ecr 1682840845], length 7&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Logically, TCP has two thresholds &lt;code&gt;R1&lt;/code&gt; and &lt;code&gt;R2&lt;/code&gt; to determine how persistently it will attempt to resend the same segment &lt;a href=&quot;#RFC1122&quot;&gt;[RFC1122]&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Threshold &lt;code&gt;R1&lt;/code&gt; indicates the number of tries TCP will make (or the amount of time it will wait) to resend a segment before passing &lt;em&gt;negative advice&lt;/em&gt; to the IP layer (e.g., causing it to reevaluate the IP route it is using).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Threshold &lt;code&gt;R2&lt;/code&gt; (larger than &lt;code&gt;R1&lt;/code&gt;) dictates the point at which TCP should abandon the connection.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;R1&lt;/code&gt; and &lt;code&gt;R2&lt;/code&gt; might be measured in time units or as a count of retransmissions.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The value of &lt;code&gt;R1&lt;/code&gt; SHOULD correspond to at least 3 retransmissions, at the current RTO.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The value of &lt;code&gt;R2&lt;/code&gt; SHOULD correspond to at least 100 seconds.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;However, the values of &lt;code&gt;R1&lt;/code&gt; and &lt;code&gt;R2&lt;/code&gt; may be different for SYN and data segments.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In particular, &lt;code&gt;R2&lt;/code&gt; for a SYN segment MUST be set large enough to provide retransmission of the segment for at least 3 minutes.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Linux, the &lt;code&gt;R1&lt;/code&gt; and &lt;code&gt;R2&lt;/code&gt; values for regular data segments are available to be changed by applications or can be changed using the system-wide configuration variables &lt;code&gt;net.ipv4.tcp_retries1&lt;/code&gt; and &lt;code&gt;net.ipv4.tcp_retries2&lt;/code&gt;, respectively.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;These are measured in the number of retransmissions, and not in units of time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The default value for &lt;code&gt;net.ipv4.tcp_retries2&lt;/code&gt; is 15, which corresponds roughly to 13–30 minutes, depending on the connection&amp;#8217;s RTO.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The default value for &lt;code&gt;net.ipv4.tcp_retries1&lt;/code&gt; is 3.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For SYN segments, &lt;code&gt;net.ipv4.tcp_syn_retries&lt;/code&gt; and &lt;code&gt;net.ipv4.tcp_synack_retries&lt;/code&gt; bounds the number of retransmissions of SYN segments; their default value is 5 (roughly 180s).&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-1:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;iptables &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; INPUT &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; 192.168.91.128/32 &lt;span class=&quot;nt&quot;&gt;--dport&lt;/span&gt; 6666 &lt;span class=&quot;nt&quot;&gt;--syn&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; DROP&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;sysctl net.ipv4.tcp_syn_retries
&lt;span class=&quot;go&quot;&gt;net.ipv4.tcp_syn_retries = 6
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;time &lt;/span&gt;telnet 192.168.91.137 6666
&lt;span class=&quot;go&quot;&gt;Trying 192.168.91.137...
telnet: Unable to connect to remote host: Connection timed out

real	2m9.448s
user	0m0.003s
sys	0m0.001s&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt; 00:00:00.000000 IP 192.168.91.128.42966 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;2460858944, win 1460, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 1460,sackOK,TS val 991112255 ecr 0,nop,wscale 7], length 0
&lt;span class=&quot;gp&quot;&gt; 00:00:01.030071 IP 192.168.91.128.42966 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;2460858944, win 1460, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 1460,sackOK,TS val 991113285 ecr 0,nop,wscale 7], length 0
&lt;span class=&quot;gp&quot;&gt; 00:00:03.045544 IP 192.168.91.128.42966 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;2460858944, win 1460, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 1460,sackOK,TS val 991115301 ecr 0,nop,wscale 7], length 0
&lt;span class=&quot;gp&quot;&gt; 00:00:07.077396 IP 192.168.91.128.42966 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;2460858944, win 1460, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 1460,sackOK,TS val 991119332 ecr 0,nop,wscale 7], length 0
&lt;span class=&quot;gp&quot;&gt; 00:00:15.269455 IP 192.168.91.128.42966 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;2460858944, win 1460, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 1460,sackOK,TS val 991127524 ecr 0,nop,wscale 7], length 0
&lt;span class=&quot;gp&quot;&gt; 00:00:31.397938 IP 192.168.91.128.42966 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;2460858944, win 1460, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 1460,sackOK,TS val 991143653 ecr 0,nop,wscale 7], length 0
&lt;span class=&quot;gp&quot;&gt; 00:01:03.909769 IP 192.168.91.128.42966 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;2460858944, win 1460, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 1460,sackOK,TS val 991176165 ecr 0,nop,wscale 7], length 0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;setting-the-retransmission-timeout-rto&quot;&gt;2. Setting the Retransmission Timeout (RTO)&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Fundamental to TCP&amp;#8217;s timeout and retransmission procedures is how to set the RTO based upon measurement of the RTT experienced on a given connection.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If TCP retransmits a segment earlier than the RTT, it may be injecting duplicate traffic into the network unnecessarily.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Conversely, if it delays sending until much longer than one RTT, the overall network utilization (and single-connection throughput) drops when traffic is lost.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Knowing the RTT is made more complicated because it can change over time, as routes and network usage vary.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Because TCP sends acknowledgments when it receives data, it is possible to send a byte with a particular sequence number and measure the time (called an &lt;em&gt;RTT sample&lt;/em&gt;) required to receive an acknowledgment that covers that sequence number.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The challenge for TCP is to establish a good estimate for the range of RTT values given a set of samples that vary over time and set the RTO based on these values.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The RTT is estimated for each TCP connection separately, and one retransmission timer is pending whenever any data is in flight that consumes a sequence number (including SYN and FIN segments).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;the-classic-method&quot;&gt;2.1. The Classic Method&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The original TCP specification [RFC0793] had TCP update a &lt;em&gt;smoothed RTT&lt;/em&gt; estimator (called &lt;em&gt;SRTT&lt;/em&gt;) using the following formula:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;em&gt;SRTT&lt;/em&gt; ← α(&lt;em&gt;SRTT&lt;/em&gt;) + (1 − α) &lt;em&gt;RTT&lt;sub&gt;s&lt;/sub&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Here, &lt;em&gt;SRTT&lt;/em&gt; is updated based on both its existing value and a new sample, &lt;em&gt;RTT&lt;sub&gt;s&lt;/sub&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The constant &lt;em&gt;α&lt;/em&gt; is a smoothing or scale factor with a recommended value between 0.8 and 0.9.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;SRTT&lt;/em&gt; is updated every time a new measurement is made.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;With the original recommended value for &lt;em&gt;α&lt;/em&gt;, it is clear that 80% to 90% of each new estimate is from the previous estimate and 10% to 20% is from the new measurement.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This type of average is also known as an &lt;em&gt;exponentially weighted moving average&lt;/em&gt; (EWMA) or &lt;em&gt;low-pass&lt;/em&gt; filter.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is convenient for implementation reasons because it requires only one previous value of &lt;em&gt;SRTT&lt;/em&gt; to be stored in order to keep the running estimate.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Given the estimator &lt;em&gt;SRTT&lt;/em&gt;, which changes as the RTT changes, [RFC0793] recommended that the RTO be set to the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;RTO = min(&lt;em&gt;ubound&lt;/em&gt;, max(&lt;em&gt;lbound&lt;/em&gt;,(&lt;em&gt;SRTT&lt;/em&gt;)β))&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;where &lt;em&gt;β&lt;/em&gt; is a delay variance factor with a recommended value of 1.3 to 2.0,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;ubound&lt;/em&gt; is an upper bound (suggested to be, e.g., 1 minute),&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;and &lt;em&gt;lbound&lt;/em&gt; is a lower bound (suggested to be, e.g., 1s) on the RTO.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We shall call this assignment procedure &lt;em&gt;the classic method&lt;/em&gt;. It generally results in the RTO being set either to 1s, or to about twice &lt;em&gt;SRTT&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For relatively stable distributions of the RTT, this was adequate. However, when TCP was run over networks with highly variable &lt;em&gt;RTT&lt;sub&gt;s&lt;/sub&gt;&lt;/em&gt; (e.g., early packet radio networks in this case), it did not perform so well.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;the-standard-method&quot;&gt;2.2. The Standard Method&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In &lt;a href=&quot;#J88&quot;&gt;[J88]&lt;/a&gt;, Jacobson detailed problems with the classic method further—basically, that the timer specified by [RFC0793] cannot keep up with wide &lt;em&gt;fluctuations in the RTT&lt;/em&gt; (and in particular, it causes unnecessary retransmissions when the real RTT is much larger than expected).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To address this problem, the method used to assign the RTO was enhanced to accommodate a larger variability in the RTT.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This is accomplished by keeping track of an estimate of the &lt;em&gt;variability&lt;/em&gt; in the RTT measurements in addition to the estimate of its &lt;em&gt;average&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Setting the RTO based on both a mean and a variability estimator provides a better timeout response to wide fluctuations in the roundtrip times than just calculating the RTO as a constant multiple of the mean.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If we think of the RTT measurements made by TCP as samples of a statistical process, estimating both the mean and variance (or standard deviation) helps to make better predictions about the possible future values the process may take on.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A good prediction for the range of possible values for the RTT helps TCP determine an RTO that is neither too large nor too small in most cases.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following equations that are applied to each RTT measurement &lt;em&gt;M&lt;/em&gt; (called &lt;em&gt;RTT&lt;sub&gt;s&lt;/sub&gt;&lt;/em&gt; earlier):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;em&gt;srtt&lt;/em&gt; ← (1 - g)(&lt;em&gt;srtt&lt;/em&gt;) + (g)&lt;em&gt;M&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;em&gt;rttvar&lt;/em&gt; ← (1 - h)(&lt;em&gt;rttvar&lt;/em&gt;) + (h)(|&lt;em&gt;M&lt;/em&gt; - &lt;em&gt;srtt&lt;/em&gt;|)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;RTO = &lt;em&gt;srtt&lt;/em&gt; + 4(&lt;em&gt;rttvar&lt;/em&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here, the value &lt;em&gt;srtt&lt;/em&gt; effectively replaces the earlier value of &lt;em&gt;SRTT&lt;/em&gt;, and the value &lt;em&gt;rttvar&lt;/em&gt;, which becomes an EWMA of the &lt;em&gt;mean deviation&lt;/em&gt;, is used instead of &lt;em&gt;β&lt;/em&gt; to help determine the RTO.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is the basis for the way many TCP implementations compute their RTOs to this day, and because of its adoption as the basis for &lt;a href=&quot;#RFC6298&quot;&gt;[RFC6298]&lt;/a&gt; we shall call it &lt;em&gt;the standard method&lt;/em&gt;, although there are slight refinements in &lt;a href=&quot;#RFC6298&quot;&gt;[RFC6298]&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;timer-based-retransmission&quot;&gt;3. Timer-Based Retransmission&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once a sending TCP has established its RTO based upon measurements of the time-varying values of effective RTT, whenever it sends a segment it ensures that a retransmission timer is set appropriately.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;When setting a retransmission timer, the sequence number of the so-called timed segment is recorded, and if an ACK is received in time, the retransmission timer is canceled.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The next time the sender emits a packet with data in it, a new retransmission timer is set, the old one is canceled, and the new sequence number is recorded.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The sending TCP therefore continuously sets and cancels one retransmission timer per connection; if no data is ever lost, no retransmission timer ever expires.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When TCP fails to receive an ACK for a segment it has timed on a connection within the RTO, it performs a timer-based retransmission.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;TCP considers a timer-based retransmission as a fairly major event; it reacts very cautiously when it happens by quickly reducing the rate at which it sends data into the network. It does this in two ways.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The first way is to reduce its sending window size based on congestion control procedures.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The other way is to keep increasing a multiplicative backoff factor applied to the RTO each time a retransmitted segment is again retransmitted.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In particular, the RTO value is (temporarily) multiplied by the value &lt;code&gt;γ&lt;/code&gt; to form the backed-off timeout when multiple retransmissions of the same segment occur:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;text&quot;&gt;RTO = γRTO&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In ordinary circumstances, &lt;code&gt;γ&lt;/code&gt; has the value 1.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On subsequent retransmissions, &lt;code&gt;γ&lt;/code&gt; is doubled: 2, 4, 8, and so forth.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is typically a maximum backoff factor that &lt;code&gt;γ&lt;/code&gt; is not allowed to exceed (Linux ensures that the used RTO never exceeds the value &lt;code&gt;TCP_RTO_MAX&lt;/code&gt;, which defaults to 120s).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;x@node-0:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;uname&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;uname&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt;
Linux node-0 5.10.0-19-amd64 &lt;span class=&quot;c&quot;&gt;#1 SMP Debian 5.10.149-2 (2022-10-21) x86_64 GNU/Linux&lt;/span&gt;
5.10.0-19-amd64
x@node-0:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;#define HZ&quot;&lt;/span&gt; /usr/include/asm-generic/param.h
&lt;span class=&quot;c&quot;&gt;#define HZ 100&lt;/span&gt;
x@node-0:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;#define TCP_RTO_&quot;&lt;/span&gt; /usr/src/linux-headers-5.10.0-19-common/include/net/tcp.h
&lt;span class=&quot;c&quot;&gt;#define TCP_RTO_MAX	((unsigned)(120*HZ))&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#define TCP_RTO_MIN	((unsigned)(HZ/5))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Once an acceptable ACK is received, &lt;code&gt;γ&lt;/code&gt; is reset to 1.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;ss &lt;span class=&quot;nt&quot;&gt;-itn&lt;/span&gt; dst &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;:6666&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sleep &lt;/span&gt;1&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;State Recv-Q Send-Q  Local Address:Port    Peer Address:Port
ESTAB 0      0      192.168.91.128:33176 192.168.91.135:6666
	 cubic wscale:7,7 rto:204 rtt:1.86/0.93 cwnd:10
State Recv-Q Send-Q  Local Address:Port    Peer Address:Port
ESTAB 0      7      192.168.91.128:33176 192.168.91.135:6666
	 cubic wscale:7,7 rto:204 rtt:1.86/0.93 cwnd:10
State Recv-Q Send-Q  Local Address:Port    Peer Address:Port
ESTAB 0      7      192.168.91.128:33176 192.168.91.135:6666
	 cubic wscale:7,7 rto:816 backoff:2 rtt:1.86/0.93 cwnd:1
State Recv-Q Send-Q  Local Address:Port    Peer Address:Port
ESTAB 0      7      192.168.91.128:33176 192.168.91.135:6666
	 cubic wscale:7,7 rto:1632 backoff:3 rtt:1.86/0.93 cwnd:1
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;...
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;State Recv-Q Send-Q  Local Address:Port    Peer Address:Port
ESTAB 0      7      192.168.91.128:33176 192.168.91.135:6666
	 cubic wscale:7,7 rto:6528 backoff:5 rtt:1.86/0.93 cwnd:1
State Recv-Q Send-Q  Local Address:Port    Peer Address:Port
ESTAB 0      0      192.168.91.128:33176 192.168.91.135:6666
	 cubic wscale:7,7 rto:204 rtt:1.752/0.912 cwnd:2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fast-retransmit&quot;&gt;4. Fast Retransmit&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Fast retransmit&lt;/strong&gt; &lt;a href=&quot;#RFC5681&quot;&gt;[RFC5681]&lt;/a&gt; is a TCP procedure that can induce a packet retransmission based on feedback from the receiver instead of requiring a retransmission timer to expire.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;TCP generates an immediate acknowledgment (a &lt;em&gt;duplicate ACK&lt;/em&gt;) when an &lt;strong&gt;&lt;em&gt;out-of-order segment&lt;/em&gt;&lt;/strong&gt; is received, and that the loss of a segment implies out-of-order arrivals at the receiver when subsequent data arrives.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;When this happens, a &lt;strong&gt;&lt;em&gt;hole&lt;/em&gt;&lt;/strong&gt; is created at the receiver.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The sender&amp;#8217;s job then becomes filling the receiver&amp;#8217;s holes as quickly and efficiently as possible.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The duplicate ACKs sent immediately when out-of-order data arrives are not delayed.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The reason is to let the sender know that a segment was received out of order, and to indicate what sequence number is expected (i.e., where the hole is).&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When SACK is used, these duplicate ACKs typically contain SACK blocks as well, which can provide information about more than one hole.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A duplicate ACK (with or without SACK blocks) arriving at a sender is a potential indicator that a packet sent earlier has been lost.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It can also appear when there is &lt;strong&gt;&lt;em&gt;packet reordering&lt;/em&gt;&lt;/strong&gt; in the network—if a receiver receives a packet for a sequence number beyond the one it is expecting next, the expected packet could be either missing or merely delayed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TCP waits for a small number of duplicate ACKs (called the &lt;em&gt;duplicate ACK threshold&lt;/em&gt; or &lt;em&gt;dupthresh&lt;/em&gt;) to be received before concluding that a packet has been lost and initiating a fast retransmit.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Traditionally, &lt;em&gt;dupthresh&lt;/em&gt; has been a constant (with value 3 &lt;a href=&quot;#RFC5681&quot;&gt;[RFC5681]&lt;/a&gt;), but some nonstandard implementations (including Linux) alter this value based on the current measured level of reordering.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A TCP sender observing at least &lt;em&gt;dupthresh&lt;/em&gt; duplicate ACKs retransmits one or more packets that appear to be missing without waiting for a retransmission timer to expire. It may also send additional data that has not yet been sent.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Packet loss inferred by the presence of duplicate ACKs is assumed to be related to &lt;em&gt;network congestion&lt;/em&gt;, and &lt;em&gt;congestion control&lt;/em&gt; procedures are invoked along with &lt;em&gt;fast retransmit&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Without SACK, no more than one segment is typically retransmitted until an acceptable ACK is received.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;With SACK, ACKs contain additional information allowing the sender to fill more than one hole in the receiver per RTT.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-1:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;sysctl net.ipv4.tcp_sack&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 &lt;span class=&quot;c&quot;&gt;# Disable select acknowledgments (SACKS).&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;net.ipv4.tcp_sack = 0
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;x@node-1:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;iptables &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; INPUT &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;--dport&lt;/span&gt; 6666 &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; statistic &lt;span class=&quot;nt&quot;&gt;--mode&lt;/span&gt; nth &lt;span class=&quot;nt&quot;&gt;--every&lt;/span&gt; 2 &lt;span class=&quot;nt&quot;&gt;--packet&lt;/span&gt; 0 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; DROP
&lt;span class=&quot;gp&quot;&gt;x@node-1:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;iptables &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt; INPUT
&lt;span class=&quot;go&quot;&gt;Chain INPUT (policy ACCEPT)
target     prot opt source               destination
DROP       tcp  --  anywhere             anywhere             tcp dpt:6666 statistic mode nth every 2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ethtool &lt;span class=&quot;nt&quot;&gt;-K&lt;/span&gt; ens32 tso off
&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;sysctl net.ipv4.tcp_sack&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0
&lt;span class=&quot;go&quot;&gt;net.ipv4.tcp_sack = 0
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; 10000 /dev/random | nc &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; node-1 6666
&lt;span class=&quot;go&quot;&gt;Ncat: Version 7.80 ( https://nmap.org/ncat )
Ncat: Connected to 192.168.91.137:6666.
Ncat: 10000 bytes sent, 0 bytes received in 2.50 seconds.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/tcp-ip/tcp-timeout-and-retransmission/fast-retransmit-wireshark.png&quot; alt=&quot;fast retransmit wireshark&quot; width=&quot;100%&quot; height=&quot;100%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The packets 23 and 28 are window update ACKs with a duplicate sequence number (because no data is being carried) but contains a change to the TCP flow control window. The window changes from 65,160 bytes to 63,488 bytes.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thus, it is not counted toward the three-duplicate-ACK threshold required to initiate a fast retransmit.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Window updates merely provide a copy of the window advertisement.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The packets 14 and 15 are all duplicate ACKs for sequence number 1449.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The arrival of the second of these duplicate ACKs triggers the fast retransmit of segment 1449 by packets 16 and 17.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The retransmissions from packet 19 to 22 are somewhat different from the first two.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When the first two retransmissions takes place, the sending TCP notes the highest sequence number (called the &lt;strong&gt;recovery point&lt;/strong&gt;) it had sent just before it performed the retransmission (9641 + 360 = 10001).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;TCP is considered to be recovering from loss after a retransmission until it receives an ACK that matches or exceeds the sequence number of the recovery point.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this example, the ACKs at packet 18 are not for 10001, but instead for 5793.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This number is larger than the previous highest ACK value seen (1449), but not enough to meet or exceed the recovery point (10001).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This type of ACK is called a &lt;strong&gt;partial ACK&lt;/strong&gt; for this reason.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When partial ACKs arrive, the sending TCP immediately sends the segments that appears to be missing (5793 to 9641 in this case) and continues this way until the recovery point is matched or exceeded by an arriving ACK.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If permitted by congestion control procedures, it may also send new data it has not yet sent.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Because no SACKs are being used, the sender can learn of at most one receiver hole per round-trip time, indicated by the increase in the ACK number of returning packets, which can only occur once a retransmission filling the receiver’s lowest-numbered hole has been received and ACKed.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;summary class=&quot;title&quot;&gt;Show tcpdump trace&lt;/summary&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;table class=&quot;linenotable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;gp&quot;&gt; 00:00:00.000000 IP 192.168.91.128.58368 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;2395807434, win 64240, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 1460,nop,nop,TS val 3245551521 ecr 0,nop,wscale 7], length 0
&lt;span class=&quot;gp&quot;&gt; 00:00:01.013807 IP 192.168.91.128.58368 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;2395807434, win 64240, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 1460,nop,nop,TS val 3245552536 ecr 0,nop,wscale 7], length 0
&lt;span class=&quot;gp&quot;&gt; 00:00:01.014094 IP 192.168.91.137.6666 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.58368: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;3105090969, ack 2395807435, win 65160, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 1460,nop,nop,TS val 939993754 ecr 3245552536,nop,wscale 7], length 0
&lt;span class=&quot;gp&quot;&gt; 00:00:01.014138 IP 192.168.91.128.58368 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], ack 1, win 502, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3245552536 ecr 939993754], length 0
&lt;span class=&quot;gp&quot;&gt; 00:00:01.014253 IP 192.168.91.128.58368 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1:1449, ack 1, win 502, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3245552536 ecr 939993754], length 1448
&lt;span class=&quot;gp&quot;&gt; 00:00:01.014303 IP 192.168.91.128.58368 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1449:2897, ack 1, win 502, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3245552536 ecr 939993754], length 1448
&lt;span class=&quot;gp&quot;&gt; 00:00:01.014329 IP 192.168.91.128.58368 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;2897:4345, ack 1, win 502, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3245552536 ecr 939993754], length 1448
&lt;span class=&quot;gp&quot;&gt; 00:00:01.014330 IP 192.168.91.128.58368 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;4345:5793, ack 1, win 502, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3245552536 ecr 939993754], length 1448
&lt;span class=&quot;gp&quot;&gt; 00:00:01.014331 IP 192.168.91.128.58368 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;5793:7241, ack 1, win 502, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3245552536 ecr 939993754], length 1448
&lt;span class=&quot;gp&quot;&gt; 00:00:01.014367 IP 192.168.91.128.58368 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;7241:8193, ack 1, win 502, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3245552536 ecr 939993754], length 952
&lt;span class=&quot;gp&quot;&gt; 00:00:01.014392 IP 192.168.91.137.6666 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.58368: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], ack 1449, win 501, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 939993754 ecr 3245552536], length 0
&lt;span class=&quot;gp&quot;&gt; 00:00:01.014401 IP 192.168.91.128.58368 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;8193:9641, ack 1, win 502, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3245552536 ecr 939993754], length 1448
&lt;span class=&quot;gp&quot;&gt; 00:00:01.014419 IP 192.168.91.128.58368 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;FP.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;9641:10001, ack 1, win 502, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3245552536 ecr 939993754], length 360
&lt;span class=&quot;gp&quot;&gt; 00:00:01.014498 IP 192.168.91.137.6666 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.58368: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], ack 1449, win 501, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 939993754 ecr 3245552536], length 0
&lt;span class=&quot;gp&quot;&gt; 00:00:01.014498 IP 192.168.91.137.6666 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.58368: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], ack 1449, win 501, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 939993754 ecr 3245552536], length 0
&lt;span class=&quot;gp&quot;&gt; 00:00:01.221646 IP 192.168.91.128.58368 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1449:2897, ack 1, win 502, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3245552743 ecr 939993754], length 1448
&lt;span class=&quot;gp&quot;&gt; 00:00:01.653752 IP 192.168.91.128.58368 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1449:2897, ack 1, win 502, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3245553175 ecr 939993754], length 1448
&lt;span class=&quot;gp&quot;&gt; 00:00:01.654191 IP 192.168.91.137.6666 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.58368: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], ack 5793, win 473, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 939994394 ecr 3245553175], length 0
&lt;span class=&quot;gp&quot;&gt; 00:00:01.654217 IP 192.168.91.128.58368 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;5793:7241, ack 1, win 502, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3245553176 ecr 939994394], length 1448
&lt;span class=&quot;gp&quot;&gt; 00:00:01.654221 IP 192.168.91.128.58368 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;7241:8193, ack 1, win 502, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3245553176 ecr 939994394], length 952
&lt;span class=&quot;gp&quot;&gt; 00:00:01.654278 IP 192.168.91.128.58368 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;8193:9641, ack 1, win 502, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3245553176 ecr 939994394], length 1448
&lt;span class=&quot;gp&quot;&gt; 00:00:01.654303 IP 192.168.91.128.58368 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;FP.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;9641:10001, ack 1, win 502, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3245553176 ecr 939994394], length 360
&lt;span class=&quot;gp&quot;&gt; 00:00:01.654539 IP 192.168.91.137.6666 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.58368: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], ack 5793, win 496, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 939994394 ecr 3245553175], length 0
&lt;span class=&quot;gp&quot;&gt; 00:00:01.862139 IP 192.168.91.128.58368 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;5793:7241, ack 1, win 502, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3245553384 ecr 939994394], length 1448
&lt;span class=&quot;gp&quot;&gt; 00:00:01.862428 IP 192.168.91.137.6666 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.58368: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], ack 7241, win 488, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 939994602 ecr 3245553384], length 0
&lt;span class=&quot;gp&quot;&gt; 00:00:01.862444 IP 192.168.91.128.58368 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;7241:8193, ack 1, win 502, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3245553384 ecr 939994602], length 952
&lt;span class=&quot;gp&quot;&gt; 00:00:01.862475 IP 192.168.91.128.58368 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;8193:9641, ack 1, win 502, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3245553384 ecr 939994602], length 1448
&lt;span class=&quot;gp&quot;&gt; 00:00:01.862675 IP 192.168.91.137.6666 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.58368: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], ack 7241, win 496, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 939994602 ecr 3245553384], length 0
&lt;span class=&quot;gp&quot;&gt; 00:00:02.070061 IP 192.168.91.128.58368 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;7241:8193, ack 1, win 502, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3245553592 ecr 939994602], length 952
&lt;span class=&quot;gp&quot;&gt; 00:00:02.486074 IP 192.168.91.128.58368 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;7241:8193, ack 1, win 502, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3245554008 ecr 939994602], length 952
&lt;span class=&quot;gp&quot;&gt; 00:00:02.486555 IP 192.168.91.137.6666 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.58368: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], ack 10002, win 489, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 939995226 ecr 3245554008], length 0
&lt;span class=&quot;gp&quot;&gt; 00:00:02.486557 IP 192.168.91.137.6666 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.58368: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;F.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1, ack 10002, win 501, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 939995226 ecr 3245554008], length 0
&lt;span class=&quot;gp&quot;&gt; 00:00:02.486636 IP 192.168.91.128.58368 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], ack 2, win 502, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3245554008 ecr 939995226], length 0
&lt;span class=&quot;gp&quot;&gt; 00:00:02.717525 IP 192.168.91.137.6666 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.58368: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;F.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1, ack 10002, win 501, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 939995457 ecr 3245554008], length 0
&lt;span class=&quot;gp&quot;&gt; 00:00:02.717540 IP 192.168.91.128.58368 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], ack 2, win 502, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3245554239 ecr 939995226], length 0
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;retransmission-with-selective-acknowledgments&quot;&gt;5. Retransmission with Selective Acknowledgments&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With the standardization of the Selective Acknowledgment options in &lt;a href=&quot;#RFC2018&quot;&gt;[RFC2018]&lt;/a&gt;, a SACK-capable TCP receiver is able to describe data it has received with sequence numbers beyond the cumulative &lt;em&gt;ACK Number&lt;/em&gt; field it sends in the primary portion of the TCP header.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The gaps between the ACK number and other in-window data cached at the receiver are called &lt;strong&gt;holes&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Data with sequence numbers beyond the holes are called &lt;strong&gt;out-of-sequence&lt;/strong&gt; data because that data is not contiguous, in terms of its sequence numbers, with the other data the receiver has already received.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The job of a sending TCP is to fill the holes in the receiver by retransmitting any data the receiver is missing, yet to be as efficient as possible by not resending data the receiver already has.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In many circumstances, the properly operating SACK sender is able to fill these holes more quickly and with fewer unnecessary retransmissions than a comparable non-SACK sender because it does not have to wait an entire RTT to learn about additional holes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When the SACK option is being used, an ACK can be augmented with up to three or four SACK blocks that contain information about out-of-sequence data at the receiver.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Each &lt;strong&gt;SACK block&lt;/strong&gt; contains two 32-bit sequence numbers representing the first and last sequence numbers (plus 1) of a continuous block of out-of-sequence data being held at the receiver.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A SACK option that specifies &lt;em&gt;n&lt;/em&gt; blocks has a length of 8n + 2 bytes (8n bytes for the sequence numbers and 2 to indicate the option kind and length), so the 40 bytes available to hold TCP options can specify a maximum of four blocks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is expected that SACK will often be used in conjunction with the TSOPT, which takes an additional 10 bytes (plus 2 bytes of padding), meaning that SACK is typically able to include only three blocks per ACK.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;With three distinct blocks, up to three holes can be reported to the sender.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If not limited by &lt;em&gt;congestion control&lt;/em&gt;, all three could be filled within one round-trip time using a SACK-capable sender.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An ACK packet containing one or more SACK blocks is sometimes called simply a &lt;strong&gt;SACK&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1:1449, ack 1, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;TS val 3251433112 ecr 945874299], length 1448
&lt;span class=&quot;gp&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1449:2897, ack 1, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;TS val 3251433112 ecr 945874299], length 1448
&lt;span class=&quot;gp&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;2897:4345, ack 1, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;TS val 3251433112 ecr 945874299], length 1448
&lt;span class=&quot;gp&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;4345:5793, ack 1, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;TS val 3251433112 ecr 945874299], length 1448
&lt;span class=&quot;gp&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;5793:7241, ack 1, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;TS val 3251433112 ecr 945874299], length 1448
&lt;span class=&quot;gp&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;7241:8193, ack 1, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;TS val 3251433112 ecr 945874299], length 952
&lt;span class=&quot;go&quot;&gt;&amp;lt;= [.], ack 1449, [TS val 945874300 ecr 3251433112], length 0
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;8193:9641, ack 1, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;TS val 3251433113 ecr 945874300], length 1448
&lt;span class=&quot;gp&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;FP.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;9641:10001, ack 1, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;TS val 3251433113 ecr 945874300], length 360
&lt;span class=&quot;go&quot;&gt;
&amp;lt;= [.], ack 1449, [TS val 945874300 ecr 3251433112,sack 1 {2897:5793}], length 0
&amp;lt;= [.], ack 1449, [TS val 945874300 ecr 3251433112,sack 2 {8193:10002}{2897:5793}], length 0

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1449:2897, ack 1, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;TS val 3251433113 ecr 945874300], length 1448
&lt;span class=&quot;gp&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;5793:7241, ack 1, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;TS val 3251433113 ecr 945874300], length 1448&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;sack-receiver-behavior&quot;&gt;5.1. SACK Receiver Behavior&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A SACK-capable receiver is allowed to generate SACKs if it has received the SACK-Permitted option during the TCP connection establishment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;// The SACK-Permitted option is exchanged in SYN segments to indicate the capability to generate and process SACK information.
// Most modern TCPs support the MSS, Timestamps, Window Scale, and SACK-Permitted options during connection establishment.
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;IP 192.168.91.128.56276 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;3680115076, win 64240, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 1460,sackOK,TS val 3251433112 ecr 0,nop,wscale 7], length 0
&lt;span class=&quot;gp&quot;&gt;IP 192.168.91.137.6666 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.56276: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;2651302134, ack 3680115077, win 65160, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 1460,sackOK,TS val 945874299 ecr 3251433112,nop,wscale 7], length 0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Generally speaking, a receiver generates SACKs whenever there is any out-of-order data in its buffer. This can happen either:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;because data was &lt;em&gt;lost&lt;/em&gt; in transit, or&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;because it has been reordered and newer data has arrived at the receiver before older data.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The receiver places in the first SACK block the sequence number range contained in the segment it has &lt;em&gt;most recently received&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Because the space in a SACK option is limited, it is best to ensure that the most recent information is always provided to the sending TCP, if possible.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Other SACK blocks are listed in the order in which they appeared as first blocks in previous SACK options.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That is, they are filled in by repeating the most recently sent SACK blocks (in other segments) that are not subsets of another block about to be placed in the option being constructed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;&amp;lt;= [.], ack 1449, [TS val 945874300 ecr 3251433112], length 0
&amp;lt;= [.], ack 1449, [TS val 945874300 ecr 3251433112,sack 1 {2897:5793}], length 0
&amp;lt;= [.], ack 1449, [TS val 945874300 ecr 3251433112,sack 2 {8193:10002}{2897:5793}], length 0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The purpose of including more than one SACK block in a SACK option and repeating these blocks across multiple SACKs is to provide some redundancy in the case where SACKs are lost.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If SACKs were never lost, &lt;a href=&quot;#RFC2018&quot;&gt;[RFC2018]&lt;/a&gt; points out that only one SACK block would be required per SACK for full SACK functionality.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unfortunately, SACKs and regular ACKs are sometimes lost and are not retransmitted by TCP unless they contain data (or the &lt;em&gt;SYN&lt;/em&gt; or &lt;em&gt;FIN&lt;/em&gt; control bit fields are turned on).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;sack-sender-behavior&quot;&gt;5.2. SACK Sender Behavior&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A SACK-capable sender must be used that treats the SACK blocks appropriately and performs &lt;strong&gt;selective retransmission&lt;/strong&gt; by sending only those segments missing at the receiver, a process also called &lt;strong&gt;selective repeat&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The SACK sender keeps track of any cumulative ACK information it receives (like any TCP sender), plus any SACK information it receives.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When a SACK-capable sender has the opportunity to perform a retransmission, usually because it has received a SACK or seen multiple duplicate ACKs, it has the choice of whether it sends new data or retransmits old data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The SACK information provides the sequence number ranges present at the receiver, so the sender can infer what segments likely need to be retransmitted to fill the receiver&amp;#8217;s holes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The simplest approach is to have the sender first fill the holes at the receiver and then move on to send more new data &lt;a href=&quot;#RFC3517&quot;&gt;[RFC3517]&lt;/a&gt; if the congestion control procedures allow. This is the most common approach.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;example&quot;&gt;5.3. Example&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To understand how the use of SACK alters the sender and receiver behaviors, we repeat the preceding fast retransmit experiment, but this time the sender and receiver are using SACK.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/tcp-ip/tcp-timeout-and-retransmission/fast-retransmit-with-sack-wireshark.png&quot; alt=&quot;fast retransmit with sack wireshark&quot; width=&quot;100%&quot; height=&quot;100%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The SYN packet from the sender, the first packet of the trace, also contains an identical option.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These options are present only at connection setup, and thus they only ever appear in segments with the &lt;em&gt;SYN bit&lt;/em&gt; field set.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once the connection is permitted to use SACKs, packet loss generally causes the receiver to start producing SACKs.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The ACK at packet 14 for 1449 contains a SACK block of [2897:5793], indicating a hole at the receiver.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The receiver is missing the sequence number range [1449,2896], which corresponds to the single 1448-byte packet starting with sequence number 1449.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The SACK arriving at packet 15 contains two SACK blocks: [8193:10002] and [2897:5793].&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Recall that the first SACK blocks from previous SACKs are repeated in later positions in subsequent SACKs for robustness against ACK loss.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This SACK is a duplicate ACK for sequence number 1449 and suggests that the receiver now requires the missing segments starting with sequence numbers 1449 and 5793.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The SACK sender has not had to wait an RTT to retransmit lost segment 5793 after retransmitting segment 1449.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;summary class=&quot;title&quot;&gt;Show tcpdump trace&lt;/summary&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;table class=&quot;linenotable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;gp&quot;&gt;IP 192.168.91.128.56276 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;3680115076, win 64240, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 1460,sackOK,TS val 3251432089 ecr 0,nop,wscale 7], length 0
&lt;span class=&quot;gp&quot;&gt;IP 192.168.91.128.56276 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;3680115076, win 64240, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 1460,sackOK,TS val 3251433112 ecr 0,nop,wscale 7], length 0
&lt;span class=&quot;gp&quot;&gt;IP 192.168.91.137.6666 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.56276: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;2651302134, ack 3680115077, win 65160, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 1460,sackOK,TS val 945874299 ecr 3251433112,nop,wscale 7], length 0
&lt;span class=&quot;gp&quot;&gt;IP 192.168.91.128.56276 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], ack 1, win 502, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3251433112 ecr 945874299], length 0
&lt;span class=&quot;gp&quot;&gt;IP 192.168.91.128.56276 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1:1449, ack 1, win 502, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3251433112 ecr 945874299], length 1448
&lt;span class=&quot;gp&quot;&gt;IP 192.168.91.128.56276 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1449:2897, ack 1, win 502, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3251433112 ecr 945874299], length 1448
&lt;span class=&quot;gp&quot;&gt;IP 192.168.91.128.56276 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;2897:4345, ack 1, win 502, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3251433112 ecr 945874299], length 1448
&lt;span class=&quot;gp&quot;&gt;IP 192.168.91.128.56276 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;4345:5793, ack 1, win 502, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3251433112 ecr 945874299], length 1448
&lt;span class=&quot;gp&quot;&gt;IP 192.168.91.128.56276 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;5793:7241, ack 1, win 502, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3251433112 ecr 945874299], length 1448
&lt;span class=&quot;gp&quot;&gt;IP 192.168.91.128.56276 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;7241:8193, ack 1, win 502, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3251433112 ecr 945874299], length 952
&lt;span class=&quot;gp&quot;&gt;IP 192.168.91.137.6666 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.56276: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], ack 1449, win 501, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 945874300 ecr 3251433112], length 0
&lt;span class=&quot;gp&quot;&gt;IP 192.168.91.128.56276 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;8193:9641, ack 1, win 502, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3251433113 ecr 945874300], length 1448
&lt;span class=&quot;gp&quot;&gt;IP 192.168.91.128.56276 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;FP.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;9641:10001, ack 1, win 502, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3251433113 ecr 945874300], length 360
&lt;span class=&quot;gp&quot;&gt;IP 192.168.91.137.6666 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.56276: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], ack 1449, win 501, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 945874300 ecr 3251433112,nop,nop,sack 1 &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;2897:5793&lt;span class=&quot;o&quot;&gt;}]&lt;/span&gt;, length 0
&lt;span class=&quot;gp&quot;&gt;IP 192.168.91.137.6666 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.56276: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], ack 1449, win 501, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 945874300 ecr 3251433112,nop,nop,sack 2 &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;8193:10002&lt;span class=&quot;o&quot;&gt;}{&lt;/span&gt;2897:5793&lt;span class=&quot;o&quot;&gt;}]&lt;/span&gt;, length 0
&lt;span class=&quot;gp&quot;&gt;IP 192.168.91.128.56276 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1449:2897, ack 1, win 502, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3251433113 ecr 945874300], length 1448
&lt;span class=&quot;gp&quot;&gt;IP 192.168.91.128.56276 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;5793:7241, ack 1, win 502, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3251433113 ecr 945874300], length 1448
&lt;span class=&quot;gp&quot;&gt;IP 192.168.91.137.6666 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.56276: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], ack 1449, win 501, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 945874301 ecr 3251433112,nop,nop,sack 2 &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;2897:7241&lt;span class=&quot;o&quot;&gt;}{&lt;/span&gt;8193:10002&lt;span class=&quot;o&quot;&gt;}]&lt;/span&gt;, length 0
&lt;span class=&quot;gp&quot;&gt;IP 192.168.91.128.56276 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1449:2897, ack 1, win 502, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3251433113 ecr 945874301], length 1448
&lt;span class=&quot;gp&quot;&gt;IP 192.168.91.128.56276 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1449:2897, ack 1, win 502, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3251433324 ecr 945874301], length 1448
&lt;span class=&quot;gp&quot;&gt;IP 192.168.91.137.6666 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.56276: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], ack 7241, win 465, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 945874513 ecr 3251433324,nop,nop,sack 1 &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;8193:10002&lt;span class=&quot;o&quot;&gt;}]&lt;/span&gt;, length 0
&lt;span class=&quot;gp&quot;&gt;IP 192.168.91.128.56276 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;7241:8193, ack 1, win 502, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3251433326 ecr 945874513], length 952
&lt;span class=&quot;gp&quot;&gt;IP 192.168.91.128.56276 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;7241:8193, ack 1, win 502, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3251433532 ecr 945874513], length 952
&lt;span class=&quot;gp&quot;&gt;IP 192.168.91.137.6666 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.56276: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], ack 10002, win 489, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 945874720 ecr 3251433532], length 0
&lt;span class=&quot;gp&quot;&gt;IP 192.168.91.137.6666 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.56276: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;F.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1, ack 10002, win 501, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 945874720 ecr 3251433532], length 0
&lt;span class=&quot;gp&quot;&gt;IP 192.168.91.128.56276 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], ack 2, win 502, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3251433533 ecr 945874720], length 0
&lt;span class=&quot;gp&quot;&gt;IP 192.168.91.137.6666 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.56276: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;F.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1, ack 10002, win 501, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 945874926 ecr 3251433532], length 0
&lt;span class=&quot;gp&quot;&gt;IP 192.168.91.128.56276 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], ack 2, win 502, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3251433739 ecr 945874720], length 0
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;spurious-timeouts-and-retransmissions&quot;&gt;6. Spurious Timeouts and Retransmissions&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Under a number of circumstances, TCP may initiate a retransmission even when no data has been lost.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Such undesirable retransmissions are called &lt;strong&gt;spurious retransmissions&lt;/strong&gt; and are caused by &lt;em&gt;spurious timeouts&lt;/em&gt; (timeouts firing too early) and other reasons such as &lt;em&gt;packet reordering&lt;/em&gt;, &lt;em&gt;packet duplication&lt;/em&gt;, or &lt;em&gt;lost ACKs&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Spurious timeouts can occur when the real RTT has recently increased significantly, beyond the RTO. This happens more frequently in environments where lower-layer protocols have widely varying performance (e.g., wireless).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A number of approaches have been suggested to deal with spurious timeouts. They generally involve a &lt;strong&gt;detection algorithm&lt;/strong&gt; and a &lt;strong&gt;response algorithm&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The detection algorithm attempts to determine whether a timeout or timer-based retransmission was spurious.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The response algorithm is invoked once a timeout or retransmission is deemed spurious.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Its purpose is to undo or mitigate some action that is otherwise normally performed by TCP when a retransmission timer expires.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/tcp-ip/tcp-timeout-and-retransmission/suprious-timeout-spike-delay.png&quot; alt=&quot;suprious timeout spike delay&quot; width=&quot;25%&quot; height=&quot;25%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. A delay spike occurs after the transmission of packet 8, causing a spurious retransmission timeout and retransmission of packet 5. After retransmission, an ACK for the first copy of 5 arrives. The retransmission for 5 creates a duplicate packet at the receiver, followed by an undesirable &quot;go-back-N&quot; behavior whereby packets 6, 7, and 8 are retransmitted even though they are already present at the receiver.&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;duplicate-sack-dsack-extension&quot;&gt;6.1. Duplicate SACK (DSACK) Extension&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With a non-SACK TCP, an ACK can indicate only the highest in-sequence segment back to the sender. With SACK, it can signal other (out-of-order) segments as well.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;DSACK&lt;/em&gt; or &lt;em&gt;D-SACK&lt;/em&gt; (stands for &lt;em&gt;duplicate SACK&lt;/em&gt; &lt;a href=&quot;#RFC2883&quot;&gt;[RFC2883]&lt;/a&gt;) is a rule, applied at the SACK receiver and interoperable with conventional SACK senders, that causes &lt;em&gt;the first SACK block to indicate the sequence numbers of a duplicate segment that has arrived at the receiver&lt;/em&gt;, which is usually to determine when a retransmission was not necessary and to learn additional facts about the network.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The change to the SACK &lt;em&gt;receiver&lt;/em&gt; is to allow a SACK block to be included even if it covers sequence numbers below (or equal to) the cumulative &lt;em&gt;ACK Number&lt;/em&gt; field.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It applies equally well in cases where the DSACK information is &lt;em&gt;above&lt;/em&gt; the cumulative &lt;em&gt;ACK Number&lt;/em&gt; field; this happens for duplicated out-of-order segments.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DSACK information is included in only a single ACK, and such an ACK is called a &lt;strong&gt;DSACK&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DSACK information is not repeated across multiple SACKs as conventional SACK information is.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Exactly what a &lt;em&gt;sender&lt;/em&gt; given DSACK information is supposed to do with it is not specified by &lt;a href=&quot;#RFC2883&quot;&gt;[RFC2883]&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;the-eifel-detection-algorithm&quot;&gt;6.2. The Eifel Detection Algorithm&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The experimental &lt;em&gt;Eifel Detection Algorithm&lt;/em&gt; &lt;a href=&quot;#RFC3522&quot;&gt;[RFC3522]&lt;/a&gt; deals with the retransmission ambiguity problem using the TCP TSOPT to detect spurious retransmissions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;After a retransmission timeout occurs, Eifel awaits the next acceptable ACK.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the next acceptable ACK indicates that the first copy of a retransmitted packet (called the &lt;em&gt;original transmit&lt;/em&gt;) was the cause for the ACK, the retransmission is considered to be spurious.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Eifel Detection Algorithm is able to detect spurious behavior earlier than the approach using only DSACK because it relies on ACKs generated as a result of packets arriving before loss recovery is initiated.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;DSACKs, conversely, are able to be sent only after a duplicate segment has arrived at the receiver and able to be acted upon only after the DSACK is returned to the sender.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Detecting spurious retransmissions early can offer advantages, because it allows the sender to avoid most of the &lt;em&gt;go-back-N&lt;/em&gt; behavior.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The mechanics of the Eifel Detection Algorithm are simple. It requires the use of the TCP TSOPT.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;When a retransmission is sent (either a timer-based retransmission or a fast retransmit), the TSV value is stored.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When the first acceptable ACK covering its sequence number is received, the incoming ACK&amp;#8217;s TSER is examined.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If it is smaller than the stored value, the ACK corresponds to the original transmission of the packet and not the retransmission, implying that the retransmission must have been spurious.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This approach is fairly robust to ACK loss as well.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If an ACK is lost, any subsequent ACKs still have TSER values less than the stored TSV of the retransmitted segment.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Thus, a retransmission can be deemed spurious as a result of any of the window&amp;#8217;s worth of ACKs arriving, so a loss of any single ACK is not likely to cause a problem.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Eifel Detection Algorithm can be combined with DSACKs which can be beneficial when an entire window&amp;#8217;s worth of ACKs are lost but both the original transmit and retransmission have arrived at the receiver.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In this particular case, the arriving retransmit causes a DSACK to be generated.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Eifel Detection Algorithm would by default conclude that the retransmission is spurious.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is thought, however, that if so many ACKs are being lost, allowing TCP to believe the retransmission was not spurious is useful (e.g., to induce it to start sending more slowly—a consequence of the congestion control procedures).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Thus, arriving DSACKs cause the Eifel Detection Algorithm to conclude that the corresponding retransmission is not spurious.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;forward-rto-recovery-f-rto&quot;&gt;6.3. Forward-RTO Recovery (F-RTO)&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;Forward-RTO Recovery (F-RTO)&lt;/em&gt; &lt;a href=&quot;#RFC5682&quot;&gt;[RFC5682]&lt;/a&gt; is a standard algorithm for detecting spurious retransmissions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It does not require any TCP options, so when it is implemented in a sender, it can be used effectively even with an older receiver that does not support the TCP TSOPT.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It attempts to detect only spurious retransmissions caused by expiration of the retransmission timer; it does not deal with the other causes for spurious retransmissions or duplications mentioned before.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;F-RTO makes a modification to the action TCP ordinarily takes after a timer-based retransmission.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;These retransmissions are for the smallest sequence number for which no ACK has yet been received.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ordinarily, TCP continues sending additional adjacent packets in order as additional ACKs arrive. This is the &lt;em&gt;go-back-N&lt;/em&gt; behavior.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;F-RTO modifies the ordinary behavior of TCP by having TCP send new (so far unsent) data after the timeout-based retransmission when the first ACK arrives. It then inspects the second arriving ACK.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If either of the first two ACKs arriving after the retransmission was sent are duplicate ACKs, the retransmission is deemed OK.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If they are both acceptable ACKs that advance the sender&amp;#8217;s window, the retransmission is deemed to have been spurious.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the transmission of new data results in the arrival of acceptable ACKs, the arrival of the new data is moving the receiver&amp;#8217;s window forward.&lt;/p&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If such data is only causing duplicate ACKs, there must be one or more holes at the receiver.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In either case, the reception of new data at the receiver does not harm the overall data transfer performance (provided there are sufficient buffers at the receiver).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;the-eifel-response-algorithm&quot;&gt;6.4. The Eifel Response Algorithm&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;em&gt;Eifel Response Algorithm&lt;/em&gt; [RFC4015] is a standard set of operations to be executed by a TCP once a retransmission has been deemed spurious.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Because the response algorithm is logically decoupled from the Eifel Detection Algorithm, it can be used with any of the detection algorithms we just discussed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Eifel Response Algorithm was originally intended to operate for both timer-based and fast retransmit spurious retransmissions but is currently specified only for timer-based retransmissions.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;packet-reordering-and-duplication&quot;&gt;7. Packet Reordering and Duplication&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition to packet loss, other packet delivery anomalies such as duplication and reordering can also affect TCP&amp;#8217;s operation. In both of these cases, we wish TCP to be able to distinguish between packets that are reordered or duplicated and those that are lost.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;reordering&quot;&gt;7.1. Reordering&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Packet reordering can occur in an IP network because IP provides no guarantee that relative ordering between packets is maintained during delivery.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This can be beneficial (to IP at least), because IP can choose another path for traffic (e.g., that is faster) without having to worry about the consequences that doing so may cause traffic freshly injected into the network to pass ahead of older traffic, resulting in the order of packet arrivals at the receiver not matching the order of transmission at the sender.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are other reasons packet reordering may occur. For example, some high-performance routers employ multiple parallel data paths within the hardware [BPS99], and different processing delays among packets can lead to a departure order that does not match the arrival order.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Reordering may take place in the &lt;em&gt;forward path&lt;/em&gt; or the &lt;em&gt;reverse path&lt;/em&gt; of a TCP connection (or in some cases both). The reordering of data segments has a somewhat different effect on TCP as does reordering of ACK packets.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Recall that because of &lt;em&gt;asymmetric routing&lt;/em&gt;, it is frequently the case that ACKs travel along different network links (and through different routers) from data packets on the forward path.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When traffic is reordered, TCP can be affected in several ways.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If reordering takes place in the reverse (ACK) direction, it causes the sending TCP to receive some ACKs that move the window significantly forward followed by some evidently old redundant ACKs that are discarded.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This can lead to an unwanted &lt;em&gt;burstiness&lt;/em&gt; (instantaneous high-speed sending) behavior in the sending pattern of TCP and also trouble in taking advantage of available network bandwidth, because of the behavior of TCP&amp;#8217;s congestion control.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If reordering occurs in the forward direction, TCP may have trouble distinguishing this condition from loss.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Both loss and reordering result in the receiver receiving out-of-order packets that create holes between the next expected packet and the other packets received so far.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;When reordering is moderate (e.g., two adjacent packets switch order), the situation can be handled fairly quickly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When reorderings are more severe, TCP can be tricked into believing that data has been lost even though it has not.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This can result in spurious retransmissions, primarily from the fast retransmit algorithm.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Because a TCP receiver is supposed to immediately ACK any out-of-sequence data it receives in order to help induce fast retransmit to be triggered on packet loss, any packet that is reordered within the network causes a receiver to produce a duplicate ACK.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If fast retransmit were to be invoked whenever any duplicate ACK is received at the sender, a large number of unnecessary retransmissions would occur on network paths where a small amount of reordering is common.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To handle this situation, fast retransmit is triggered only after the duplicate threshold (&lt;em&gt;dupthresh&lt;/em&gt;) has been reached.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/tcp-ip/tcp-timeout-and-retransmission/packet-reordering-fast-retransit.png&quot; alt=&quot;packet reordering fast retransit&quot; width=&quot;45%&quot; height=&quot;45%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2. Mild reordering (left) is overcome by ignoring a small number of duplicate ACKs. When reordering is more severe (right), as in this case where packet 4 is three places out of sequence, a spurious fast retransmit can be triggered.&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The left portion of the figure indicates how TCP behaves with light reordering, where &lt;em&gt;dupthresh&lt;/em&gt; is set to 3.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this case, the single duplicate ACK does not affect TCP. It is effectively ignored and TCP overcomes the reordering.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The right-hand side indicates what happens when a packet has been more severely reordered.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Because it is three positions out of sequence, three duplicate ACKs are generated. This invokes the fast retransmit procedure in the sending TCP, producing a duplicate segment at the receiver.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The problem of distinguishing loss from reordering is not trivial. Dealing with it involves trying to decide when a sender has waited long enough to try to fill apparent holes at the receiver.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Fortunately, severe reordering on the Internet is not common &lt;a href=&quot;#J03&quot;&gt;[J03]&lt;/a&gt;, so setting &lt;em&gt;dupthresh&lt;/em&gt; to a relatively small number (such as the default of 3) handles most circumstances. That said, there are a number of research projects that modify TCP to handle more severe reordering &lt;a href=&quot;#LLY07&quot;&gt;[LLY07]&lt;/a&gt;. Some of these adjust &lt;em&gt;dupthresh&lt;/em&gt; dynamically, as does the Linux TCP implementation.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;duplication&quot;&gt;7.2. Duplication&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Although rare, the IP protocol may deliver a single packet more than one time. This can happen, for example, when a link-layer network protocol performs a retransmission and creates two copies of the same packet.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/tcp-ip/tcp-timeout-and-retransmission/packet-dup-fast-retransit.png&quot; alt=&quot;packet dup fast retransit&quot; width=&quot;25%&quot; height=&quot;25%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 3. Packet (no. 3) duplication in the network has caused a spurious fast retransmission due to the presence of duplicate ACKs.&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The effect of packet 3 being duplicated is to produce a series of duplicate ACKs from the receiver. This is enough to trigger a spurious fast retransmit, as the non-SACK sender may mistakenly believe that packets 5 and 6 have arrived earlier. With SACK (and DSACK, in particular) this is more easily diagnosed at the sender.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With DSACK, each of the duplicate ACKs for A3 contains DSACK information that segment 3 has already been received. Furthermore, none of them contains an indication of any out-of-order data, meaning the arriving packets (or their ACKs) must have been duplicates. TCP can often suppress spurious retransmissions in such cases.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;destination-metrics&quot;&gt;8. Destination Metrics&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Newer TCP implementations maintain many of the metrics such as &lt;em&gt;srtt&lt;/em&gt;, &lt;em&gt;rttvar&lt;/em&gt; and so on. in a routing or forwarding table entry or other systemwide data structure that exists even after TCP connections are closed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When a new connection is created, TCP consults the data structure to see if there is any preexisting information regarding the path to the destination host with which it will be communicating.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If so, initial values for &lt;em&gt;srtt&lt;/em&gt;, &lt;em&gt;rttvar&lt;/em&gt;, and so on can be initialized to some value based on previous, relatively recent experience.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When a TCP connection closes down, it has the opportunity to update the statistics. This can be accomplished by replacing the existing statistics or updating them in some other way.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the case of Linux 2.6, the values are updated to be the maximum of the existing values and those measured by the most recent TCP. These values can be inspected using the &lt;code&gt;ip&lt;/code&gt; program available from the iproute2 suite of tools:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;ip route show cache 10.170.109.10
&lt;span class=&quot;go&quot;&gt;10.170.109.10 via 192.168.91.137 dev ens32
    cache expires 558se cmtu 1500 rtt 29ms rttvar 29ms cwnd 2 advmss 1460 hoplimit 64&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;repacketization&quot;&gt;9. Repacketization&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When TCP times out and retransmits, it does not have to retransmit the identical segment. Instead, TCP is allowed to perform &lt;em&gt;repacketization&lt;/em&gt;, sending a bigger segment, which can increase performance. Naturally, this bigger segment cannot exceed the MSS announced by the receiver and should not exceed the path MTU.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is allowed in the protocol because TCP identifies the data being sent and acknowledged by its byte number, not its segment (or packet) number.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;TCP&amp;#8217;s ability to retransmit a segment with a different size from the original segment provides another way of addressing the retransmission ambiguity problem. This has been the basis of an idea called STODER &lt;a href=&quot;#TZZ05&quot;&gt;[TZZ05]&lt;/a&gt; that uses repacketization to detect spurious timeouts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We can easily see repacketization in action. We use our &lt;code&gt;nc&lt;/code&gt; program as a server and connect to it with &lt;code&gt;telnet&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;First we type the line &lt;code&gt;hello there&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This produces a segment of 13 data bytes, including the carriage-return and newline characters produced when the Enter key is pressed.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We then disconnect the network and type &lt;code&gt;line number 2&lt;/code&gt; (14 bytes, including the newline).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We then wait about 45s, type &lt;code&gt;and 3&lt;/code&gt;, terminate the connection, and reconnect the network again:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;telnet node-1 6666
&lt;span class=&quot;go&quot;&gt;Trying 192.168.91.137...
Connected to node-1.
Escape character is '^]'.
hello there &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
line number 2 &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
and 3 &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
^]
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;telnet&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;q
&lt;span class=&quot;go&quot;&gt;Connection closed. &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;(first line gets sent OK), (then we disconnect the Ethernet cable)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;(this line gets retransmitted)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;(this line gets transmitted and also carries the &lt;em&gt;FIN&lt;/em&gt; bit field)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;(reconnect Ethernet)&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following highlighted line 7 show how the retransmission for sequence number 14 resulted in a repacketization to form a larger packet of size 22 bytes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;table class=&quot;linenotable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;gp&quot;&gt; 00:00:03.941676 IP 192.168.91.128.36242 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1:14, ack 1, win 502, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3767361706 ecr 1569370162], length 13
&lt;span class=&quot;gp&quot;&gt; 00:00:03.942475 IP 192.168.91.137.6666 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.36242: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], ack 14, win 509, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 1569374104 ecr 3767361706], length 0
&lt;span class=&quot;gp&quot;&gt; 00:00:19.901087 IP 192.168.91.128.36242 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;14:29, ack 1, win 502, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3767377666 ecr 1569374104], length 15
&lt;span class=&quot;c&quot;&gt;....&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt; 00:00:46.705168 IP 192.168.91.128.36242 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;14:29, ack 1, win 502, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3767404470 ecr 1569374104], length 15
&lt;span class=&quot;gp&quot;&gt; 00:00:51.189357 IP 192.168.91.128.36242 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;FP.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;29:36, ack 1, win 502, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3767408954 ecr 1569374104], length 7
&lt;span class=&quot;hll&quot;&gt;&lt;span class=&quot;gp&quot;&gt; 00:01:13.587320 IP 192.168.91.128.36242 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;FP.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;14:36, ack 1, win 502, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3767431351 ecr 1569374104], length 22
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt; 00:01:13.587777 IP 192.168.91.137.6666 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.36242: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;F.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1, ack 37, win 509, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 1569443750 ecr 3767431351], length 0
&lt;span class=&quot;gp&quot;&gt; 00:01:13.587800 IP 192.168.91.128.36242 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], ack 2, win 502, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3767431352 ecr 1569443750], length 0
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;dropping-packets-in-linux-using-tc-and-iptables&quot;&gt;Appendix A: Dropping Packets in Linux using tc and iptables&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are two simple ways to randomly drop packets on a Linux computer: using &lt;code&gt;tc&lt;/code&gt;, the program dedicated for controlling traffic; and using &lt;code&gt;iptables&lt;/code&gt;, the built-in firewall. &lt;a href=&quot;#NETEM&quot;&gt;[NETEM]&lt;/a&gt;&lt;a href=&quot;#IPTABLES&quot;&gt;[IPTABLES]&lt;/a&gt;&lt;a href=&quot;#EBADNET&quot;&gt;[EBADNET]&lt;/a&gt;&lt;a href=&quot;#DPLTC&quot;&gt;[DPLTC]&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;dropping-packets-with-tc&quot;&gt;A.1. Dropping Packets with tc&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;tc&lt;/strong&gt; controls the transmit queues of your kernel. Normally when applications on your computer generate data to send, the data is passed to your kernel (via TCP and IP) for transmission on the network interface. The packets are transmitted in a first-in-first-out (FIFO) order.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;tc&lt;/em&gt; allows you to change the queuing mechanisms (e.g. giving priority to specific type of packets), as well as emulate links by delaying and dropping packets.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here we will use &lt;em&gt;tc&lt;/em&gt; to drop packets. Because &lt;em&gt;tc&lt;/em&gt; controls the transmit queues, we use it on a source computer (normally &lt;em&gt;tc&lt;/em&gt; doesn&amp;#8217;t impact on what is received by your computer, but there are exceptions).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;tc qdisc replace dev ens32 root netem loss 25%&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;netem&lt;/em&gt; is a special type of queuing discipline used for emulating networks. The above command tells the Linux kernel to drop on average 25% of the packets in the transmit queue. You can use different values of loss (e.g. 10%).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When using &lt;em&gt;tc&lt;/em&gt; you can show the current queue disciplines using:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;tc qdisc show dev ens32
&lt;span class=&quot;go&quot;&gt;qdisc netem 8001: root refcnt 2 limit 1000 loss 25%&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To show that it works, lets run an PING test. On computer &lt;code&gt;node-1&lt;/code&gt; (the computer where &lt;em&gt;tc&lt;/em&gt; is NOT used) run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-1:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;ping node-0 &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; 4
&lt;span class=&quot;go&quot;&gt;PING node-0.localdomain (192.168.91.129) 56(84) bytes of data.
64 bytes from 192.168.91.129 (192.168.91.129): icmp_seq=1 ttl=64 time=0.424 ms
64 bytes from 192.168.91.129 (192.168.91.129): icmp_seq=3 ttl=64 time=3.14 ms
64 bytes from 192.168.91.129 (192.168.91.129): icmp_seq=4 ttl=64 time=0.643 ms

--- node-0.localdomain ping statistics ---
4 packets transmitted, 3 received, 25% packet loss, time 22ms
rtt min/avg/max/mdev = 0.424/1.400/3.135/1.230 ms&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To delete the above queue discipline use the &lt;em&gt;delete&lt;/em&gt; command instead of &lt;em&gt;replace&lt;/em&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;tc qdisc delete dev ens32 root netem loss 25%
&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;tc qdisc show dev ens32
&lt;span class=&quot;go&quot;&gt;qdisc pfifo_fast 0: root refcnt 2 bands 3 priomap 1 2 2 2 1 2 0 0 1 1 1 1 1 1 1 1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock important&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-important&quot; title=&quot;Important&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When loss is used locally (not on a bridge or router), the loss is reported to the upper level protocols. This may cause TCP to resend and behave as if there was no loss. When testing protocol reponse to loss it is best to use a netem on a bridge or router. &lt;a href=&quot;#netem&quot;&gt;[netem]&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;dropping-packets-with-iptables&quot;&gt;A.2. Dropping Packets with iptables&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;iptables&lt;/code&gt; allows you to create rules that specify how packets coming into your computer and going out of your computer are treated (and for routers, also forwarded by the router). The rules for packets coming in are in the INPUT chain, packets going out are OUTPUT, and packets forwarded are in the FORWARD chain. We will only use the INPUT chain.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The rules can filter packets based on common packet identifiers (IP addresses, ports, protocol numbers) as well as other matching criteria. We will use a special &lt;em&gt;statistic&lt;/em&gt; matching module. For each packet that matches the filter, some action is applied (e.g. DROP the packet, ACCEPT the packet, or some more complex operation).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On computer &lt;code&gt;node-1&lt;/code&gt; (the destination), to view the current set of rules:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-1:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;iptables &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Chain INPUT (policy ACCEPT)
target     prot opt source               destination

Chain FORWARD (policy ACCEPT)
target     prot opt source               destination

Chain OUTPUT (policy ACCEPT)
target     prot opt source               destination&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are no rules in either of the three chains. Note that the default policy (if a packet does not match any rule) is to ACCEPT packets.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now to add a rule to the INPUT chain to drop 25% of incoming packets on computer &lt;code&gt;node-1&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-1:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;iptables &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; INPUT &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; statistic &lt;span class=&quot;nt&quot;&gt;--mode&lt;/span&gt; random &lt;span class=&quot;nt&quot;&gt;--probability&lt;/span&gt; 0.25 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; DROP
&lt;span class=&quot;gp&quot;&gt;x@node-1:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;iptables &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt; INPUT &lt;span class=&quot;nt&quot;&gt;--line-numbers&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Chain INPUT (policy ACCEPT)
num  target     prot opt source               destination
1    DROP       all  --  anywhere             anywhere             statistic mode random probability 0.25000000000&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To demonstrate the packet dropping, run another PING test on the source &lt;code&gt;node-0&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;ping node-1.local &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; 4
&lt;span class=&quot;go&quot;&gt;PING node-1.local (192.168.91.135) 56(84) bytes of data.
64 bytes from 192.168.91.135 (192.168.91.135): icmp_seq=1 ttl=64 time=0.547 ms
64 bytes from 192.168.91.135 (192.168.91.135): icmp_seq=2 ttl=64 time=1.91 ms
64 bytes from 192.168.91.135 (192.168.91.135): icmp_seq=3 ttl=64 time=0.513 ms

--- node-1.local ping statistics ---
4 packets transmitted, 3 received, 25% packet loss, time 3007ms
rtt min/avg/max/mdev = 0.513/0.988/1.905/0.648 ms&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Returning to computer &lt;code&gt;node-1&lt;/code&gt;, to delete a rule you can use the &lt;code&gt;-D&lt;/code&gt; option:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-1:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;iptables &lt;span class=&quot;nt&quot;&gt;-D&lt;/span&gt; INPUT &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; statistic &lt;span class=&quot;nt&quot;&gt;--mode&lt;/span&gt; random &lt;span class=&quot;nt&quot;&gt;--probability&lt;/span&gt; 0.25 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; DROP
&lt;span class=&quot;gp&quot;&gt;x@node-1:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;iptables &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt; INPUT
&lt;span class=&quot;go&quot;&gt;Chain INPUT (policy ACCEPT)
target     prot opt source               destination&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;(or you can refer to rules by number, e.g. &lt;code&gt;iptables -D INPUT 1&lt;/code&gt; to delete rule 1 from the INPUT chain).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Alternatively we can specify to drop every &lt;em&gt;n&lt;/em&gt; packets, starting from packet &lt;em&gt;p&lt;/em&gt;. And we can combine with the standard filtering mechanisms of firewalls to only drop packets belong to a particular source/destination pair or application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-1:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;iptables &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; INPUT &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; udp &lt;span class=&quot;nt&quot;&gt;--dport&lt;/span&gt; 6666 &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; statistic &lt;span class=&quot;nt&quot;&gt;--mode&lt;/span&gt; nth &lt;span class=&quot;nt&quot;&gt;--every&lt;/span&gt; 4 &lt;span class=&quot;nt&quot;&gt;--packet&lt;/span&gt; 3 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; DROP&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This rule should drop packet 3, 7, 11, &amp;#8230;&amp;#8203; for only one of the connections (with destination port 6666).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here is the output of an &lt;code&gt;iperf3&lt;/code&gt; test at the source &lt;code&gt;node-0&lt;/code&gt;. There are 25% packets dropped by the destination (receiver).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;iperf3 &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; node-1 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 6666 &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; 10 &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Connecting to host node-1, port 6666
[  5] local 192.168.91.128 port 52026 connected to 192.168.91.137 port 6666
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;....
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID] Interval           Transfer     Bitrate         Jitter    Lost/Total Datagrams
[  5]   0.00-10.00  sec  1.25 MBytes  1.05 Mbits/sec  0.000 ms  0/906 (0%)  sender
[  5]   0.00-10.04  sec   962 KBytes   784 Kbits/sec  0.337 ms  226/906 (25%)  receiver&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist bibliography&quot;&gt;
&lt;ul class=&quot;bibliography&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;TCPIP1&quot;&gt;&lt;/a&gt;[TCPIP1] Kevin Fall, W. Stevens &lt;em&gt;TCP/IP Illustrated: The Protocols, Volume 1&lt;/em&gt;. 2nd edition, Addison-Wesley Professional, 2011&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;J88&quot;&gt;&lt;/a&gt;[J88] V. Jacobson, &lt;em&gt;Congestion Avoidance and Control&lt;/em&gt;, See &lt;a href=&quot;https://ee.lbl.gov/papers/congavoid.pdf&quot; class=&quot;bare&quot;&gt;https://ee.lbl.gov/papers/congavoid.pdf&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;NETEM&quot;&gt;&lt;/a&gt;[NETEM] &lt;a href=&quot;https://wiki.linuxfoundation.org/networking/netem&quot; class=&quot;bare&quot;&gt;https://wiki.linuxfoundation.org/networking/netem&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;IPTABLES&quot;&gt;&lt;/a&gt;[IPTABLES] &lt;em&gt;Using iptables&lt;/em&gt; [online]. &lt;a href=&quot;https://www.netfilter.org/documentation/HOWTO/packet-filtering-HOWTO-7.html&quot; class=&quot;bare&quot;&gt;https://www.netfilter.org/documentation/HOWTO/packet-filtering-HOWTO-7.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;EBADNET&quot;&gt;&lt;/a&gt;[EBADNET] &lt;em&gt;Emulating Bad Networks&lt;/em&gt; [online]. &lt;a href=&quot;https://samwho.dev/blog/emulating-bad-networks/&quot; class=&quot;bare&quot;&gt;https://samwho.dev/blog/emulating-bad-networks/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;DPLTC&quot;&gt;&lt;/a&gt;[DPLTC] &lt;em&gt;Dropping Packets in Ubuntu Linux using tc and iptables&lt;/em&gt; [online]. &lt;a href=&quot;https://sandilands.info/sgordon/dropping-packets-in-ubuntu-linux-using-tc-and-iptables&quot; class=&quot;bare&quot;&gt;https://sandilands.info/sgordon/dropping-packets-in-ubuntu-linux-using-tc-and-iptables&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;RFC1122&quot;&gt;&lt;/a&gt;[RFC1122] R. Braden, ed., &lt;em&gt;Requirements for Internet Hosts—Communication Layers&lt;/em&gt;, Internet RFC 1122/STD 0003, Oct. 1989, See &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc1112&quot; class=&quot;bare&quot;&gt;https://www.rfc-editor.org/rfc/rfc1112&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;RFC2018&quot;&gt;&lt;/a&gt;[RFC2018] M. Mathis, J. Mahdavi, S. Floyd, and A. Romanow, &lt;em&gt;TCP Selective Acknowledgment Options&lt;/em&gt;, Internet RFC 2018, Oct. 1996, See &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc2018&quot; class=&quot;bare&quot;&gt;https://www.rfc-editor.org/rfc/rfc2018&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;RFC2883&quot;&gt;&lt;/a&gt;[RFC2883] S. Floyd, J. Mahdavi, M. Mathis, and M. Podolsky, &lt;em&gt;An Extension to the Selective Acknowledgement (SACK) Option for TCP&lt;/em&gt;, Internet RFC 2883, July 2000, See &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc2883&quot; class=&quot;bare&quot;&gt;https://www.rfc-editor.org/rfc/rfc2883&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;RFC3517&quot;&gt;&lt;/a&gt;[RFC3517] E. Blanton, M. Allman, K. Fall, and L. Wang, &lt;em&gt;A Conservative Selective Acknowledgment (SACK)-Based Loss Recovery Algorithm for TCP&lt;/em&gt;, Internet RFC 3517, Apr. 2003, See &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc3517&quot; class=&quot;bare&quot;&gt;https://www.rfc-editor.org/rfc/rfc3517&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;RFC3522&quot;&gt;&lt;/a&gt;[RFC3522] R. Ludwig and M. Meyer, &lt;em&gt;The Eifel Detection Algorithm for TCP&lt;/em&gt;, Internet RFC 3522 (experimental), Apr. 2003.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;RFC5681&quot;&gt;&lt;/a&gt;[RFC5681] M. Allman, V. Paxson, E. Blanton, &lt;em&gt;TCP Congestion Control&lt;/em&gt;, Internet RFC 5681, Sept. 2009, See &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc5681&quot; class=&quot;bare&quot;&gt;https://www.rfc-editor.org/rfc/rfc5681&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;RFC5682&quot;&gt;&lt;/a&gt;[RFC5682] P. Sarolahti, M. Kojo, K. Yamamoto, and M. Hata, &lt;em&gt;Forward RTORecovery (F-RTO): An Algorithm for Detecting Spurious Retransmission Timeouts with TCP&lt;/em&gt;, Internet RFC 5682, Sept. 2009.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;RFC6298&quot;&gt;&lt;/a&gt;[RFC6298] V. Paxson, M. Allman, and J. Chu, &lt;em&gt;Computing TCP’s Retransmission Timer&lt;/em&gt;, Internet RFC 6298, June 2011, See &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc6298&quot; class=&quot;bare&quot;&gt;https://www.rfc-editor.org/rfc/rfc6298&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;J03&quot;&gt;&lt;/a&gt;[J03] S. Jaiswal et al. &lt;em&gt;Measurement and Classification of Out-of-Sequence Packets in a Tier-1 IP Backbone&lt;/em&gt;, Proc. IEEE INFOCOM, Apr. 2003.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;LLY07&quot;&gt;&lt;/a&gt;[LLY07] K. Leung, V. Li, and D. Yang &quot;An Overview of Packet Reordering in Transmission Control Protocol (TCP): Problems, Solutions and Challenges&quot;. &lt;em&gt;IEEE Trans. Parallel and Distributed Systems&lt;/em&gt;, 18(4), Apr. 2007.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;TZZ05&quot;&gt;&lt;/a&gt;[TZZ05] K. Tan and Q. Zhang &lt;em&gt;STODER: A Robust and Efficient Algorithm for Handling Spurious Timeouts in TCP&lt;/em&gt;. Proc. IEEE Globecomm, Dec. 2005.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><category term="networking" /><category term="networking" /><category term="tcp" /></entry><entry><title type="html">TCP/IP: TCP Connection Management</title><link href="https://blog.codefarm.me/2023/01/10/tcp-ip-tcp-connection-management/" rel="alternate" type="text/html" title="TCP/IP: TCP Connection Management" /><published>2023-01-10T10:14:59+08:00</published><updated>2023-01-10T10:14:59+08:00</updated><id>https://blog.codefarm.me/2023/01/10/tcp-ip--tcp-connection-management</id><content type="html" xml:base="https://blog.codefarm.me/2023/01/10/tcp-ip-tcp-connection-management/">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;TCP is a unicast &lt;strong&gt;connection-oriented&lt;/strong&gt; protocol.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Before either end can send data to the other, a connection must be established between them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;During connection establishment, several options can be exchanged between the two endpoints regarding the parameters of the connection.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Some options are allowed to be sent only when the connection is established, and others can be sent later.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Because of its management of &lt;strong&gt;connection state&lt;/strong&gt; (information about the connection kept by both endpoints), TCP is a considerably more complicated protocol than UDP.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;UDP is a &lt;strong&gt;connectionless&lt;/strong&gt; protocol that involves no connection establishment or termination.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of the major differences between the two is the amount of detail required to handle the various TCP states properly: when connections are created, terminated normally, and reset without warning.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Recall that TCP&amp;#8217;s service model is a byte stream. TCP detects and repairs essentially all the data transfer problems that may be introduced by packet loss, duplication, or errors at the IP layer (or below).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#tcp-connection-establishment-and-termination&quot;&gt;1. TCP Connection Establishment and Termination&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#tcp-half-close&quot;&gt;1.1. TCP Half-Close&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#simultaneous-open-and-close&quot;&gt;1.2. Simultaneous Open and Close&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#initial-sequence-number-isn&quot;&gt;1.3. Initial Sequence Number (ISN)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#example&quot;&gt;1.4. Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#timeout-of-connection-establishment&quot;&gt;1.5. Timeout of Connection Establishment&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#tcp-options&quot;&gt;2. TCP Options&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#maximum-segment-size-mss-option&quot;&gt;2.1. Maximum Segment Size (MSS) Option&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#selective-acknowledgment-sack-options&quot;&gt;2.2. Selective Acknowledgment (SACK) Options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#window-scale-wscale-or-wsopt-option&quot;&gt;2.3. Window Scale (WSCALE or WSOPT) Option&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#timestamps-option-and-protection-against-wrapped-sequence-numbers-paws&quot;&gt;2.4. Timestamps Option and Protection against Wrapped Sequence Numbers (PAWS)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#user-timeout-uto-option&quot;&gt;2.5. User Timeout (UTO) Option&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#authentication-option-tcp-ao&quot;&gt;2.6. Authentication Option (TCP-AO)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#path-mtu-discovery-with-tcp&quot;&gt;3. Path MTU Discovery with TCP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#tcp-state-transitions&quot;&gt;4. TCP State Transitions&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#time_wait-2msl-wait-state&quot;&gt;4.1. TIME_WAIT (2MSL Wait) State&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#quiet-time-concept&quot;&gt;4.2. Quiet Time Concept&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#fin_wait_2-state&quot;&gt;4.3. FIN_WAIT_2 State&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#simultaneous-open-and-close-transitions&quot;&gt;4.4. Simultaneous Open and Close Transitions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#reset-segments&quot;&gt;5. Reset Segments&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#connection-request-to-nonexistent-port&quot;&gt;5.1. Connection Request to Nonexistent Port&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#aborting-a-connection&quot;&gt;5.2. Aborting a Connection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#tcp-reset-attack&quot;&gt;5.3. TCP reset attack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#half-open-connections&quot;&gt;5.4. Half-Open Connections&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#time-wait-assassination-twa&quot;&gt;5.5. TIME-WAIT Assassination (TWA)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#tcp-server-operation&quot;&gt;6. TCP Server Operation&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#tcp-port-numbers&quot;&gt;6.1. TCP Port Numbers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#restricting-local-ip-addresses&quot;&gt;6.2. Restricting Local IP Addresses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#restricting-foreign-endpoints&quot;&gt;6.3. Restricting Foreign Endpoints&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#incoming-connection-queue&quot;&gt;6.4. Incoming Connection Queue&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#tcp-syn-flood-dos-attack&quot;&gt;7. TCP SYN flood DoS attack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#segmentation-offloading&quot;&gt;Appendix A: Segmentation Offloading&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#references&quot;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;tcp-connection-establishment-and-termination&quot;&gt;1. TCP Connection Establishment and Termination&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A TCP &lt;strong&gt;&lt;em&gt;connection&lt;/em&gt;&lt;/strong&gt; is defined to be a 4-tuple consisting of two IP addresses and two port numbers. More precisely, it is a pair of &lt;em&gt;endpoints&lt;/em&gt; or &lt;em&gt;sockets&lt;/em&gt; where each endpoint is identified by an (IP address, port number) pair.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A connection typically goes through three phases: setup, data transfer (called &lt;em&gt;established&lt;/em&gt;), and teardown (closing).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/tcp-ip/tcp-connection-management/tcp-connection-establishment-and-termination.png&quot; alt=&quot;A normal TCP connection establishment and termination&quot; width=&quot;45%&quot; height=&quot;45%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. A normal TCP connection establishment and termination (without any data transfer). Usually, the client initiates a three-way handshake to exchange initial sequence numbers carried on SYN segments for the client and server (ISN(c) and ISN(s), respectively). The connection terminates after each side has sent a FIN and received an acknowledgment for it.&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To establish a TCP connection, the following events usually take place:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;The &lt;strong&gt;&lt;em&gt;active opener&lt;/em&gt;&lt;/strong&gt; (normally called the client) sends a SYN segment (i.e., a TCP/IP packet with the &lt;em&gt;SYN&lt;/em&gt; bit field turned on in the TCP header) specifying the port number of the peer to which it wants to connect and the client&amp;#8217;s initial sequence number or ISN(c).&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It typically sends one or more options at this point.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is segment 1.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The server responds with its own SYN segment containing its initial sequence number (ISN(s)).&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is segment 2.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The server also acknowledges the client&amp;#8217;s SYN by ACKing ISN(c) plus 1.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A SYN consumes one sequence number and is retransmitted if lost.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The client must acknowledge this SYN from the server by ACKing ISN(s) plus 1.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is segment 3.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These three segments complete the connection establishment. This is often called the &lt;strong&gt;&lt;em&gt;three-way handshake&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Its main purposes are to let each end of the connection know that a connection is starting and the special details that are carried as options, and to exchange the ISNs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The side that sends the first SYN is said to perform an &lt;strong&gt;active open&lt;/strong&gt;. As mentioned, this is typically a client.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The other side, which receives this SYN and sends the next SYN, performs a &lt;strong&gt;passive open&lt;/strong&gt;. It is most commonly called the server.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There is a supported but unusual &lt;strong&gt;simultaneous open&lt;/strong&gt; when both sides can do an active open at the same time and become both clients and servers.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Either end can initiate a close operation, and simultaneous closes are also supported but are rare.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Traditionally, it was most common for the client to initiate a close.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;However, other servers (e.g., Web servers) initiate a close after they have completed a request.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Usually a close operation starts with an application indicating its desire to terminate its connection (e.g., using the &lt;code&gt;close()&lt;/code&gt; system call).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The closing TCP initiates the close operation by sending a FIN segment (i.e., a TCP segment with the &lt;em&gt;FIN&lt;/em&gt; bit field set).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The complete close operation occurs after both sides have completed the close:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;The &lt;strong&gt;active closer&lt;/strong&gt; sends a FIN segment specifying the current sequence number the receiver expects to see (&lt;em&gt;K&lt;/em&gt;).&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The FIN also includes an ACK for the last data sent in the other direction (labeled &lt;em&gt;L&lt;/em&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;strong&gt;passive closer&lt;/strong&gt; responds by ACKing value &lt;em&gt;K + 1&lt;/em&gt; to indicate its successful receipt of the active closer&amp;#8217;s FIN.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At this point, the application is notified that the other end of its connection has performed a close.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Typically this results in the application initiating its own close operation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The passive closer then effectively becomes another active closer and sends its own FIN. The sequence number is equal to &lt;em&gt;L&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To complete the close, the final segment contains an ACK for the last FIN.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that if a FIN is lost, it is retransmitted until an ACK for it is received.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While it takes three segments to establish a connection, it takes four to terminate one.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is also possible for the connection to be in a &lt;em&gt;half-open&lt;/em&gt; state, although this is not common. This reason is that TCP&amp;#8217;s data communications model is bidirectional, meaning it is possible to have only one of the two directions operating.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;em&gt;half-close&lt;/em&gt; operation in TCP closes only a single direction of the data flow. Two half-close operations together close the entire connection. The rule is that either end can send a FIN when it is done sending data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When a TCP receives a FIN, it must notify the application that the other end has terminated that direction of data flow. The sending of a FIN is normally the result of the application issuing a close operation, which typically causes both directions to close.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The seven segments we have seen are baseline overheads for any TCP connection that is established and cleared gracefully.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;When a small amount of data needs to be exchanged, it is now apparent why some applications prefer to use UDP because of its ability to send and receive data without establishing connections.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;However, such applications are then faced with handling their own error repair features, congestion management, and flow control.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;tcp-half-close&quot;&gt;1.1. TCP Half-Close&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;TCP supports a half-close operation. Few applications require this capability, so it is not common.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To use this feature, the API must provide a way for the application to say, essentially, &quot;I am done sending data, so send a FIN to the other end, but I still want to receive data from the other end, until it sends me a FIN&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Berkeley sockets API supports half-close, if the application calls the &lt;code&gt;shutdown()&lt;/code&gt; function instead of calling the more typical &lt;code&gt;close()&lt;/code&gt; function. Most applications, however, terminate both directions of the connection by calling &lt;code&gt;close&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/tcp-ip/tcp-connection-management/tcp-half-close-operation.png&quot; alt=&quot;TCP half close&quot; width=&quot;45%&quot; height=&quot;45%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2. With the TCP half-close operation, one direction of the connection can terminate while the other continues until it is closed. Few applications use this feature.&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;simultaneous-open-and-close&quot;&gt;1.2. Simultaneous Open and Close&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is possible, although highly improbable unless specifically arranged, for two applications to perform an active open to each other at the same time. If this happens, it is called a &lt;strong&gt;simultaneous open&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Each end must have transmitted a SYN before receiving a SYN from the other side; the SYNs must pass each other on the network.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This scenario also requires each end to have an IP address and port number that are known to the other end, which is rare (except for the firewall &lt;em&gt;hole-punching&lt;/em&gt; techniques).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A simultaneous open requires the exchange of four segments, one more than the normal three-way handshake.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Also note that we do not call either end a client or a server, because both ends act as client and server.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/tcp-ip/tcp-connection-management/tcp-simultaneous-open.png&quot; alt=&quot;TCP simultaneous open&quot; width=&quot;45%&quot; height=&quot;45%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 3. Segments exchanged during simultaneous open. One additional segment is required compared to the ordinary connection establishment procedure. The SYN bit field is on in each segment until an ACK for it is received.&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With a &lt;strong&gt;simultaneous close&lt;/strong&gt; the same number of segments are exchanged as in the normal close. The only real difference is that the segment sequence is interleaved instead of sequential.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/tcp-ip/tcp-connection-management/tcp-simultaneous-close.png&quot; alt=&quot;TCP simultaneous close&quot; width=&quot;45%&quot; height=&quot;45%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 4. Segments exchanged during simultaneous close work like a conventional close, but the segment ordering is interleaved.&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;initial-sequence-number-isn&quot;&gt;1.3. Initial Sequence Number (ISN)&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When a connection is open, any segment with the appropriate two IP addresses and port numbers is accepted as valid provided the sequence number is valid (i.e., within the window) and the checksum is OK.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Before each end sends its SYN to establish the connection, it chooses an ISN for that connection.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The ISN should change over time, so that each connection has a different one.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;[RFC0793] specifies that the ISN should be viewed as a 32-bit counter that increments by 1 every 4μs.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The purpose of doing this is to arrange for the sequence numbers for segments on one connection to not overlap with sequence numbers on a another (new) identical connection.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In particular, new sequence numbers must not be allowed to overlap between different &lt;em&gt;instantiations&lt;/em&gt; (or &lt;em&gt;incarnations&lt;/em&gt;) of the &lt;em&gt;same&lt;/em&gt; connection.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In modern systems, the ISN is typically selected in a semirandom way.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If a connection had one of its segments delayed for a long period of time and closed, but then opened again with the same 4-tuple, it is conceivable that the delayed segment could reenter the new connection&amp;#8217;s data stream as valid data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;By taking steps to avoid overlap in sequence numbers between connection instantiations, we can try to minimize this risk.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It does suggest, however, that an application with a very great need for data integrity should employ its own CRCs or checksums at the application layer to ensure that its own data has been transferred without error.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is generally good practice in any case, and it is commonly done for large files.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The connection 4-tuple as well as the currently active window of sequence numbers is all that is required to form a TCP segment that is considered valid to a communicating TCP endpoint, which represents a form of vulnerability for TCP:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;anyone can forge a TCP segment and, if the sequence numbers, IP addresses, and port numbers are chosen appropriately, can interrupt a TCP connection [RFC5961].&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;One way of repelling this is to make the initial sequence number (or ephemeral port number [RFC6056]) relatively hard to guess. Another is encryption.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;example&quot;&gt;1.4. Example&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;telnet github.io 80
&lt;span class=&quot;go&quot;&gt;Trying 185.199.108.153...
Connected to github.io.
Escape character is '^]'.
^]
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;telnet&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;q
&lt;span class=&quot;go&quot;&gt;Connection closed.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;tcpdump &lt;span class=&quot;nt&quot;&gt;-ntSv&lt;/span&gt; host github.io
&lt;span class=&quot;go&quot;&gt;IP (tos 0x10, ttl 64, id 29406, offset 0, flags [DF], proto TCP (6), length 60)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.51610 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;185.199.108.153.80: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x42b8 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0xd5cf&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;2440985640, win 64240, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 1460,sackOK,TS val 1617951924 ecr 0,nop,wscale 7], length 0
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 128, id 44533, offset 0, flags [none], proto TCP (6), length 44)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    185.199.108.153.80 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.51610: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x11dd &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;correct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1194142207, ack 2440985641, win 64240, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 1460], length 0
&lt;span class=&quot;go&quot;&gt;IP (tos 0x10, ttl 64, id 29407, offset 0, flags [DF], proto TCP (6), length 40)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.51610 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;185.199.108.153.80: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x42a4 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0x299a&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, ack 1194142208, win 64240, length 0
&lt;span class=&quot;go&quot;&gt;IP (tos 0x10, ttl 64, id 29408, offset 0, flags [DF], proto TCP (6), length 40)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.51610 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;185.199.108.153.80: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;F.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x42a4 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0x2999&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;2440985641, ack 1194142208, win 64240, length 0
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 128, id 44534, offset 0, flags [none], proto TCP (6), length 40)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    185.199.108.153.80 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.51610: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x299a &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;correct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, ack 2440985642, win 64239, length 0
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 128, id 44535, offset 0, flags [none], proto TCP (6), length 40)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    185.199.108.153.80 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.51610: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;FP.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x2991 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;correct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1194142208, ack 2440985642, win 64239, length 0
&lt;span class=&quot;go&quot;&gt;IP (tos 0x10, ttl 64, id 0, offset 0, flags [DF], proto TCP (6), length 40)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.51610 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;185.199.108.153.80: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x2998 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;correct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, ack 1194142209, win 64240, length 0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;timeout-of-connection-establishment&quot;&gt;1.5. Timeout of Connection Establishment&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are several circumstances in which a connection cannot be established. One obvious case is when the server host is down.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To simulate this scenario, we issue our telnet command to a nonexistent host in the same subnet.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If we do this without modifying the ARP table, the client exits with a &quot;No route to host&quot; error message, generated because no ARP reply is ever returned for the ARP request.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If, however, we place an ARP entry for a nonexistent host in the ARP table first, the ARP request is not sent, and the system immediately attempts to contact the nonexistent host with TCP/IP. First, the commands:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ip neigh add 192.168.91.120 lladdr 00:00:1a:1b:1c:1d dev ens32&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here the MAC address &lt;code&gt;00:00:1a:1b:1c:1d&lt;/code&gt; was chosen simply as a MAC address not being used on the LAN; it is of no special consequence.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The timeout occurs about 2 minutes after the initial command.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;time &lt;/span&gt;telnet 192.168.91.120 80
&lt;span class=&quot;go&quot;&gt;Trying 192.168.91.120...
telnet: Unable to connect to remote host: Connection timed out

real	2m11.038s
user	0m0.002s
sys	0m0.001s&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Because there is no host to respond, all of the segments generated are from the client.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;tcpdump &lt;span class=&quot;nt&quot;&gt;-ntttSvv&lt;/span&gt; host 192.168.91.120
&lt;span class=&quot;go&quot;&gt; 00:00:00.000000 IP (tos 0x10, ttl 64, id 28344, offset 0, flags [DF], proto TCP (6), length 60)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.47586 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.120.80: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x3878 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0xb088&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;54668487, win 64240, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 1460,sackOK,TS val 1492721928 ecr 0,nop,wscale 7], length 0
&lt;span class=&quot;go&quot;&gt; 00:00:01.018720 IP (tos 0x10, ttl 64, id 28345, offset 0, flags [DF], proto TCP (6), length 60)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.47586 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.120.80: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x3878 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0xac8d&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;54668487, win 64240, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 1460,sackOK,TS val 1492722947 ecr 0,nop,wscale 7], length 0
&lt;span class=&quot;go&quot;&gt; 00:00:02.016512 IP (tos 0x10, ttl 64, id 28346, offset 0, flags [DF], proto TCP (6), length 60)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.47586 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.120.80: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x3878 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0xa4ad&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;54668487, win 64240, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 1460,sackOK,TS val 1492724963 ecr 0,nop,wscale 7], length 0
&lt;span class=&quot;go&quot;&gt; 00:00:04.096269 IP (tos 0x10, ttl 64, id 28347, offset 0, flags [DF], proto TCP (6), length 60)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.47586 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.120.80: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x3878 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0x94ad&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;54668487, win 64240, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 1460,sackOK,TS val 1492729059 ecr 0,nop,wscale 7], length 0
&lt;span class=&quot;go&quot;&gt; 00:00:08.191479 IP (tos 0x10, ttl 64, id 28348, offset 0, flags [DF], proto TCP (6), length 60)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.47586 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.120.80: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x3878 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0x74ad&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;54668487, win 64240, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 1460,sackOK,TS val 1492737251 ecr 0,nop,wscale 7], length 0
&lt;span class=&quot;go&quot;&gt; 00:00:16.128796 IP (tos 0x10, ttl 64, id 28349, offset 0, flags [DF], proto TCP (6), length 60)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.47586 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.120.80: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x3878 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0x35ac&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;54668487, win 64240, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 1460,sackOK,TS val 1492753380 ecr 0,nop,wscale 7], length 0
&lt;span class=&quot;go&quot;&gt; 00:00:34.047254 IP (tos 0x10, ttl 64, id 28350, offset 0, flags [DF], proto TCP (6), length 60)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.47586 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.120.80: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x3878 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0xb0ac&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;54668487, win 64240, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 1460,sackOK,TS val 1492787427 ecr 0,nop,wscale 7], length 0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The number of times to retry an initial SYN can be configured on some systems. In Linux,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the system configuration variable &lt;code&gt;net.ipv4.tcp_syn_retries&lt;/code&gt; gives the maximum number of times to attempt to resend a SYN segment during an active open.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A corresponding value called &lt;code&gt;net.ipv4.tcp_synack_retries&lt;/code&gt; gives the maximum number of times to attempt to resend a SYN + ACK segment when responding to a peer&amp;#8217;s active open request.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It can also be used on an individual connection basis by setting the Linux-specific TCP_SYNCNT socket option.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;sysctl net.ipv4.tcp_syn_retries net.ipv4.tcp_synack_retries
&lt;span class=&quot;go&quot;&gt;net.ipv4.tcp_syn_retries = 6
net.ipv4.tcp_synack_retries = 5

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;man 7 tcp
&lt;span class=&quot;c&quot;&gt;...
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;TCP_SYNCNT (since Linux 2.4)
       Set the number of SYN retransmits that TCP should send before aborting the attempt to connect.  It cannot exceed 255.  This option should not be used
       in code intended to be portable.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;tcp-options&quot;&gt;2. TCP Options&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The only options defined in the original TCP specification are the &lt;em&gt;End of Option List&lt;/em&gt; (EOL), the &lt;em&gt;No Operation&lt;/em&gt; (NOP), and the &lt;em&gt;Maximum Segment Size&lt;/em&gt; (MSS) options.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 1. The TCP option values. Up to 40 bytes are available to hold options.&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 10%;&quot;&gt;
&lt;col style=&quot;width: 10%;&quot;&gt;
&lt;col style=&quot;width: 20%;&quot;&gt;
&lt;col style=&quot;width: 10%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Kind&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Length&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Name&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Reference&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Description and Purpose&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;EOL&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;[RFC0793]&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;End of Option List&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;NOP&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;[RFC0793]&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;No Operation (used for padding)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;4&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;MSS&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;[RFC0793]&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Maximum Segment Size&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;WSOPT&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;[RFC1323]&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Window Scaling Factor (left-shift amount on window)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;4&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;SACK-Permitted&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;[RFC2018]&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Sender supports SACK options&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;5&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Var.&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;SACK&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;[RFC2018]&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;SACK block (out-of-order data received)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;8&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;10&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;TSOPT&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;[RFC1323]&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Timestamps option&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;28&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;4&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;UTO&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;[RFC5482]&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;User Timeout (abort after idle time)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;29&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Var.&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;TCP-AO&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;[RFC5925]&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Authentication option (using various algorithms)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;253&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Var.&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Experimental&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;[RFC4727]&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Reserved for experimental use&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;254&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Var.&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Experimental&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;[RFC4727]&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Reserved for experimental use&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Every option begins with a 1-byte &lt;em&gt;kind&lt;/em&gt; that specifies the type of option.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Options that are not understood are simply ignored, according to [RFC1122].&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The options with a &lt;em&gt;kind&lt;/em&gt; value of 0 and 1 occupy a single byte.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The other options have a &lt;em&gt;len&lt;/em&gt; byte that follows the &lt;em&gt;kind&lt;/em&gt; byte. The length is the total length, including the &lt;em&gt;kind&lt;/em&gt; and &lt;em&gt;len&lt;/em&gt; bytes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The reason for the NOP option is to allow the sender to pad fields to a multiple of 4 bytes, if it needs to.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Remember that the TCP header&amp;#8217;s length is always required to be a multiple of 32 bits because the TCP &lt;em&gt;Header Length&lt;/em&gt; field uses that unit.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The EOL option indicates the end of the list and that no further processing of the options list is to be performed.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;maximum-segment-size-mss-option&quot;&gt;2.1. Maximum Segment Size (MSS) Option&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The maximum segment size (MSS) is the largest segment that a TCP is willing to receive from its peer and, consequently, the largest size its peer should ever use when sending.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The MSS value counts only TCP data bytes and does not include the sizes of any associated TCP or IP header [RFC0879].&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When a connection is established, each end usually announces its MSS in an MSS option carried with its SYN segment.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The option allows for 16 bits to be used to specify the MSS value.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If no MSS option is provided, a default value of 536 bytes is used.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Recall the rule that requires any host to be capable of processing IPv4 datagrams at least as large as 576.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With minimum-size IPv4 and TCP headers, a TCP using a sending MSS size of 536 bytes produces an IPv4 datagram of size 20 + 20 + 536 = 576 bytes.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The MSS value 1460 is typical for IPv4.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The resulting IPv4 datagram is normally 40 bytes larger (1500 bytes total, the typical MTU size for Ethernet and path MTU for the Internet): 20 bytes for the TCP header and 20 bytes for the IPv4 header.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When IPv6 is used, the MSS is usually 1440, 20 bytes less because of the larger IPv6 header.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The special MSS value of 65535 can be used with IPv6 jumbograms to indicate an effective MSS of infinity [RFC2675].&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this case the SMSS will be determined as the PMTU minus 60 bytes (40 bytes for the IPv6 header and 20 bytes for the TCP header).&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Note that the MSS option is not a negotiation between one TCP and its peer; it is a limit.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When one TCP gives its MSS option to the other, it is indicating its unwillingness to accept any segments larger than that size for the duration of the connection.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;selective-acknowledgment-sack-options&quot;&gt;2.2. Selective Acknowledgment (SACK) Options&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Because it uses cumulative ACKs, TCP with a sliding window is never able to acknowledge data it has received correctly but that is not contiguous, in terms of sequence numbers, with data it has received previously.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In such cases, the TCP receiver is said to have &lt;em&gt;holes&lt;/em&gt; in its received data queue.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A receiving TCP prevents applications from consuming data beyond a hole because of the byte stream abstraction it provides.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If a TCP sender were able to learn of the existence of holes (and out-of-sequence data blocks beyond holes in the sequence space) at the receiver, it could better select which particular TCP segments to retransmit when segments are lost or otherwise missing at the receiver.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The TCP selective acknowledgment (SACK) options [RFC2018][RFC2883] provide this capability.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The scheme works effectively, however, only if the TCP sender logic is able to make effective use of the SACK information it receives from a SACK-capable receiver.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A TCP learns that its peer is capable of advertising SACK information by receiving the &lt;em&gt;SACK-Permitted&lt;/em&gt; option in a SYN (or SYN + ACK) segment.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Once this has taken place, the TCP receiving out-of-sequence data may provide a &lt;em&gt;SACK&lt;/em&gt; option that describes the out-of-sequence data to help its peer perform retransmissions more efficiently.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;SACK information contained in a SACK option consists of a range of sequence numbers representing data blocks the receiver has successfully received.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Each range is called a SACK &lt;em&gt;block&lt;/em&gt; and is represented by a pair of 32-bit sequence numbers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Thus, a &lt;em&gt;SACK&lt;/em&gt; option containing &lt;em&gt;n&lt;/em&gt; SACK blocks is (&lt;em&gt;8n + 2&lt;/em&gt;) bytes long. Two bytes are used to hold the kind and length of the &lt;em&gt;SACK&lt;/em&gt; option.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Because of the limited amount of space available in the option space of a TCP header, the maximum number of SACK blocks available to be sent in a single segment is three (assuming the &lt;em&gt;Timestamps&lt;/em&gt; option is also used, which is typical for modern TCP implementations).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Although the &lt;em&gt;SACK-Permitted&lt;/em&gt; option is only ever sent in a SYN segment, the SACK blocks themselves may be sent in any segment once the sender has sent the &lt;em&gt;SACK-Permitted&lt;/em&gt; option.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The operation of SACK is most easily (and importantly) related to the error and congestion control operations of TCP.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;window-scale-wscale-or-wsopt-option&quot;&gt;2.3. Window Scale (WSCALE or WSOPT) Option&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;em&gt;Window Scale&lt;/em&gt; option (denoted &lt;em&gt;WSCALE&lt;/em&gt; or &lt;em&gt;WSOPT&lt;/em&gt;) &lt;a href=&quot;#RFC1323&quot;&gt;[RFC1323]&lt;/a&gt; effectively increases the capacity of the TCP &lt;em&gt;Window Advertisement&lt;/em&gt; field from 16 to about 30 bits.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;text&quot;&gt;TCP Window Scale Option (WSopt):

   Kind: 3 Length: 3 bytes

          +---------+---------+---------+
          | Kind=3  |Length=3 |shift.cnt|
          +---------+---------+---------+&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Instead of changing the field size, however, the header still holds a 16-bit value, and an option is defined that applies a scaling factor to the 16-bit value.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This factor effectively left-shifts the window field value by the scale factor (the &lt;em&gt;shift.cnt&lt;/em&gt; bits).&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This, in effect, multiplies the window value by the value 2&lt;sup&gt;s&lt;/sup&gt;, where &lt;em&gt;s&lt;/em&gt; is the scale factor.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The 1-byte shift count is between 0 and 14 (inclusive).&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A shift count of 0 indicates no scaling.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The maximum scale value of 14 provides for a maximum window of 1,073,725,440 bytes (65,535 × 2&lt;sup&gt;14&lt;/sup&gt;), close to 1,073,741,823 (2&lt;sup&gt;30&lt;/sup&gt; −1), effectively 1GB.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;TCP then maintains the &lt;em&gt;real&lt;/em&gt; window size internally as a 32-bit value.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This option can appear only in a SYN segment, so the scale factor is fixed in each direction when the connection is established.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;To enable window scaling, both ends must send the option in their SYN segments.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The end doing the active open sends the option in its SYN, but the end doing the passive open can send the option only if the received SYN specifies the option.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The scale factor can be different in each direction.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If the end doing the active open sends a nonzero scale factor but does not receive a &lt;em&gt;Window Scale&lt;/em&gt; option from the other end, it sets its send and receive scale values to 0.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This lets systems that do not understand the option interoperate with systems that do.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Assume we are using the &lt;em&gt;Window Scale&lt;/em&gt; option, with a shift count of &lt;em&gt;S&lt;/em&gt; for sending and a shift count of &lt;em&gt;R&lt;/em&gt; for receiving.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Then every 16-bit advertised window that we receive from the other end is left-shifted by &lt;em&gt;R&lt;/em&gt; bits to obtain the real advertised window size.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Every time we send a window advertisement to the other end, we take our real 32-bit window size and right-shift it &lt;em&gt;S&lt;/em&gt; bits, placing the resulting 16-bit value in the TCP header.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The shift count is automatically chosen by TCP, based on the size of the receive buffer. The size of this buffer is set by the system, but the capability is normally provided for the application to change it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;em&gt;Window Scale&lt;/em&gt; option is most relevant when TCP is used to provide bulk data transfer over networks with large-bandwidth-delay products (i.e., those with a product of round-trip time and bandwidth being relatively large).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;IP (tos 0xc0, ttl 200, id 64132, offset 0, flags [DF], proto TCP (6), length 52, bad cksum 0 (-&amp;gt;&lt;/span&gt;f66f&lt;span class=&quot;o&quot;&gt;)!)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;    10.170.109.10.50979 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;175.24.154.66.443: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0xc135 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0x82a4&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;3917970949, win 64240, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 1460,nop,wscale 8,nop,nop,sackOK], length 0
&lt;span class=&quot;go&quot;&gt;IP (tos 0x20, ttl 52, id 0, offset 0, flags [DF], proto TCP (6), length 52)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    175.24.154.66.443 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;10.170.109.10.50979: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0xdacf &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;correct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;2258807318, ack 3917970950, win 29200, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 1440,nop,nop,sackOK,nop,wscale 7], length 0
&lt;span class=&quot;gp&quot;&gt;IP (tos 0xc0, ttl 200, id 64133, offset 0, flags [DF], proto TCP (6), length 40, bad cksum 0 (-&amp;gt;&lt;/span&gt;f67a&lt;span class=&quot;o&quot;&gt;)!)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;    10.170.109.10.50979 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;175.24.154.66.443: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0xc129 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0x8b99&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, ack 2258807319, win 517, length 0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;timestamps-option-and-protection-against-wrapped-sequence-numbers-paws&quot;&gt;2.4. Timestamps Option and Protection against Wrapped Sequence Numbers (PAWS)&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;em&gt;Timestamps&lt;/em&gt; option (sometimes called the &lt;em&gt;Timestamp&lt;/em&gt; option and written as &lt;em&gt;TSOPT&lt;/em&gt; or &lt;em&gt;TSopt&lt;/em&gt;) lets the sender place two 4-byte timestamp values in every segment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The receiver reflects these values in the acknowledgment, allowing the sender to calculate an estimate of the connection&amp;#8217;s RTT for each ACK received.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We must say &quot;each ACK received&quot; and not &quot;each segment&quot; because TCP often acknowledges multiple segments per ACK.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When using the &lt;em&gt;Timestamps&lt;/em&gt; option,&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the sender places a 32-bit value in the &lt;em&gt;Timestamp Value&lt;/em&gt; field (called &lt;em&gt;TSV&lt;/em&gt; or &lt;em&gt;TSval&lt;/em&gt;) in the first part of the &lt;em&gt;TSOPT&lt;/em&gt;,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;and the receiver echoes this back unchanged in the second &lt;em&gt;Timestamp Echo Retry&lt;/em&gt; field (called &lt;em&gt;TSER&lt;/em&gt; or &lt;em&gt;TSecr&lt;/em&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TCP headers containing this option increase by 10 bytes (8 bytes for the two timestamp values and 2 to indicate the option value and length).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The timestamp is a monotonically increasing value.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Because the receiver simply echoes what it receives, it does not care what the timestamp units or values actually are.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This option does not require any form of clock synchronization between the two hosts.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[RFC1323] recommends that the sender increment the timestamp value by at least 1 every second.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The main reason for wishing to calculate a good estimate of the connection&amp;#8217;s RTT is to set the retransmission timeout, which tells TCP when it should try resending a segment that is likely lost.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;With the &lt;em&gt;Timestamps&lt;/em&gt; option, we can get relatively fine-grain measurements of the RTT.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Prior to the creation of the &lt;em&gt;Timestamps&lt;/em&gt; option, most TCPs would perform just one RTT sample per window of data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;With the &lt;em&gt;Timestamps&lt;/em&gt; option, more samples can be taken, leading to the potential of a better RTT estimate (see [RFC1323] and [RFC6298]).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;em&gt;Timestamps&lt;/em&gt; option allows for more frequent RTT samples, but it also provides a way for the receiver to avoid receiving old segments and considering them as valid, which is called &lt;em&gt;Protection Against Wrapped Sequence Numbers&lt;/em&gt; (PAWS), and it is described in [RFC1323] along with the &lt;em&gt;Timestamps&lt;/em&gt; option.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;user-timeout-uto-option&quot;&gt;2.5. User Timeout (UTO) Option&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;em&gt;User Timeout&lt;/em&gt; (UTO) option is a relatively new TCP capability described in [RFC5482]. The UTO value (also called &lt;em&gt;USER_TIMEOUT&lt;/em&gt;) specifies the amount of time a TCP sender is willing to wait for an ACK of outstanding data before concluding that the remote end has failed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;USER_TIMEOUT&lt;/em&gt; has traditionally been a local configuration parameter for TCP [RFC0793]. The UTO option allows one TCP to signal its &lt;em&gt;USER_TIMEOUT&lt;/em&gt; value to its connection peer. This allows the receiving TCP to adjust its behavior (e.g., to tolerate a longer period of disrupted connectivity prior to aborting a connection). NAT devices could also interpret such information to help set their connection activity timers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;UTO option values are advisory; just because one end of a connection might wish to use a large or small UTO value does not mean that the other end needs to comply.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;UTO options are included on SYN segments when a connection is established, on the first non-SYN segments, and whenever the &lt;em&gt;USER_TIMEOUT&lt;/em&gt; value is changed. The option value is expressed as a 15-bit value in units of seconds or minutes following a bit field (&lt;em&gt;granularity&lt;/em&gt;) that indicates that the value is in minutes (&lt;em&gt;1&lt;/em&gt;) or seconds (&lt;em&gt;0&lt;/em&gt;). As a relatively new option, it is not yet widely deployed.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;authentication-option-tcp-ao&quot;&gt;2.6. Authentication Option (TCP-AO)&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is an option used to enhance the security of TCP connections. It is designed to enhance and replace an earlier mechanism called &lt;em&gt;TCP-MD5&lt;/em&gt; [RFC2385]. Called the &lt;em&gt;TCP Authentication Option&lt;/em&gt; (TCP-AO) [RFC5925], it uses a cryptographic hash algorithm, in combination with a secret value known to each end of a TCP connection, to authenticate each segment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;TCP-AO improves upon TCP-MD5 by supporting a variety of cryptographic algorithms and identifying changing of keys using in-band signaling. It does not provide a comprehensive key management solution, however. That is, each end still has to have a way to establish a shared set of keys prior to operation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, because it requires creation and distribution of a shared key (and is a relatively new option), it is not yet widely deployed.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;path-mtu-discovery-with-tcp&quot;&gt;3. Path MTU Discovery with TCP&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The path MTU is the minimum MTU on any network segment that is currently in the path between two hosts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Knowing the path MTU can help protocols such as TCP avoid fragmentation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The discovering of the path MTU (PMTUD) is accomplished based on ICMP messages.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We shall use the ICMPv6 Packet Too Big (PTB) terminology to refer to either ICMPv4 Destination Unreachable (Fragmentation Required) or ICMPv6 Packet Too Big messages.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A method that avoids the use of ICMP, called &lt;em&gt;Packetization Layer Path MTU Discovery&lt;/em&gt; (PLPMTUD), can also be used by TCP [RFC4821] or by other transport protocols.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UDP is not usually able to adapt its datagram size because the application specifies the size (i.e., not the transport protocol).&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;TCP, in providing the byte stream abstraction it implements, determines what segment size to use and as a result has a much greater degree of control over the size of IP datagrams that are ultimately generated.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;TCP&amp;#8217;s regular PMTUD process operates as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;When a connection is established, TCP uses the minimum of the MTU of the outgoing interface, or the MSS announced by the other end, as the basis for selecting its &lt;em&gt;send maximum segment size&lt;/em&gt; (SMSS).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PMTUD does not allow TCP to exceed the MSS announced by the other end.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the other end does not specify an MSS, the sender assumes a default of 536 bytes, but this situation is now rare.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is also possible for an implementation to save path MTU information on a per-destination basis to help in selecting its segment size.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Note that the path MTU in each direction of a connection could be different.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Once the initial SMSS is chosen, all IPv4 datagrams sent by TCP on that connection have the IPv4 &lt;em&gt;DF&lt;/em&gt; bit field set.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For TCP/IPv6, this is not necessary because there is no DF bit field; all datagrams are assumed to have it set implicitly.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If a PTB is received, TCP decreases the segment size and retransmits using a different segment size.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If the PTB contains the suggested next-hop MTU, the segment size can be set to the next-hop MTU minus the sizes of the IPv4 (or IPv6) and TCP headers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If the next-hop MTU value is not present (e.g., an older ICMP error was returned that lacks this information), the sender may try a variety of values (e.g., binary-search for a usable value).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This also affects TCP&amp;#8217;s congestion control management.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For PLPMTUD the situation is similar, except PTB messages are not used.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Instead, the protocol performing PMTUD must be able to detect message discards quickly and perform its own datagram size adjustments.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Because routes can change dynamically, when some time has passed since the last decrease of the segment size, a larger value (up to the initial SMSS) can be tried.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Guidance in [RFC1191] and [RFC1981] recommends that this time interval be about 10 minutes.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are a number of problems with PMTUD when it operates in an Internet environment with firewalls that block PTB messages [RFC2923].&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Of the various operational problems with PMTUD, &lt;strong&gt;&lt;em&gt;black holes&lt;/em&gt;&lt;/strong&gt; have been the most problematic, although the situation is improving (in [LS10], 80% of systems studied were able to properly process PTB messages).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;PMTUD &lt;em&gt;black holes&lt;/em&gt; arise when a TCP implementation that depends on the delivery of ICMP messages to adjust its segment size never receives them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This could be for several reasons, including a firewall or NAT configuration that prohibits such ICMP messages from being forwarded.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The consequence is a TCP connection that cannot proceed once it starts to use larger packets.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It can be difficult to diagnose because only large packets cannot be forwarded.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The smaller ones (such as SYN and SYN + ACK packets used to establish the connection) generally succeed.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some TCP implementations have &lt;em&gt;black hole detection&lt;/em&gt;, which amounts to trying a smaller segment size when a segment is retransmitted several times.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We can see the correct behavior of PMTUD when an intermediate router has an MTU less than either of the endpoints’ MSS.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;code&gt;node-1&lt;/code&gt; (a Linux host with local address &lt;code&gt;192.168.91.137&lt;/code&gt;) as a router, disable the router send_redirects, and reduce the MTU from 1500 to 512 bytes.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-1:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;sysctl net.ipv4.ip_forward&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
&lt;span class=&quot;go&quot;&gt;net.ipv4.ip_forward = 1
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;x@node-1:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;sysctl net.ipv4.conf.all.send_redirects&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0
&lt;span class=&quot;go&quot;&gt;net.ipv4.conf.all.send_redirects = 0
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;x@node-1:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;sysctl net.ipv4.conf.ens32.send_redirects&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0
&lt;span class=&quot;go&quot;&gt;net.ipv4.conf.ens32.send_redirects = 0
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;x@node-1:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ip &lt;span class=&quot;nb&quot;&gt;link set &lt;/span&gt;ens32 mtu 512
&lt;span class=&quot;gp&quot;&gt;x@node-1:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;ip &lt;span class=&quot;nb&quot;&gt;link &lt;/span&gt;show ens32
&lt;span class=&quot;gp&quot;&gt;2: ens32: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;mtu 512 qdisc pfifo_fast state UP mode DEFAULT group default qlen 1000
&lt;span class=&quot;go&quot;&gt;    link/ether 00:0c:29:85:26:07 brd ff:ff:ff:ff:ff:ff&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set the default gateway of host &lt;code&gt;node-0&lt;/code&gt; to the intermediate router &lt;code&gt;node-1&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition, we need to tell the client host (&lt;code&gt;node-0&lt;/code&gt;) that small segments are allowed:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;sysctl net.ipv4.route.min_pmtu&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;68&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If we did not perform the operation, Linux would clamp its minimum path MTU at the default value of 552 bytes, which helps avoid certain small MTU attacks .&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The consequence of doing so in our example here is that any packets larger than 512 bytes would be fragmented.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Most modern operating systems support some form of network offloading, where some network processing happens on the NIC instead of the CPU. &lt;a href=&quot;#OFFLOADING&quot;&gt;[OFFLOADING]&lt;/a&gt;&lt;a href=&quot;#SOWE&quot;&gt;[SOWE]&lt;/a&gt;&lt;a href=&quot;#LAB15&quot;&gt;[LAB15]&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Normally this is a great thing. It can free up resources on the rest of the system and let it handle more connections.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you&amp;#8217;re trying to capture traffic it can result in false errors and strange or even missing traffic.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some cards can reassemble traffic. This will manifest itself in Tcpdump/Wireshark as packets that are larger than expected, such as a 2900-byte packet on a network with a 1500-byte MTU.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To disable TCP Segmentation Offload (TSO) for a network device &lt;code&gt;ens32&lt;/code&gt; issue:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ethtool &lt;span class=&quot;nt&quot;&gt;-K&lt;/span&gt; ens32 tso off&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;ip r
&lt;span class=&quot;go&quot;&gt;default via 192.168.91.2 dev ens32
192.168.91.0/24 dev ens32 proto kernel scope link src 192.168.91.128
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ip r del default
&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ip r add default via 192.168.91.137 dev ens32
&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;ip r
&lt;span class=&quot;go&quot;&gt;default via 192.168.91.137 dev ens32
192.168.91.0/24 dev ens32 proto kernel scope link src 192.168.91.128
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;sysctl net.ipv4.route.min_pmtu
&lt;span class=&quot;go&quot;&gt;net.ipv4.route.min_pmtu = 552
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;sysctl net.ipv4.route.min_pmtu&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;68
&lt;span class=&quot;go&quot;&gt;net.ipv4.route.min_pmtu = 68
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ethtool &lt;span class=&quot;nt&quot;&gt;-k&lt;/span&gt; ens32
&lt;span class=&quot;go&quot;&gt;Features for ens32:
rx-checksumming: off
tx-checksumming: on
	tx-checksum-ipv4: off [fixed]
	tx-checksum-ip-generic: on
	tx-checksum-ipv6: off [fixed]
	tx-checksum-fcoe-crc: off [fixed]
	tx-checksum-sctp: off [fixed]
scatter-gather: on
	tx-scatter-gather: on
	tx-scatter-gather-fraglist: off [fixed]
tcp-segmentation-offload: on
	tx-tcp-segmentation: on
	tx-tcp-ecn-segmentation: off [fixed]
	tx-tcp-mangleid-segmentation: off
	tx-tcp6-segmentation: off [fixed]
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;...
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ethtool &lt;span class=&quot;nt&quot;&gt;-K&lt;/span&gt; ens32 tso off&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Send a larger packet of with data size 500 bytes&lt;/p&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
The max tcp segment size will be 512 - 20 (IP header) - 20 (TCP header) = 472, that is the 500 bytes will be fragmented to two segments.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; 500 /dev/random | nc &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; windows.home 6666
&lt;span class=&quot;go&quot;&gt;Ncat: Version 7.80 ( https://nmap.org/ncat )
Ncat: Connected to 10.170.109.10:6666.
Ncat: 500 bytes sent, 0 bytes received in 0.01 seconds.
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;ip r get 10.170.109.10
&lt;span class=&quot;go&quot;&gt;10.170.109.10 via 192.168.91.137 dev ens32 src 192.168.91.128 uid 1000
    cache expires 502sec mtu 512&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The path MTU discovery mechanism finds an appropriate segment size to use when transiting the network where the middle link has a smaller MTU than the endpoints.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;tcpdump &lt;span class=&quot;nt&quot;&gt;-tnv&lt;/span&gt; port 6666 or icmp &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; ens32
&lt;span class=&quot;go&quot;&gt;tcpdump: listening on ens32, link-type EN10MB (Ethernet), snapshot length 262144 bytes&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 64, id 34352, offset 0, flags [DF], proto TCP (6), length 60)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.34196 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;10.170.109.10.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x940b &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0x590e&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;3025740589, win 64240, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 1460,sackOK,TS val 2055433851 ecr 0,nop,wscale 7], length 0
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 63, id 34352, offset 0, flags [DF], proto TCP (6), length 60)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.34196 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;10.170.109.10.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x590e &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;correct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;3025740589, win 64240, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 1460,sackOK,TS val 2055433851 ecr 0,nop,wscale 7], length 0
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 128, id 65296, offset 0, flags [none], proto TCP (6), length 44)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;    10.170.109.10.6666 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.34196: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0xfe8e &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;correct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1730751594, ack 3025740590, win 64240, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 1460], length 0
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 64, id 34353, offset 0, flags [DF], proto TCP (6), length 40)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.34196 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;10.170.109.10.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x93f7 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0x164c&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, ack 1, win 64240, length 0
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 64, id 34354, offset 0, flags [DF], proto TCP (6), length 540)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.34196 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;10.170.109.10.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x95eb &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0xe838&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1:501, ack 1, win 64240, length 500
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 64, id 34355, offset 0, flags [DF], proto TCP (6), length 40)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.34196 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;10.170.109.10.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;F.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x93f7 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0x1457&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;501, ack 1, win 64240, length 0
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 63, id 34353, offset 0, flags [DF], proto TCP (6), length 40)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.34196 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;10.170.109.10.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x164c &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;correct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, ack 1, win 64240, length 0
&lt;span class=&quot;hll&quot;&gt;&lt;span class=&quot;go&quot;&gt;IP (tos 0xc0, ttl 64, id 9583, offset 0, flags [none], proto ICMP (1), length 512)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.137 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128: ICMP 10.170.109.10 unreachable - need to frag &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;mtu 512&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, length 492
&lt;span class=&quot;go&quot;&gt;	IP (tos 0x0, ttl 64, id 34354, offset 0, flags [DF], proto TCP (6), length 540)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.34196 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;10.170.109.10.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1:501, ack 1, win 64240, length 500
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 63, id 34355, offset 0, flags [DF], proto TCP (6), length 40)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.34196 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;10.170.109.10.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;F.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x1457 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;correct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;501, ack 1, win 64240, length 0
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 128, id 65297, offset 0, flags [none], proto TCP (6), length 40)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;    10.170.109.10.6666 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.34196: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x164c &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;correct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, ack 1, win 64240, length 0
&lt;span class=&quot;hll&quot;&gt;&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 64, id 34356, offset 0, flags [DF], proto TCP (6), length 512)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.34196 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;10.170.109.10.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x95cf &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0x1464&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1:473, ack 1, win 64240, length 472
&lt;span class=&quot;hll&quot;&gt;&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 64, id 34357, offset 0, flags [DF], proto TCP (6), length 68)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.34196 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;10.170.109.10.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x9413 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0xe848&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;473:501, ack 1, win 64240, length 28
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 63, id 34356, offset 0, flags [DF], proto TCP (6), length 540)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.34196 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;10.170.109.10.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x95eb &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0xe838&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1:501, ack 1, win 64240, length 500
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 128, id 65298, offset 0, flags [none], proto TCP (6), length 40)&lt;/span&gt;
&lt;span class=&quot;hll&quot;&gt;&lt;span class=&quot;gp&quot;&gt;    10.170.109.10.6666 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.34196: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x1474 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;correct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, ack 473, win 64240, length 0
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 128, id 65299, offset 0, flags [none], proto TCP (6), length 40)&lt;/span&gt;
&lt;span class=&quot;hll&quot;&gt;&lt;span class=&quot;gp&quot;&gt;    10.170.109.10.6666 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.34196: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x1458 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;correct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, ack 502, win 64239, length 0
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 128, id 65300, offset 0, flags [none], proto TCP (6), length 40)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;    10.170.109.10.6666 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.34196: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;FP.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x144f &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;correct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1, ack 502, win 64239, length 0
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 64, id 34358, offset 0, flags [DF], proto TCP (6), length 40)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.34196 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;10.170.109.10.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x93f7 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0x1457&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, ack 2, win 64239, length 0
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 63, id 34358, offset 0, flags [DF], proto TCP (6), length 40)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.34196 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;10.170.109.10.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x1457 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;correct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, ack 2, win 64239, length 0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;tcp-state-transitions&quot;&gt;4. TCP State Transitions&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The rules which types of segments are sent during different phases of a TCP connection that determine what TCP does are determined by what state TCP is in.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The current state is changed based on various stimuli, such as segments that are transmitted or received, timers that expire, application reads or writes, or information from other layers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These rules can be summarized in TCP&amp;#8217;s state transition diagram.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/tcp-ip/tcp-connection-management/tcp-state-transistion-digram.png&quot; alt=&quot;TCP state transition diagram&quot; width=&quot;50%&quot; height=&quot;50%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 5. The TCP state transition diagram (also called finite state machine). Arrows represent transitions between states due to segment transmission, segment reception, or timers expiring. The bold arrows indicate typical client behavior, and the dashed arrows indicate typical server behavior. The boldface directives (e.g., open, close) are actions performed by applications.&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;States are indicated by ovals and transitions between states by arrows. Each endpoint of a connection transitions through the states.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The state CLOSED is not really an &lt;em&gt;official&lt;/em&gt; state but has been added as a useful starting point and ending point for the diagram.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The names of the 11 states (CLOSED, LISTEN, SYN_SENT, etc.) are based on the names output by the &lt;code&gt;netstat&lt;/code&gt; command in UNIX, Linux, and Windows, which are themselves based on the names originally used in [RFC0793].&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-1:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;netstat &lt;span class=&quot;nt&quot;&gt;-nat4&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Active Internet connections (servers and established)
Proto Recv-Q Send-Q Local Address           Foreign Address         State
tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN
tcp        0      0 127.0.0.1:6010          0.0.0.0:*               LISTEN
tcp        0    316 192.168.91.137:22       192.168.91.1:55776      ESTABLISHED
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;x@node-1:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;ss &lt;span class=&quot;nt&quot;&gt;-nat4&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;State                 Recv-Q                Send-Q                                 Local Address:Port                                 Peer Address:Port
LISTEN                0                     128                                          0.0.0.0:22                                        0.0.0.0:*
LISTEN                0                     128                                        127.0.0.1:6010                                      0.0.0.0:*
ESTAB                 0                     36                                    192.168.91.137:22                                   192.168.91.1:55776&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;PS C:\&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;netstat &lt;span class=&quot;nt&quot;&gt;-na&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; tcp
&lt;span class=&quot;go&quot;&gt;
Active Connections

  Proto  Local Address          Foreign Address        State
  TCP    0.0.0.0:912            0.0.0.0:0              LISTENING
  TCP    0.0.0.0:5040           0.0.0.0:0              LISTENING
  TCP    10.170.109.10:60502    10.171.95.148:7680     SYN_SENT
  TCP    127.0.0.1:49805        0.0.0.0:0              LISTENING
  TCP    127.0.0.1:58165        127.0.0.1:60480        TIME_WAIT
  TCP    127.0.0.1:58165        127.0.0.1:60481        TIME_WAIT
  TCP    127.0.0.1:60461        127.0.0.1:58165        TIME_WAIT
  TCP    127.0.0.1:65123        0.0.0.0:0              LISTENING
  TCP    169.254.24.54:139      0.0.0.0:0              LISTENING&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;time_wait-2msl-wait-state&quot;&gt;4.1. TIME_WAIT (2MSL Wait) State&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;strong&gt;TIME_WAIT&lt;/strong&gt; state is also called the &lt;strong&gt;2MSL&lt;/strong&gt; wait state, which is a state in which TCP waits for a time equal to twice the &lt;em&gt;Maximum Segment Lifetime&lt;/em&gt; (MSL), sometimes called &lt;em&gt;timed wait&lt;/em&gt;. It is the maximum amount of time any segment can exist in the network before being discarded.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/tcp-ip/tcp-connection-management/tcp-state-normal-estab-term.png&quot; alt=&quot;TCP states corresponding to normal connection establishment and termination&quot; width=&quot;45%&quot; height=&quot;45%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 6. TCP states corresponding to normal connection establishment and termination&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;[RFC0793] specifies the MSL as 2 minutes. Common implementation values, however, are 30s, 1 minute, or 2 minutes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;On Linux, the value &lt;code&gt;net.ipv4.tcp_fin_timeout&lt;/code&gt; holds the 2MSL wait timeout value (in seconds).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On Windows, the following registry key: &lt;code&gt;HKLM\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\TcpTimedWaitDelay&lt;/code&gt; holds the timeout. It is permitted to be in the range of 30 to 300s. For IPv6, replace the term &lt;em&gt;Tcpip&lt;/em&gt; with &lt;em&gt;Tcpip6&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Given the MSL value for an implementation, the rule is: &lt;em&gt;When TCP performs an active close and sends the final ACK, that connection must stay in the TIME_WAIT state for twice the MSL.&lt;/em&gt; This lets TCP resend the final ACK in case it is lost.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The final ACK is resent not because the TCP retransmits ACKs (they do not consume sequence numbers and are not retransmitted by TCP), but because the other side will retransmit its FIN (which does consume a sequence number).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Indeed, TCP will always retransmit FINs until it receives a final ACK.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Another effect of this 2MSL wait state is that &lt;em&gt;while the TCP implementation waits, the endpoints defining that connection cannot be reused&lt;/em&gt;. That connection defined by the address/port 4-tuple can be reused&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;only when the 2MSL wait is over, or&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;when a new connection uses an ISN that exceeds the highest sequence number used on the previous instantiation of the connection [RFC1122], or&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;if the use of the &lt;em&gt;Timestamps&lt;/em&gt; option allows the disambiguation of segments from a previous connection instantiation to not otherwise be confused [RFC6191].&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Unfortunately, some implementations impose a more stringent constraint. In these systems, a local port number cannot be reused while that port number is the local port number of any endpoint that is in the 2MSL wait state on the system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Most implementations and APIs provide a way to bypass this restriction.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With the Berkeley sockets API, the &lt;code&gt;SO_REUSEADDR&lt;/code&gt; socket option enables the bypass operation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It lets the caller assign itself a local port number even if that port number is part of some connection in the 2MSL wait state.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We will see, however, that even with this bypass mechanism for one socket (address, port number pair), the rules of TCP still (should) prevent this port number from being reused by another instantiation of the same connection that is in the 2MSL wait state.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Any delayed segments that arrive for a connection while it is in the 2MSL wait state are discarded.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Because the connection defined by the address/port 4-tuple in the 2MSL wait state cannot be reused during this time period, when a valid connection is finally established, we know that delayed segments from an earlier instantiation of this connection cannot be misinterpreted as being part of the new connection.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For interactive applications, it is normally the client that does the active close and enters the TIME_WAIT state. The server usually does the passive close and does not go through the TIME_WAIT state.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The implication is that if we terminate a client, and restart the same client immediately, that new client cannot reuse the same local port number.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is not ordinarily a problem, because clients normally use ephemeral ports assigned by the operating system and do not care what the assigned port number is.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Recall, it is actually a recommended practice for them to be randomized for security reasons [RFC6056].&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is important to know because a client that makes a large number of connections quickly (especially to the same server) could conceivably have to delay while other connections terminate if ephemeral ports are in short supply.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If we terminate a server process that has a connection established and immediately try to restart it, the server cannot assign its well-knonw assigned port number to its endpoint (it gets an &lt;em&gt;Address already in use&lt;/em&gt; binding error), because that port number is part of a connection that is in a 2MSL wait state.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It may take from 1 to 4 minutes for the server to be able to restart, depending on the local system&amp;#8217;s value for the MSL.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;quiet-time-concept&quot;&gt;4.2. Quiet Time Concept&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The 2MSL wait provides protection against delayed segments from an earlier instantiation of a connection being interpreted as part of a new connection that uses the same local and foreign IP addresses and port numbers. But this works only if a host with connections in the 2MSL wait does not crash.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What if a host with connections in the TIME_WAIT state crashes, reboots within the MSL, and immediately establishes new connections using the same local and foreign IP addresses and port numbers corresponding to the local connections that were in the TIME_WAIT state before the crash? In this scenario, delayed segments from the connections that existed before the crash can be misinterpreted as belonging to the new connections created after the reboot. This can happen regardless of how the initial sequence number is chosen after the reboot.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To protect against this scenario, [RFC0793] states that TCP should wait an amount of time equal to the MSL before creating any new connections after a reboot or crash. This is called the &lt;strong&gt;quiet time&lt;/strong&gt;. Few implementations abide by this because most hosts take longer than the MSL to reboot after a crash. Also, if applications use their own checksums or encryption, errors such as these are easily detected.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;fin_wait_2-state&quot;&gt;4.3. FIN_WAIT_2 State&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the FIN_WAIT_2 state, TCP has sent a FIN and the other end has acknowledged it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Unless a half-close is being performed, the TCP must wait for the application on the other end to recognize that it has received an end-of-file notification and close its end of the connection, which causes a FIN to be sent.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Only when the application performs this close (and its FIN is received) does the active closing TCP move from the FIN_WAIT_2 to the TIME_WAIT state.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This means that one end of the connection can remain in this state forever.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The other end is still in the CLOSE_WAIT state and can remain there forever, until the application decides to issue its close.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Many implementations prevent this infinite wait in the FIN_WAIT_2 state as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If the application that does the active close does a complete close, not a half-close indicating that it expects to receive data, a timer is set.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the connection is idle when the timer expires, TCP moves the connection into the CLOSED state.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Linux, the variable &lt;code&gt;net.ipv4.tcp_fin_timeout&lt;/code&gt; can be adjusted to control the number of seconds to which the timer is set. Its default value is 60s.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;simultaneous-open-and-close-transitions&quot;&gt;4.4. Simultaneous Open and Close Transitions&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have seen the normal uses for the SYN_SENT and SYN_RCVD states that correspond to sending and receiving SYN segments, respectively. As illustrated
in Figure 13-3, TCP was purposely designed to handle simultaneous opens that
result in a single connection.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When a simultaneous open occurs, both ends send a SYN at about the same time, entering the SYN_SENT state.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;When each end receives its peer&amp;#8217;s SYN segments, the state changes to SYN_RCVD, and each end resends a SYN and acknowledges the received SYN.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When each end receives the SYN plus the ACK, the state changes to ESTABLISHED.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For a simultaneous close, both ends go from ESTABLISHED to FIN_WAIT_1 when the application issues the close. This causes both FINs to be sent, and they probably pass each other somewhere in the network.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;When its peer&amp;#8217;s FIN arrives, each end transitions from FIN_WAIT_1 to the CLOSING state, and each endpoint sends its final ACK.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Upon receiving a final ACK, each endpoint&amp;#8217;s state changes to TIME_WAIT, and the 2MSL wait is initiated.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;reset-segments&quot;&gt;5. Reset Segments&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A segment having &lt;em&gt;RST&lt;/em&gt; bit set to &lt;code&gt;on&lt;/code&gt; is called a &lt;em&gt;reset segment&lt;/em&gt; or simply a &lt;em&gt;reset&lt;/em&gt;. In general, a reset is sent by TCP whenever a segment arrives that does not appear to be correct for the &lt;em&gt;referenced connection&lt;/em&gt; specified by the 4-tuple of the reset.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Resets ordinarily result in a fast teardown of a TCP connection.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;connection-request-to-nonexistent-port&quot;&gt;5.1. Connection Request to Nonexistent Port&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A common case for generating a reset segment is when a connection request arrives and no process is listening on the destination port.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;telnet localhost 9999
&lt;span class=&quot;go&quot;&gt;Trying ::1...
Trying 127.0.0.1...
telnet: Unable to connect to remote host: Connection refused&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;tcpdump &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; lo &lt;span class=&quot;nt&quot;&gt;-ntSv&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;IP6 (flowlabel 0x3ea4c, hlim 64, next-header TCP (6) payload length: 40) ::1.46796 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;::1.9999: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x0030 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0x8263&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1025049371, win 65476, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 65476,sackOK,TS val 999584289 ecr 0,nop,wscale 7], length 0
&lt;span class=&quot;gp&quot;&gt;IP6 (flowlabel 0x84cda, hlim 64, next-header TCP (6) payload length: 20) ::1.9999 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;::1.46796: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;R.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x001c &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0x91be&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;0, ack 1025049372, win 0, length 0
&lt;span class=&quot;go&quot;&gt;IP (tos 0x10, ttl 64, id 58734, offset 0, flags [DF], proto TCP (6), length 60)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    127.0.0.1.52076 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;127.0.0.1.9999: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0xfe30 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0x0b51&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;499568435, win 65495, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 65495,sackOK,TS val 2552810770 ecr 0,nop,wscale 7], length 0
&lt;span class=&quot;go&quot;&gt;IP (tos 0x10, ttl 64, id 0, offset 0, flags [DF], proto TCP (6), length 40)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    127.0.0.1.9999 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;127.0.0.1.52076: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;R.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0xd257 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;correct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;0, ack 499568436, win 0, length 0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Because the &lt;em&gt;ACK&lt;/em&gt; bit field was not on in the arriving SYN segment, the sequence number of the reset is set to 0 and the ACK number is set to the incoming ISN plus the number of data bytes in the segment.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;aborting-a-connection&quot;&gt;5.2. Aborting a Connection&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The normal way to terminate a connection is for one side to send a FIN, which is sometimes called an &lt;em&gt;orderly release&lt;/em&gt; because the FIN is sent after all previously queued data has been sent, and there is normally no loss of data. But it is also possible to abort a connection by sending a reset instead of a FIN at any time which is sometimes called an &lt;em&gt;abortive release&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Aborting a connection provides two features to the application: (1) any queued data is thrown away and a reset segment is sent immediately, and (2) the receiver of the reset can tell that the other end did an abort instead of a normal close. The API being used by the application must provide a way to generate the abort instead of a normal close.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The sockets API provides this capability by using the &lt;em&gt;linger on close&lt;/em&gt; socket option (&lt;code&gt;SO_LINGER&lt;/code&gt;) with a &lt;code&gt;0&lt;/code&gt; linger value, which essentially this means &lt;em&gt;Linger for no time in making sure data gets to the other side, then abort&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the following example, we show what happens when a remote command that generates a large amount of output is canceled by the user:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;ssh &lt;span class=&quot;nt&quot;&gt;-4&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; .ssh/id_rsa.localhost localhost &lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /usr/share/dict/words &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /dev/null
&lt;span class=&quot;go&quot;&gt;^C&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;tcpdump &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; lo &lt;span class=&quot;nt&quot;&gt;-ntSv&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 64, id 25152, offset 0, flags [DF], proto TCP (6), length 60)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    127.0.0.1.56842 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;127.0.0.1.22: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0xfe30 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0x0ce7&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;3840402379, win 65495, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 65495,sackOK,TS val 2560361386 ecr 0,nop,wscale 7], length 0
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 64, id 0, offset 0, flags [DF], proto TCP (6), length 60)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    127.0.0.1.22 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;127.0.0.1.56842: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0xfe30 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0xde8a&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;4193097762, ack 3840402380, win 65483, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 65495,sackOK,TS val 2560361386 ecr 2560361386,nop,wscale 7], length 0
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 64, id 25153, offset 0, flags [DF], proto TCP (6), length 52)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    127.0.0.1.56842 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;127.0.0.1.22: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0xfe28 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0x0547&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, ack 4193097763, win 512, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 2560361386 ecr 2560361386], length 0
&lt;span class=&quot;c&quot;&gt;...
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;IP (tos 0x8, ttl 64, id 25186, offset 0, flags [DF], proto TCP (6), length 112)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    127.0.0.1.56842 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;127.0.0.1.22: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0xfe64 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0x1b78&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;3840405884:3840405944, ack 4193659175, win 19379, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 2560361552 ecr 2560361552], length 60
&lt;span class=&quot;go&quot;&gt;IP (tos 0x8, ttl 64, id 15367, offset 0, flags [DF], proto TCP (6), length 16472)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    127.0.0.1.22 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;127.0.0.1.56842: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x3e4d &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0x04b1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;4193659175:4193675595, ack 3840405944, win 512, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 2560361554 ecr 2560361552], length 16420
&lt;span class=&quot;go&quot;&gt;IP (tos 0x8, ttl 64, id 0, offset 0, flags [DF], proto TCP (6), length 40)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    127.0.0.1.56842 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;127.0.0.1.22: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;R], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0xfd1c &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;correct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;3840405944, win 0, length 0
&lt;span class=&quot;go&quot;&gt;IP (tos 0x8, ttl 64, id 25187, offset 0, flags [DF], proto TCP (6), length 52)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    127.0.0.1.56842 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;127.0.0.1.22: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;R.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0xfe28 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0x1b48&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;3840405944, ack 4193659175, win 19379, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 2560361555 ecr 2560361552], length 0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;tcp-reset-attack&quot;&gt;5.3. TCP reset attack&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;TCP reset attack, also known as a &quot;forged TCP reset&quot; or &quot;spoofed TCP reset&quot;, is a way to terminate a TCP connection by sending a forged TCP reset packet. This tampering technique can be used by a firewall or abused by a malicious attacker to interrupt Internet connections. &lt;a href=&quot;#RSTATTACK&quot;&gt;[RSTATTACK]&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/The_Great_Firewall_of_China&quot;&gt;The Great Firewall of China&lt;/a&gt;, and &lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_censorship_in_Iran#Deep_packet_inspection&quot;&gt;Iranian Internet censors&lt;/a&gt; are known to use TCP reset attacks to interfere with and block connections, as a major method to carry out Internet censorship.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;sysctl net.ipv4.tcp_syn_retries&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;12
&lt;span class=&quot;go&quot;&gt;net.ipv4.tcp_syn_retries = 12&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;curl https://www.google.com
&lt;span class=&quot;go&quot;&gt;curl: (7) Failed to connect to www.google.com port 443: Connection refused&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;tcpdump &lt;span class=&quot;nt&quot;&gt;-ntSv&lt;/span&gt; host www.google.com
&lt;span class=&quot;go&quot;&gt;tcpdump: listening on ens32, link-type EN10MB (Ethernet), snapshot length 262144 bytes
IP (tos 0x0, ttl 64, id 47240, offset 0, flags [DF], proto TCP (6), length 60)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.60460 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;104.244.43.228.443: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0xb12f &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0x3f20&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;510666909, win 64240, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 1460,sackOK,TS val 4143788283 ecr 0,nop,wscale 7], length 0
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 64, id 47241, offset 0, flags [DF], proto TCP (6), length 60)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.60460 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;104.244.43.228.443: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0xb12f &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0x3b2e&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;510666909, win 64240, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 1460,sackOK,TS val 4143789293 ecr 0,nop,wscale 7], length 0
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 64, id 47242, offset 0, flags [DF], proto TCP (6), length 60)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.60460 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;104.244.43.228.443: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0xb12f &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0x334d&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;510666909, win 64240, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 1460,sackOK,TS val 4143791310 ecr 0,nop,wscale 7], length 0
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 64, id 47243, offset 0, flags [DF], proto TCP (6), length 60)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.60460 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;104.244.43.228.443: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0xb12f &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0x22ee&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;510666909, win 64240, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 1460,sackOK,TS val 4143795501 ecr 0,nop,wscale 7], length 0
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 64, id 47244, offset 0, flags [DF], proto TCP (6), length 60)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.60460 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;104.244.43.228.443: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0xb12f &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0x02ee&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;510666909, win 64240, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 1460,sackOK,TS val 4143803693 ecr 0,nop,wscale 7], length 0
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 128, id 65378, offset 0, flags [none], proto TCP (6), length 40)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    104.244.43.228.443 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.60460: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;R.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x3aca &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;correct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1523136853, ack 510666910, win 64240, length 0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By encrypting connections using a &lt;a href=&quot;https://en.wikipedia.org/wiki/Virtual_private_network&quot;&gt;VPN&lt;/a&gt;, the attacker has to do a TCP reset attack on all encrypted connections, causing collateral damage.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-iI&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-x&lt;/span&gt; http://windows.home:7890 https://www.google.com
&lt;span class=&quot;go&quot;&gt;HTTP/1.1 200 Connection established

HTTP/2 200
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;content-type: text/html;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;charset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ISO-8859-1
&lt;span class=&quot;c&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;tcpdump &lt;span class=&quot;nt&quot;&gt;-ntSv&lt;/span&gt; host windows.home
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 64, id 11633, offset 0, flags [DF], proto TCP (6), length 60)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.51404 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;10.170.109.10.7890: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x940b &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0x37da&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1111884013, win 64240, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 1460,sackOK,TS val 93212920 ecr 0,nop,wscale 7], length 0
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 128, id 65434, offset 0, flags [none], proto TCP (6), length 44)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    10.170.109.10.7890 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.51404: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x4445 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;correct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1282231747, ack 1111884014, win 64240, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 1460], length 0
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 64, id 11634, offset 0, flags [DF], proto TCP (6), length 40)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.51404 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;10.170.109.10.7890: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x93f7 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0x5c02&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, ack 1282231748, win 64240, length 0
&lt;span class=&quot;c&quot;&gt;...
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.51404 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;10.170.109.10.7890: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;F.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x93f7 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0x4687&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1111885022, ack 1282237698, win 62780, length 0
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 128, id 65452, offset 0, flags [none], proto TCP (6), length 40)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    10.170.109.10.7890 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.51404: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x40d4 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;correct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, ack 1111885023, win 64239, length 0
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 128, id 65453, offset 0, flags [none], proto TCP (6), length 40)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    10.170.109.10.7890 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.51404: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;FP.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x40cb &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;correct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1282237698, ack 1111885023, win 64239, length 0
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 64, id 0, offset 0, flags [DF], proto TCP (6), length 40)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.51404 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;10.170.109.10.7890: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x4686 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;correct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, ack 1282237699, win 62780, length 0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;half-open-connections&quot;&gt;5.4. Half-Open Connections&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A TCP connection is said to be &lt;strong&gt;half-open&lt;/strong&gt; if one end has closed or aborted the connection without the knowledge of the other end.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This can happen anytime one of the peers crashes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As long as there is no attempt to transfer data across a half-open connection, the end that is still up does not detect that the other end has crashed.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Another common cause of a half-open connection is when one host is powered off instead of shut down properly. This happens, for example,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;when PCs are being used to run remote login clients and are switched off at the end of the day.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If there was no data transfer going on when the power was cut, the server will never know that the client disappeared (it would still think the connection is in the ESTABLISHED state).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When the user comes in the next morning, powers on the PC, and starts a new session, a new occurrence of the server is started on the server host.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This can lead to many half-open TCP connections on the server host.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We can easily create a half-open connection. In this case, we do so on the client rather than the server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We will execute the Telnet client on &lt;code&gt;node-0&lt;/code&gt;, connecting to the SSH Service server at &lt;code&gt;node-1&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We type one line of input and watch it go across with &lt;code&gt;tcpdump&lt;/code&gt;, and then we disconnect the Ethernet cable on the server&amp;#8217;s host and reboot the server host. This simulates the server host crashing.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We disconnect the Ethernet cable before rebooting the server to prevent it from sending a FIN out of the open connections, which some TCPs do when they are shut down.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After the server has rebooted, we reconnect the cable and try to send another line from the client to the server.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After rebooting, the server&amp;#8217;s TCP has lost all memory of the connections that existed before, so it knows nothing about the connection that the data segment references. The rule of TCP is that the receiver responds with a reset.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;telnet node-1 22
&lt;span class=&quot;go&quot;&gt;Trying 192.168.91.137...
Connected to node-1.localdomain.
Escape character is '^]'.
SSH-2.0-OpenSSH_7.9p1 Debian-10+deb10u2
heloo
Connection closed by foreign host.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Disconnect the Ethernet cable on the server’s host and reboot the server host.&lt;/span&gt;
x@node-1:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ip &lt;span class=&quot;nb&quot;&gt;link set &lt;/span&gt;ens32 down &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;reboot&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;tcpdump &lt;span class=&quot;nt&quot;&gt;-tSnv&lt;/span&gt; host node-1 and tcp
&lt;span class=&quot;go&quot;&gt;IP (tos 0x10, ttl 64, id 39857, offset 0, flags [DF], proto TCP (6), length 60)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.34128 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.22: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x3889 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0xa161&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;3124448828, win 64240, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 1460,sackOK,TS val 2395494060 ecr 0,nop,wscale 7], length 0
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 64, id 0, offset 0, flags [DF], proto TCP (6), length 60)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.137.22 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.34128: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0xab81 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;correct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;2701748454, ack 3124448829, win 65160, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 1460,sackOK,TS val 177003962 ecr 2395494060,nop,wscale 7], length 0
&lt;span class=&quot;go&quot;&gt;IP (tos 0x10, ttl 64, id 39858, offset 0, flags [DF], proto TCP (6), length 52)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.34128 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.22: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x3881 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0xd6df&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, ack 2701748455, win 502, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 2395494061 ecr 177003962], length 0
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 64, id 39639, offset 0, flags [DF], proto TCP (6), length 93)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.137.22 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.34128: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x4dc3 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;correct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;2701748455:2701748496, ack 3124448829, win 510, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 177003967 ecr 2395494061], length 41: SSH: SSH-2.0-OpenSSH_7.9p1 Debian-10+deb10u2
&lt;span class=&quot;go&quot;&gt;IP (tos 0x10, ttl 64, id 39859, offset 0, flags [DF], proto TCP (6), length 52)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.34128 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.22: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x3881 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0xd6ac&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, ack 2701748496, win 502, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 2395494066 ecr 177003967], length 0
&lt;span class=&quot;go&quot;&gt;
IP (tos 0x10, ttl 64, id 39860, offset 0, flags [DF], proto TCP (6), length 59)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.34128 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.22: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x3888 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0x58ae&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;3124448829:3124448836, ack 2701748496, win 502, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 2395571902 ecr 177003967], length 7
&lt;span class=&quot;go&quot;&gt;IP (tos 0x10, ttl 64, id 0, offset 0, flags [DF], proto TCP (6), length 40)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.137.22 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.34128: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;R], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0xe805 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;correct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;2701748496, win 0, length 0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;time-wait-assassination-twa&quot;&gt;5.5. TIME-WAIT Assassination (TWA)&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;During TIME-WAIT state period, the waiting TCP usually has little to do; it merely holds the state until the 2MSL timer expires.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If, however, it receives certain segments from the connection during this period, or more specifically an RST segment, it can become desynchronized. This is called &lt;strong&gt;TIME-WAIT Assassination&lt;/strong&gt; (TWA) [RFC1337].&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/tcp-ip/tcp-connection-management/tcp-time-wait-assassination.png&quot; alt=&quot;TCP TIME-WAIT Assassination&quot; width=&quot;45%&quot; height=&quot;45%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 7. An RST segment can &quot;assassinate&quot; the TIME_WAIT state and force the connection to close prematurely. Various methods exist to resist this problem, including ignoring RST segments when in the TIME_WAIT state.&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;tcp-server-operation&quot;&gt;6. TCP Server Operation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When a new connection request arrives at a server, the server accepts the connection and invokes a new process or thread to handle the new client concurrently.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;tcp-port-numbers&quot;&gt;6.1. TCP Port Numbers&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We shall watch the secure shell server (called &lt;code&gt;sshd&lt;/code&gt;) using the &lt;code&gt;netstat&lt;/code&gt; command on a dual-stack IPv4/IPv6-capable host. The following output is on a system with no active secure shell connections.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;netstat &lt;span class=&quot;nt&quot;&gt;-nat&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Active Internet connections (servers and established)
Proto Recv-Q Send-Q Local Address           Foreign Address         State
tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN
tcp6       0      0 :::22                   :::*                    LISTEN&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The local address (which really means &lt;em&gt;local endpoint&lt;/em&gt;) is output as &lt;code&gt;0.0.0.0:22&lt;/code&gt; and &lt;code&gt;:::22&lt;/code&gt;, which are the IPv4/IPv6-oriented ways of referring to the all-zeros address, also called the &lt;em&gt;wildcard&lt;/em&gt; address, along with port number 22. This means that an incoming connection request (i.e., a SYN) to port 22 will be accepted on any local interface.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If the host were multihomed (this one is), we could specify a single IP address for the local IP address (one of the host&amp;#8217;s IP addresses), and only connections received on that interface would be accepted.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Port 22 is the well-known port number reserved for the Secure Shell Protocol.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The foreign address is output as &lt;code&gt;0.0.0.0:*&lt;/code&gt; and &lt;code&gt;:::*&lt;/code&gt;, which mean both a wildcard address and port number (i.e., it represents a wildcard endpoint).&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here, the foreign IP address and foreign port number are not known yet, because the local endpoint is in the LISTEN state, waiting for a connection to arrive.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We now start a secure shell client on the host through a NAT &lt;code&gt;192.168.91.1&lt;/code&gt; that connects to this server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;netstat &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Active Internet connections (servers and established)
Proto Recv-Q Send-Q Local Address           Foreign Address         State
tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN
tcp        0    172 192.168.91.128:22       192.168.91.1:52094      ESTABLISHED
tcp6       0      0 :::22                   :::*                    LISTEN&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The second line for port 22 is the ESTABLISHED connection.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All four elements of the local and foreign endpoints are filled in for this connection: the local IP address and port number, and the foreign IP address and port number.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The local IP address corresponds to the interface on which the connection request arrived (the Ethernet interface, identified by address, &lt;code&gt;192.168.91.128&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The local endpoint in the LISTEN state is left alone.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is the endpoint that the concurrent server uses to accept future connection requests. It is the TCP module in the operating system that creates the new endpoint in the ESTABLISHED state, when the incoming connection request arrives and is accepted.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Also notice that the port number for the ESTABLISHED connection does not change: it is 22, the same as the LISTEN endpoint.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We now initiate another client request from the same system (&lt;code&gt;192.168.91.1&lt;/code&gt;) to this server. Here is the relevant &lt;code&gt;netstat&lt;/code&gt; output:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;netstat &lt;span class=&quot;nt&quot;&gt;-nta&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Active Internet connections (servers and established)
Proto Recv-Q Send-Q Local Address           Foreign Address         State
tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN
tcp        0      0 192.168.91.128:22       192.168.91.1:52408      ESTABLISHED
tcp        0      0 192.168.91.128:22       192.168.91.1:52094      ESTABLISHED
tcp6       0      0 :::22                   :::*                    LISTEN&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;restricting-local-ip-addresses&quot;&gt;6.2. Restricting Local IP Addresses&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We can see what happens when the server does not wildcard the local IP address but instead sets it to one particular local address. If we run our &lt;code&gt;nc&lt;/code&gt; program as a server and provide it with a particuclar IP address, that address becomes the local address of the listening endpoint. For example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;ip a s ens32
&lt;span class=&quot;gp&quot;&gt;2: ens32: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
&lt;span class=&quot;go&quot;&gt;    link/ether 00:0c:29:8c:df:3f brd ff:ff:ff:ff:ff:ff
    altname enp2s0
    inet 192.168.91.128/24 brd 192.168.91.255 scope global ens32
       valid_lft forever preferred_lft forever
    inet 192.168.91.129/24 brd 192.168.91.255 scope global secondary ens32
       valid_lft forever preferred_lft forever
    inet6 fe80::20c:29ff:fe8c:df3f/64 scope link
       valid_lft forever preferred_lft forever
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;nc &lt;span class=&quot;nt&quot;&gt;-kvl&lt;/span&gt; 192.168.91.128 8888
&lt;span class=&quot;go&quot;&gt;Ncat: Version 7.80 ( https://nmap.org/ncat )
Ncat: Listening on 192.168.91.128:8888

Ncat: Connection from 192.168.91.137.
Ncat: Connection from 192.168.91.137:56918.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If we instead try to connect to this server from a host using a destination address other than &lt;code&gt;192.168.91.128&lt;/code&gt; (even including the local address &lt;code&gt;127.0.0.1&lt;/code&gt;), the connection request is not accepted by the TCP module, meanwhile the server application never sees the connection request.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-1:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;nc 192.168.91.128 8888
&lt;span class=&quot;go&quot;&gt;^C
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;x@node-1:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;nc 192.168.91.129 8888
&lt;span class=&quot;go&quot;&gt;Ncat: Connection refused.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;nc 127.0.0.1 8888
&lt;span class=&quot;go&quot;&gt;Ncat: Connection refused.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If we watch with tcpdump, the SYN elicits an RST segment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;tcpdump &lt;span class=&quot;nt&quot;&gt;-ntSv&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; any port 8888 and tcp
&lt;span class=&quot;go&quot;&gt;ens32 In  IP (tos 0x0, ttl 64, id 42898, offset 0, flags [DF], proto TCP (6), length 60)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.137.38142 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.8888: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x12bf &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;correct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;244930047, win 64240, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 1460,sackOK,TS val 1592493755 ecr 0,nop,wscale 7], length 0
&lt;span class=&quot;go&quot;&gt;ens32 Out IP (tos 0x0, ttl 64, id 0, offset 0, flags [DF], proto TCP (6), length 60)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.8888 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.38142: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x3889 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0x21bc&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;2513818259, ack 244930048, win 65160, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 1460,sackOK,TS val 3269837322 ecr 1592493755,nop,wscale 7], length 0
&lt;span class=&quot;go&quot;&gt;ens32 In  IP (tos 0x0, ttl 64, id 42899, offset 0, flags [DF], proto TCP (6), length 52)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.137.38142 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.8888: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x4d1b &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;correct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, ack 2513818260, win 502, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 1592493755 ecr 3269837322], length 0
&lt;span class=&quot;go&quot;&gt;ens32 In  IP (tos 0x0, ttl 64, id 42900, offset 0, flags [DF], proto TCP (6), length 52)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.137.38142 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.8888: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;F.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x47b3 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;correct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;244930048, ack 2513818260, win 502, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 1592495138 ecr 3269837322], length 0
&lt;span class=&quot;go&quot;&gt;ens32 Out IP (tos 0x0, ttl 64, id 22157, offset 0, flags [DF], proto TCP (6), length 52)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.8888 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.38142: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;F.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x3881 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0x4242&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;2513818260, ack 244930049, win 510, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 3269838706 ecr 1592495138], length 0
&lt;span class=&quot;go&quot;&gt;ens32 In  IP (tos 0x0, ttl 64, id 42901, offset 0, flags [DF], proto TCP (6), length 52)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.137.38142 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.8888: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x4249 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;correct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, ack 2513818261, win 502, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 1592495139 ecr 3269838706], length 0
&lt;span class=&quot;go&quot;&gt;
ens32 In  IP (tos 0x0, ttl 64, id 49077, offset 0, flags [DF], proto TCP (6), length 60)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.137.52334 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.129.8888: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x9ff0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;correct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;268676780, win 64240, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 1460,sackOK,TS val 1836145019 ecr 0,nop,wscale 7], length 0
&lt;span class=&quot;go&quot;&gt;ens32 Out IP (tos 0x0, ttl 64, id 0, offset 0, flags [DF], proto TCP (6), length 40)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.129.8888 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.52334: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;R.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0xc99d &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;correct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;0, ack 268676781, win 0, length 0
&lt;span class=&quot;go&quot;&gt;
lo    In  IP (tos 0x0, ttl 64, id 27559, offset 0, flags [DF], proto TCP (6), length 60)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    127.0.0.1.39402 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;127.0.0.1.8888: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0xfe30 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0x7bca&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1179089949, win 65495, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 65495,sackOK,TS val 2152518883 ecr 0,nop,wscale 7], length 0
&lt;span class=&quot;go&quot;&gt;lo    In  IP (tos 0x0, ttl 64, id 0, offset 0, flags [DF], proto TCP (6), length 40)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    127.0.0.1.8888 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;127.0.0.1.39402: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;R.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x32c6 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;correct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;0, ack 1179089950, win 0, length 0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;restricting-foreign-endpoints&quot;&gt;6.3. Restricting Foreign Endpoints&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The abstract interface functions for TCP given in [RFC0793] allow a server doing a passive open to have either a fully specified foreign endpoint (to wait for a particular client to issue an active open) or an unspecified foreign endpoint (to wait for any client).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Unfortunately, the ordinary Berkeley sockets API does not provide a way to do this. The server must leave the client&amp;#8217;s endpoint unspecified, wait for the connection to arrive, and then examine the IP address and port number of the client.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 2. Address and port number binding options available to a TCP server&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 20%;&quot;&gt;
&lt;col style=&quot;width: 20%;&quot;&gt;
&lt;col style=&quot;width: 20%;&quot;&gt;
&lt;col style=&quot;width: 40%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Local Address&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Foreign Address&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Restricted to&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Comment&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;local_IP&lt;/code&gt;.&lt;code&gt;lport&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;foraddr&lt;/code&gt;.&lt;code&gt;foreign_port&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;One client&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Not usually supported&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;local_IP&lt;/code&gt;.&lt;code&gt;lport&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;*&lt;/code&gt;.&lt;code&gt;*&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;One local endpoint&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Unusual (used by DNS servers)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;*&lt;/code&gt;.&lt;code&gt;local_port&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;*&lt;/code&gt;.&lt;code&gt;*&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;One local port&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Most common; multiple
address families (IPv4/IPv6)
may be supported&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;incoming-connection-queue&quot;&gt;6.4. Incoming Connection Queue&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A concurrent server invokes a new process or thread to handle each client, so the listening server should always be ready to handle the next incoming connection request. That is the underlying reason for using concurrent servers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But there is still a chance that multiple connection requests will arrive&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;while the listening server is creating a new process,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;or while the operating system is busy running other higher-priority processes,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;or worse yet, that the server is being attacked with bogus connection requests that are never allowed to be established.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;How does TCP handle these scenarios?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To fully explore this question, we must first understand that new connections may be in one of two distinct states before they are made available to an application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The first case is connections that have not yet completed but for which a SYN has been received (these are in the &lt;strong&gt;SYN_RCVD&lt;/strong&gt; state).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The second case is connections that have already completed the three-way handshake and are in the &lt;strong&gt;ESTABLISHED&lt;/strong&gt; state but have not yet been accepted by the application.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An application has limited control over the sizing of these queues.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Traditionally, using the Berkeley sockets API, an application had only indirect control of the sum of the sizes of these two queues.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In modern Linux kernels this behavior has been changed to be the number of connections in the second case (ESTABLISHED connections).&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The application can therefore limit the number of fully formed connections waiting for it to handle.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Linux, then, the following rules apply:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;When a connection request arrives (i.e., the SYN segment), the system-wide parameter &lt;code&gt;net.ipv4.tcp_max_syn_backlog&lt;/code&gt; is checked (default 1000).&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;uname&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;Linux node-0 5.10.0-19-amd64 #&lt;/span&gt;1 SMP Debian 5.10.149-2 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2022-10-21&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; x86_64 GNU/Linux
&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;sysctl net.ipv4.tcp_max_syn_backlog
&lt;span class=&quot;go&quot;&gt;net.ipv4.tcp_max_syn_backlog = 256&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If the number of connections in the SYN_RCVD state would exceed this threshold, the incoming connection is rejected.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Each listening endpoint has a fixed-length queue of connections that have been &lt;em&gt;completely accepted by TCP&lt;/em&gt; (i.e., the three-way handshake is complete) but &lt;em&gt;not yet accepted by the application&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The application specifies a limit to this queue, commonly called the &lt;strong&gt;backlog&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This backlog must be between &lt;code&gt;0&lt;/code&gt; and a system-specific maximum called &lt;code&gt;net.core.somaxconn&lt;/code&gt;, inclusive (default 128).&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;uname&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;Linux node-0 5.10.0-19-amd64 #&lt;/span&gt;1 SMP Debian 5.10.149-2 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2022-10-21&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; x86_64 GNU/Linux
&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;sysctl net.core.somaxconn
&lt;span class=&quot;go&quot;&gt;net.core.somaxconn = 4096&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Keep in mind that this backlog value specifies only the maximum number of queued connections for &lt;strong&gt;one&lt;/strong&gt; listening endpoint, all of which have already been accepted by TCP and are &lt;em&gt;waiting to be accepted by the application&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This backlog has no effect whatsoever on the maximum number of established connections allowed by the system, or on the number of clients that a concurrent server can handle concurrently.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If there is room on this listening endpoint&amp;#8217;s queue for this new connection, the TCP module ACKs the SYN and completes the connection.&lt;/p&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The server application with the listening endpoint does not see this new connection until the third segment of the three-way handshake is received.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Also, the client may think the server is ready to receive data when the client&amp;#8217;s active open completes successfully, before the server application has been notified of the new connection. If this happens, the server&amp;#8217;s TCP just queues the incoming data.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If there is not enough room on the queue for the new connection, the TCP delays responding to the SYN, to give the application a chance to catch up.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Linux is somewhat unique in this behavior—it persists in not ignoring incoming connections if it possibly can.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If the &lt;code&gt;net.ipv4.tcp_abort_on_overflow&lt;/code&gt; system control variable is set, new incoming connections are reset with a reset segment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sending reset segments on overflow is not generally advisable and is not turned on by default.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The client has attempted to contact the server, and if it receives a reset during the SYN exchange, it may falsely conclude that no server is present (instead of concluding that there is a server present but it is busy). Being too busy is really a form of &quot;soft&quot; or temporary error rather than a hard error.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Normally, when the queue is full, the application or the operating system is busy, preventing the application from servicing incoming connections. This condition could change in a short while.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;But if the server&amp;#8217;s TCP responded with a reset, the client&amp;#8217;s active open would abort (which is what we saw happen if the server was not started).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Without the reset, if the listening server does not get around to accepting some of the already-accepted connections that have filled its queue to the limit, the client&amp;#8217;s active open eventually times out, according to normal TCP mechanisms. In the case of Linux, the connecting clients are just slowed for a significant period of time—they will neither time out nor be reset.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;summary class=&quot;title&quot;&gt;&lt;em&gt;Show backlog.c&lt;/em&gt;&lt;/summary&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// backlog.c&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;arpa/inet.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;stdbool.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;sys/socket.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define MAXPENDING 1 // backlog
#define SERV_PORT 6666
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serv_sock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sockaddr_in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serv_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;serv_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sin_family&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AF_INET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                 &lt;span class=&quot;cm&quot;&gt;/* Internet address family */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;serv_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sin_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;htonl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INADDR_ANY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;/* Any incoming interface */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;serv_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sin_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;htons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SERV_PORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;          &lt;span class=&quot;cm&quot;&gt;/* Local port */&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* Create a TCP socket */&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* Create socket for incoming connections */&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serv_sock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PF_INET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SOCK_STREAM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPPROTO_TCP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;perror&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;socket() failed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;cm&quot;&gt;/* Assign a port to socket */&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serv_sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sockaddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serv_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serv_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;perror&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bind() failed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;cm&quot;&gt;/* Set socket to listen */&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* Mark the socket so it will listen for incoming connections */&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serv_sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAXPENDING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;perror&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;listen() failed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addrp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inet_ntop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AF_INET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serv_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sin_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addrp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serv_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;perror&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;inet_ntop() failed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;listening: %s:%d.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addrp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SERV_PORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// sleep 1 day without any accepting&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serv_sock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serv_sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;gcc backlog.c
&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;./a.out
&lt;span class=&quot;go&quot;&gt;listening: 0.0.0.0:6666.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;netstat &lt;span class=&quot;nt&quot;&gt;-nt4l&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Active Internet connections (only servers)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Proto Recv-Q Send-Q Local Address           Foreign Address         State&lt;/span&gt;
&lt;span class=&quot;hll&quot;&gt;&lt;span class=&quot;go&quot;&gt;tcp        0      0 0.0.0.0:6666            0.0.0.0:*               LISTEN&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-1:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;telnet 192.168.91.128 6666
&lt;span class=&quot;go&quot;&gt;Trying 192.168.91.128...
Connected to 192.168.91.128.
Escape character is '^]'.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-1:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;telnet 192.168.91.128 6666
&lt;span class=&quot;go&quot;&gt;Trying 192.168.91.128...
Connected to 192.168.91.128.
Escape character is '^]'.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We try to start a third whose SYN appears as segment 7 (port 49598), but the server-side TCP ignores the SYNs because the queue for this listening endpoint is full. The client retransmits its SYN in segments 8–13 using binary exponential backoff.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-1:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;telnet 192.168.91.128 6666
&lt;span class=&quot;go&quot;&gt;Trying 192.168.91.128...
telnet: Unable to connect to remote host: Connection timed out&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;ss &lt;span class=&quot;nt&quot;&gt;-ntl4&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;State              Recv-Q              Send-Q                           Local Address:Port                            Peer Address:Port             Process
LISTEN             2                   1                                      0.0.0.0:6666                                 0.0.0.0:*
LISTEN             0                   128                                    0.0.0.0:22                                   0.0.0.0:*
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;netstat &lt;span class=&quot;nt&quot;&gt;-nta4&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Active Internet connections (servers and established)
Proto Recv-Q Send-Q Local Address           Foreign Address         State
tcp        2      0 0.0.0.0:6666            0.0.0.0:*               LISTEN
tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN
tcp        0      0 192.168.91.128:6666     192.168.91.137:47352    ESTABLISHED
tcp        0      0 192.168.91.128:6666     192.168.91.137:54366    ESTABLISHED&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Linux server accepts two connections immediately. Subsequent connections receive no response and eventually time out at the client.&lt;/p&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;summary class=&quot;title&quot;&gt;&lt;em&gt;Show tcpdump trace&lt;/em&gt;&lt;/summary&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;tcpdump &lt;span class=&quot;nt&quot;&gt;-tttSnvv&lt;/span&gt; port 6666 &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; ens32
&lt;span class=&quot;go&quot;&gt; 00:00:00.000000 IP (tos 0x10, ttl 64, id 27519, offset 0, flags [DF], proto TCP (6), length 60)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.137.55964 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x9b9c &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;correct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;2152111340, win 64240, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 1460,sackOK,TS val 1666647015 ecr 0,nop,wscale 7], length 0
&lt;span class=&quot;go&quot;&gt; 00:00:00.000036 IP (tos 0x0, ttl 64, id 0, offset 0, flags [DF], proto TCP (6), length 60)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.6666 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.55964: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x3889 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0x8908&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1765187368, ack 2152111341, win 65160, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 1460,sackOK,TS val 3343990586 ecr 1666647015,nop,wscale 7], length 0
&lt;span class=&quot;go&quot;&gt; 00:00:00.000163 IP (tos 0x10, ttl 64, id 27520, offset 0, flags [DF], proto TCP (6), length 52)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.137.55964 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0xb467 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;correct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;2152111341, ack 1765187369, win 502, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 1666647015 ecr 3343990586], length 0
&lt;span class=&quot;go&quot;&gt;
 00:00:03.103909 IP (tos 0x10, ttl 64, id 36918, offset 0, flags [DF], proto TCP (6), length 60)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.137.55980 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0xfdfd &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;correct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1592217530, win 64240, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 1460,sackOK,TS val 1666650119 ecr 0,nop,wscale 7], length 0
&lt;span class=&quot;go&quot;&gt; 00:00:00.000023 IP (tos 0x0, ttl 64, id 0, offset 0, flags [DF], proto TCP (6), length 60)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.6666 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.55980: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x3889 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0xb79d&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1742325809, ack 1592217531, win 65160, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 1460,sackOK,TS val 3343993690 ecr 1666650119,nop,wscale 7], length 0
&lt;span class=&quot;go&quot;&gt; 00:00:00.000091 IP (tos 0x10, ttl 64, id 36919, offset 0, flags [DF], proto TCP (6), length 52)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.137.55980 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0xe2fc &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;correct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1592217531, ack 1742325810, win 502, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 1666650119 ecr 3343993690], length 0
&lt;span class=&quot;go&quot;&gt;
 00:00:06.974278 IP (tos 0x10, ttl 64, id 7754, offset 0, flags [DF], proto TCP (6), length 60)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.137.49598 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0xbfe9 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;correct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;2744338131, win 64240, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 1460,sackOK,TS val 1666657092 ecr 0,nop,wscale 7], length 0
&lt;span class=&quot;go&quot;&gt; 00:00:01.010323 IP (tos 0x10, ttl 64, id 7755, offset 0, flags [DF], proto TCP (6), length 60)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.137.49598 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0xbbf6 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;correct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;2744338131, win 64240, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 1460,sackOK,TS val 1666658103 ecr 0,nop,wscale 7], length 0
&lt;span class=&quot;go&quot;&gt; 00:00:02.016133 IP (tos 0x10, ttl 64, id 7756, offset 0, flags [DF], proto TCP (6), length 60)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.137.49598 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0xb416 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;correct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;2744338131, win 64240, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 1460,sackOK,TS val 1666660119 ecr 0,nop,wscale 7], length 0
&lt;span class=&quot;go&quot;&gt; 00:00:04.191522 IP (tos 0x10, ttl 64, id 7757, offset 0, flags [DF], proto TCP (6), length 60)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.137.49598 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0xa3b6 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;correct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;2744338131, win 64240, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 1460,sackOK,TS val 1666664311 ecr 0,nop,wscale 7], length 0
&lt;span class=&quot;go&quot;&gt; 00:00:08.191700 IP (tos 0x10, ttl 64, id 7758, offset 0, flags [DF], proto TCP (6), length 60)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.137.49598 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x83b6 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;correct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;2744338131, win 64240, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 1460,sackOK,TS val 1666672503 ecr 0,nop,wscale 7], length 0
&lt;span class=&quot;go&quot;&gt; 00:00:16.128449 IP (tos 0x10, ttl 64, id 7759, offset 0, flags [DF], proto TCP (6), length 60)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.137.49598 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x44b6 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;correct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;2744338131, win 64240, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 1460,sackOK,TS val 1666688631 ecr 0,nop,wscale 7], length 0
&lt;span class=&quot;go&quot;&gt; 00:00:33.792360 IP (tos 0x10, ttl 64, id 7760, offset 0, flags [DF], proto TCP (6), length 60)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.137.49598 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0xc0b5 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;correct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;2744338131, win 64240, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 1460,sackOK,TS val 1666722423 ecr 0,nop,wscale 7], length 0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;tcp-syn-flood-dos-attack&quot;&gt;7. TCP SYN flood DoS attack&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A &lt;strong&gt;SYN flood&lt;/strong&gt; is a TCP DoS attack whereby one or more malicious clients generate a series of TCP connection attempts (SYN segments) and send them at a server, often with a &lt;em&gt;spoofed&lt;/em&gt; (e.g., random) source IP address.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The server allocates some amount of connection resources to each partial connection.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Because the connections are never established, the server may start to deny service to future legitimate requests because its memory is exhausted holding state for many half-open connections.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One mechanism invented to deal with the &lt;em&gt;SYN flood&lt;/em&gt; issue is called &lt;strong&gt;SYN cookies&lt;/strong&gt; [RFC4987].&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The main insight with SYN cookies is that most of the information that would be stored for a connection when a SYN arrives could be encoded inside the &lt;em&gt;Sequence Number&lt;/em&gt; field supplied with the SYN + ACK.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The target machine using SYN cookies need not allocate any storage for the incoming connection request—it allocates real memory only once the SYN + ACK segment has itself been acknowledged (and the initial sequence number is returned).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In that case, all the vital connection parameters can be recovered and the connection can be placed in the ESTABLISHED state.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Producing SYN cookies involves a careful selection process of the TCP ISN at servers.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Essentially, the server must encode any essential state in the &lt;em&gt;Sequence Number&lt;/em&gt; field in its SYN + ACK that is returned in the &lt;em&gt;ACK Number&lt;/em&gt; field from a legitimate client.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;socat TCP-LISTEN:6666,fork,reuseaddr,backlog&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;16 -&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-1:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;hping3 &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; 15000 &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; 120 &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-w&lt;/span&gt; 64 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 6666 &lt;span class=&quot;nt&quot;&gt;--flood&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--rand-source&lt;/span&gt; 192.168.91.128
&lt;span class=&quot;go&quot;&gt;HPING 192.168.91.128 (ens32 192.168.91.128): S set, 40 headers + 120 data bytes
hping in flood mode, no replies will be shown&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;Every 2.0s: ss -ntlao src *:6666                          node-0: Tue Jan 17 14:18:42 2023

State    Recv-Q Send-Q  Local Address:Port    Peer Address:Port Process
LISTEN   0      16            0.0.0.0:6666         0.0.0.0:*
SYN-RECV 0      0      192.168.91.128:6666 253.207.178.242:1263  timer:(on,7.796ms,4)
SYN-RECV 0      0      192.168.91.128:6666   242.132.73.92:28552 timer:(on,964ms,1)
SYN-RECV 0      0      192.168.91.128:6666    242.40.25.25:28464 timer:(on,964ms,1)
SYN-RECV 0      0      192.168.91.128:6666  253.106.78.160:28362 timer:(on,964ms,1)
SYN-RECV 0      0      192.168.91.128:6666   242.51.222.66:1282  timer:(on,7.796ms,4)
SYN-RECV 0      0      192.168.91.128:6666   241.54.238.19:1223  timer:(on,7.796ms,4)
SYN-RECV 0      0      192.168.91.128:6666    0.208.65.129:1372  timer:(on,7.796ms,4)
SYN-RECV 0      0      192.168.91.128:6666  241.21.223.166:1369  timer:(on,7.796ms,4)
SYN-RECV 0      0      192.168.91.128:6666  248.70.213.239:28376 timer:(on,964ms,1)
SYN-RECV 0      0      192.168.91.128:6666 246.188.115.108:1231  timer:(on,7.796ms,4)
SYN-RECV 0      0      192.168.91.128:6666  246.200.132.48:1203  timer:(on,7.796ms,4)
SYN-RECV 0      0      192.168.91.128:6666    242.200.4.84:28562 timer:(on,964ms,1)
SYN-RECV 0      0      192.168.91.128:6666    0.132.205.12:1237  timer:(on,7.796ms,4)
SYN-RECV 0      0      192.168.91.128:6666   241.78.102.97:28296 timer:(on,964ms,1)
SYN-RECV 0      0      192.168.91.128:6666 241.224.178.160:28432 timer:(on,964ms,1)
SYN-RECV 0      0      192.168.91.128:6666  242.241.15.118:28422 timer:(on,964ms,1)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;summary class=&quot;title&quot;&gt;&lt;em&gt;Show tcpdump trace&lt;/em&gt;&lt;/summary&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;tcpdump &lt;span class=&quot;nt&quot;&gt;-ntv&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; ens32 port 6666 and tcp
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 64, id 63705, offset 0, flags [none], proto TCP (6), length 160)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    0.196.178.163.2330 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x213b &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;correct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;724690304:724690424, win 64, length 120
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 64, id 31179, offset 0, flags [none], proto TCP (6), length 160)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    52.38.211.34.2331 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0xe51b &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;correct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1259551603:1259551723, win 64, length 120
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 64, id 1348, offset 0, flags [none], proto TCP (6), length 160)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    163.253.38.99.2332 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x8b80 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;correct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1145231226:1145231346, win 64, length 120
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 64, id 0, offset 0, flags [DF], proto TCP (6), length 44)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.6666 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;0.196.178.163.2330: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0xcfae &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0x5bce&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;2338239121, ack 724690305, win 64240, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 1460], length 0
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 64, id 0, offset 0, flags [DF], proto TCP (6), length 44)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.6666 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;52.38.211.34.2331: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x2390 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0xa7f0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1462620393, ack 1259551604, win 64240, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 1460], length 0
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 64, id 0, offset 0, flags [DF], proto TCP (6), length 44)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.6666 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;163.253.38.99.2332: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0xe6a7 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0x44c3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;4096016080, ack 1145231227, win 64240, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 1460], length 0
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 64, id 12576, offset 0, flags [none], proto TCP (6), length 160)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    33.27.153.163.2333 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0xa99c &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;correct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;547114778:547114898, win 64, length 120
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 64, id 54784, offset 0, flags [none], proto TCP (6), length 160)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    113.116.167.181.2334 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x7af2 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;correct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1087648591:1087648711, win 64, length 120
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 64, id 56408, offset 0, flags [none], proto TCP (6), length 160)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    244.134.115.210.2335 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0xa0e4 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;correct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;2011424089:2011424209, win 64, length 120
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 64, id 11115, offset 0, flags [none], proto TCP (6), length 160)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    79.107.129.40.2336 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x3d4b &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;correct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;234582353:234582473, win 64, length 120
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 64, id 35935, offset 0, flags [none], proto TCP (6), length 160)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    164.52.15.173.2337 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x7000 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;correct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1320724685:1320724805, win 64, length 120
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 128, id 45741, offset 0, flags [none], proto TCP (6), length 40)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    52.38.211.34.2331 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.6666: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;R], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x62c3 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;correct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1259551604, win 32767, length 0
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 64, id 0, offset 0, flags [DF], proto TCP (6), length 44)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.6666 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;33.27.153.163.2333: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0xd705 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0x10d7&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1459145616, ack 547114779, win 64240, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 1460], length 0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;segmentation-offloading&quot;&gt;Appendix A: Segmentation Offloading&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Unfortunately sometimes what we see in Wireshark is not what we expect. One case in which this occurs is when TCP/IP operations are offloaded by the operating system to the Network Interface Card (NIC). Common operations for offloading are segmentation and checksum calculations. That is, instead of the OS using the CPU to segment TCP packets, it allows the NIC to use its own processor to perform the segmentation. This saves on the CPU and importantly cuts down on the bus communications to/from the NIC. However offloading doesn&amp;#8217;t change what is sent over the network. In other words, offloading to the NIC can produce performance gains inside your computer, but not across the network. &lt;a href=&quot;#SOWE&quot;&gt;[SOWE]&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;How does this affect what Wireshark captures? Consider the figure below illustrating the normal flow of data through a TCP/IP stack without offloading. Lets assume the application data is 7,300 Bytes. TCP breaks this into five segments. Why five? The Maximum Transmission Unit (MTU) of Ethernet is 1500 Bytes. If we subtract the 20 Byte IP header and 20 Byte TCP header there is 1460 Bytes remaining for data in a TCP segment (this is the TCP Maximum Segment Size (MSS)). 7,300 Bytes can be conveniently segmented into five maximum sized TCP segments.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/tcp-ip/tcp-connection-management/tcp-ip-stack-without-offloading.png&quot; alt=&quot;tcp ip stack without offloading&quot; width=&quot;55%&quot; height=&quot;55%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After IP adds a header to the TCP segments the resulting IP datagrams are sent one-by-one to the &quot;Ethernet layer&quot;. Note that TCP/IP are part of operating system, while most functionality of Ethernet is implemented on the NIC. However network drivers (lets consider them part of the OS) also perform some of the Ethernet functionality. The network driver creates/receives Ethernet frames. So in the above example, assuming segmentation offloading is not used, the 7,300 Bytes of application data is segmented into 5 TCP/IP packets containing 1460 Bytes of data each. The network driver encapsulates each IP datagram in an Ethernet frame and sends the frames to the NIC. It is these Ethernet frames that Wireshark (and other packet capture software, like &lt;strong&gt;tcpdump&lt;/strong&gt;) captures. The NIC then sends the frames, one-by-one, over the network.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now consider when segmentation offloading is used (as in the figure below). The OS does not segment the application data, but instead creates one large TCP/IP packet and sends that to the driver. The TCP and IP headers are in fact template headers. The driver creates a single Ethernet frame (which is captured by Wireshark) and sends it to the NIC. Now the NIC performs the segmentation. It uses the template headers to create 5 Ethernet frames with real TCP/IP/Ethernet headers. The 5 frames are then sent over the network.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/tcp-ip/tcp-connection-management/tcp-ip-stack-with-offloading.png&quot; alt=&quot;tcp ip stack with offloading&quot; width=&quot;55%&quot; height=&quot;55%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The result: although the same 5 Ethernet frames are sent over the network, Wireshark captures different data depending on the use of segmentation offloading. When not used, the 5 Ethernet frames are captured. When offloading is used, Wireshark only captures the single, large frame (containing 7,300 bytes of data).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Queries the specified network device for the state of protocol offload and other features.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ethtool &lt;span class=&quot;nt&quot;&gt;-k&lt;/span&gt; ens32
&lt;span class=&quot;go&quot;&gt;Features for ens32:&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;rx-checksumming: off&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;tx-checksumming: on&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;	tx-checksum-ipv4: off [fixed]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;	tx-checksum-ip-generic: on&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;	tx-checksum-ipv6: off [fixed]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;	tx-checksum-fcoe-crc: off [fixed]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;	tx-checksum-sctp: off [fixed]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;scatter-gather: on&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;	tx-scatter-gather: on&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;	tx-scatter-gather-fraglist: off [fixed]&lt;/span&gt;
&lt;span class=&quot;hll&quot;&gt;&lt;span class=&quot;go&quot;&gt;tcp-segmentation-offload: on&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;	tx-tcp-segmentation: on&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;	tx-tcp-ecn-segmentation: off [fixed]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;	tx-tcp-mangleid-segmentation: off&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;	tx-tcp6-segmentation: off [fixed]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;udp-fragmentation-offload: off&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;generic-segmentation-offload: on&lt;/span&gt;
&lt;span class=&quot;hll&quot;&gt;&lt;span class=&quot;go&quot;&gt;generic-receive-offload: on&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;large-receive-offload: off [fixed]&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;.....&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;c&quot;&gt;# tso on|off&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#        Specifies whether TCP segmentation offload should be enabled.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# gro on|off&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#        Specifies whether generic receive offload should be enabled&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ethtool &lt;span class=&quot;nt&quot;&gt;-K&lt;/span&gt; ens32 tso off gro off&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist bibliography&quot;&gt;
&lt;ul class=&quot;bibliography&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;TCPIPV1&quot;&gt;&lt;/a&gt;[TCPIPV1] Kevin Fall, W. Stevens &lt;em&gt;TCP/IP Illustrated: The Protocols, Volume 1&lt;/em&gt;. 2nd edition, Addison-Wesley Professional, 2011&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;RFC1323&quot;&gt;&lt;/a&gt;[RFC1323] V. Jacobson, R. Braden, and D. Borman, &lt;em&gt;TCP Extensions for High Performance&lt;/em&gt;, Internet RFC 1323, May 1992.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;RSTATTACK&quot;&gt;&lt;/a&gt;[RSTATTACK] &lt;a href=&quot;https://en.wikipedia.org/wiki/TCP_reset_attack&quot; class=&quot;bare&quot;&gt;https://en.wikipedia.org/wiki/TCP_reset_attack&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;OFFLOADING&quot;&gt;&lt;/a&gt;[OFFLOADING] &lt;a href=&quot;https://wiki.wireshark.org/CaptureSetup/Offloading&quot; class=&quot;bare&quot;&gt;https://wiki.wireshark.org/CaptureSetup/Offloading&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;SOWE&quot;&gt;&lt;/a&gt;[SOWE] &lt;a href=&quot;https://sandilands.info/sgordon/segmentation-offloading-with-wireshark-and-ethtool&quot; class=&quot;bare&quot;&gt;https://sandilands.info/sgordon/segmentation-offloading-with-wireshark-and-ethtool&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;LAB15&quot;&gt;&lt;/a&gt;[LAB15] &lt;a href=&quot;http://ce.sc.edu/cyberinfra/workshops/Material/NTP/Lab%2015.pdf&quot; class=&quot;bare&quot;&gt;http://ce.sc.edu/cyberinfra/workshops/Material/NTP/Lab%2015.pdf&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;GSOLIB&quot;&gt;&lt;/a&gt;[GSOLIB] &lt;a href=&quot;https://doc.dpdk.org/guides/prog_guide/generic_segmentation_offload_lib.html&quot; class=&quot;bare&quot;&gt;https://doc.dpdk.org/guides/prog_guide/generic_segmentation_offload_lib.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;NSO&quot;&gt;&lt;/a&gt;[NSO] &lt;a href=&quot;https://docs.kernel.org/networking/segmentation-offloads.html&quot; class=&quot;bare&quot;&gt;https://docs.kernel.org/networking/segmentation-offloads.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><category term="networking" /><category term="networking" /><category term="tcp" /></entry><entry><title type="html">TCP/IP: Introduction to TCP</title><link href="https://blog.codefarm.me/2023/01/09/tcp-ip-introduction-to-tcp/" rel="alternate" type="text/html" title="TCP/IP: Introduction to TCP" /><published>2023-01-09T08:53:28+08:00</published><updated>2023-01-09T08:53:28+08:00</updated><id>https://blog.codefarm.me/2023/01/09/tcp-ip-introduction-to-tcp</id><content type="html" xml:base="https://blog.codefarm.me/2023/01/09/tcp-ip-introduction-to-tcp/">&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#arq-and-retransmission&quot;&gt;1. ARQ and Retransmission&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#windows-of-packets-and-sliding-windows&quot;&gt;1.1. Windows of Packets and Sliding Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#variable-windows-flow-control-and-congestion-control&quot;&gt;1.2. Variable Windows: Flow Control and Congestion Control&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#setting-the-retransmission-timeout&quot;&gt;1.3. Setting the Retransmission Timeout&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#introduction-to-tcp&quot;&gt;2. Introduction to TCP&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#the-tcp-service-model&quot;&gt;2.1. The TCP Service Model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#reliability-in-tcp&quot;&gt;2.2. Reliability in TCP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#tcp-header-and-encapsulation&quot;&gt;3. TCP Header and Encapsulation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#summary&quot;&gt;4. Summary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#references&quot;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So far we have been discussing protocols that do not include their own mechanisms for delivering data reliably.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;They may &lt;em&gt;detect&lt;/em&gt; that erroneous data has been received, using a mathematical function such as a checksum or CRC, but they do not try very hard to repair errors.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;With IP and UDP, no error repair is done at all.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;With Ethernet and other protocols based on it, the protocol provides some number of &lt;em&gt;retries&lt;/em&gt; and then gives up if it cannot succeed.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The problem of communicating in environments where the communication medium may lose or alter the messages being delivered has been studied for years.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Some of the most important theoretical work on the topic was developed by &lt;strong&gt;Claude Shannon&lt;/strong&gt; in 1948.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This work, which popularized the term &lt;strong&gt;&lt;em&gt;bit&lt;/em&gt;&lt;/strong&gt; and became the foundation of the field of &lt;strong&gt;&lt;em&gt;information theory&lt;/em&gt;&lt;/strong&gt;, helps us understand the fundamental limits on the amount of information that can be moved across an information channel that is lossy (that may delete or alter bits).&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Information theory is closely related to the field of &lt;strong&gt;&lt;em&gt;coding theory&lt;/em&gt;&lt;/strong&gt;, which provides ways of encoding information so that it is as resilient as possible to errors in the communications channel.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Using &lt;em&gt;error-correcting codes&lt;/em&gt; (basically, adding redundant bits so that the real information can be retrieved even if some bits are damaged) to correct communications problems is one very important method for handling errors.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Another is to simply &quot;try sending again&quot; until the information is finally received. This approach, called &lt;strong&gt;Automatic Repeat Request&lt;/strong&gt; (ARQ), forms the basis for many communications protocols, including TCP.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;arq-and-retransmission&quot;&gt;1. ARQ and Retransmission&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If we consider not only a single communication channel but the &lt;em&gt;multihop&lt;/em&gt; cascade of several, we realize that not only may we have the types of errors mentioned so far (&lt;em&gt;packet bit errors&lt;/em&gt;), but there may be others which  might arise at an &lt;em&gt;intermediate router&lt;/em&gt; and are the types of problems we brought up when discussing IP: &lt;em&gt;packet reordering&lt;/em&gt;, &lt;em&gt;packet duplication&lt;/em&gt;, and &lt;em&gt;packet erasures (drops)&lt;/em&gt;. An errorcorrecting protocol designed for use over a &lt;em&gt;multihop communications channel&lt;/em&gt; (such as IP) must cope with all of these problems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A straightforward method of dealing with &lt;strong&gt;&lt;em&gt;packet drops&lt;/em&gt;&lt;/strong&gt; (and bit errors) is to &lt;em&gt;resend&lt;/em&gt; the packet until it is received properly. This requires a way to determine&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(1) whether the receiver has received the packet and&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(2) whether the packet it received was the same one the sender sent.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The method for a receiver to signal to a sender that it has received a packet is called an &lt;strong&gt;&lt;em&gt;acknowledgment&lt;/em&gt;&lt;/strong&gt;, or ACK. In its most basic form,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the sender sends a packet and awaits an ACK.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When the receiver receives the packet, it sends the ACK.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When the sender receives the ACK, it sends another packet, and the process continues.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Interesting questions to ask here are&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(1) How long should the sender wait for an ACK?&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Deciding how long to wait relates to how long the sender should &lt;em&gt;expect&lt;/em&gt; to wait for an ACK.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(2) What if the ACK is lost?&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If an ACK is dropped, the sender cannot readily distinguish this case from the case in which the original packet is dropped, so it simply sends the packet again.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Of course, the receiver may receive two or more copies in that case, so it must be prepared to handle that situation.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(3) What if the packet was received but had errors in it?&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is generally much easier to use codes to &lt;em&gt;detect&lt;/em&gt; errors in a large packet (with high probability) using only a few bits than it is to correct them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Simpler codes are typically not capable of correcting errors but are capable of detecting them. That is why checksums and CRCs are so popular.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order to detect errors in a packet, then, we use a form of checksum.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When a receiver receives a packet containing an error, it refrains from sending an ACK. Eventually, the sender resends the packet, which ideally arrives undamaged.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Even with the simple scenario presented so far, there is the possibility that the receiver might receive &lt;em&gt;duplicate copies&lt;/em&gt; of the packet being transferred. This problem is addressed using a &lt;strong&gt;&lt;em&gt;sequence number&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Basically, every unique packet gets a new sequence number when it is sent at the source, and this sequence number is carried along in the packet itself.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The receiver can use this number to determine whether it has already seen the packet and if so, discard it.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The protocol described so far is reliable but not very efficient.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Consider what happens when the time to deliver even a small packet from sender to receiver (the delay or latency) is large (e.g., a second or two, which is not unusual for satellite links) and there are several packets to send.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The sender is able to inject a single packet into the communications path but then must stop until it hears the ACK. This protocol is therefore called &quot;stop and wait&quot;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Its throughput performance (data sent on the network per unit time) is proportional to &lt;em&gt;M/R&lt;/em&gt; where &lt;em&gt;M&lt;/em&gt; is the packet size and &lt;em&gt;R&lt;/em&gt; is the round-trip time (RTT), assuming no packets are lost or irreparably damaged in transit.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For a fixed-size packet, as &lt;em&gt;R&lt;/em&gt; goes up, the throughput goes down. If packets are lost or damaged, the situation is even worse: the &quot;&lt;em&gt;goodput&lt;/em&gt;&quot; (useful amount of data transferred per unit time) can be considerably less than the throughput.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For a network that doesn&amp;#8217;t damage or drop many packets, the cause for low throughput is usually that the network is not being kept busy. The situation is similar to using an assembly line where new work cannot enter the line until a complete product emerges. Most of the line goes idle. If we take this comparison one step further, it seems obvious that we would do better if we could have more than one work unit in the line at a time. It is the same for network communication—if we could have more than one packet in the network, we would keep it &quot;more busy&quot;, leading to higher throughput.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Allowing more than one packet to be in the network at a time complicates matters considerably.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Now the sender must decide not only when to inject a packet into the network, but also how many.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It also must figure out how to keep the timers when waiting for ACKs, and it must keep a copy of each packet not yet acknowledged in case retransmissions are necessary.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The receiver needs to have a more sophisticated ACK mechanism: one that can distinguish which packets have been received and which have not.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The receiver may need a more sophisticated buffering (packet storage) mechanism—one that allows it to hold &quot;out-of-sequence&quot; packets (those packets that have arrived earlier than those expected because of loss or reordering), unless it simply wants to throw away such packets, which is very inefficient.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;windows-of-packets-and-sliding-windows&quot;&gt;1.1. Windows of Packets and Sliding Windows&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To handle all of these problems,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;we begin with the assumption that each unique packet has a &lt;strong&gt;sequence number&lt;/strong&gt;, as described earlier.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We define a &lt;strong&gt;window&lt;/strong&gt; of packets as the collection of packets (or their sequence numbers) that have been injected by the sender but not yet completely acknowledged (i.e., the sender has not received an ACK for them).&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We refer to the &lt;strong&gt;window size&lt;/strong&gt; as the number of packets in the window.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/tcp-ip/introduction-to-tcp/window.png&quot; alt=&quot;TCP Window&quot; width=&quot;55%&quot; height=&quot;55%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. The sender&amp;#8217;s window, showing which packets are eligible to be sent (or have already been sent), which are not yet eligible, and which have already been sent and acknowledged. In this example, the window size is fixed at three packets.&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;This figure shows the current window of three packets, for a total window size of 3.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Packet number 3 has already been sent and acknowledged, so the copy of it that the sender was keeping can now be released.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Packet 7 is ready at the sender but not yet able to be sent because it is not yet &quot;in&quot; the window.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If we now imagine that data starts to flow from the sender to the receiver and ACKs start to flow in the reverse direction, the sender might next receive an ACK for packet 4.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When this happens, the window &quot;slides&quot; to the right by one packet, meaning that the copy of packet 4 can be released and packet 7 can be sent.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This movement of the window gives rise to another name for this type of protocol, a &lt;strong&gt;sliding window&lt;/strong&gt; protocol.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The sliding window approach can be used to combat many of the problems described so far. Typically, this window structure is kept at both the sender and the receiver.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;At the sender, it keeps track of what packets can be released, what packets are awaiting ACKs, and what packets cannot yet be sent.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;At the receiver, it keeps track of what packets have already been received and acknowledged, what packets are expected (and how much memory has been allocated to hold them), and which packets, even if received, will not be kept because of limited memory.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;variable-windows-flow-control-and-congestion-control&quot;&gt;1.2. Variable Windows: Flow Control and Congestion Control&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To handle the problem that arises when a receiver is too slow relative to a sender, we introduce a way to force the sender to slow down when the receiver cannot keep up. This is called &lt;strong&gt;flow control&lt;/strong&gt; and is usually handled in one of two ways.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;One way, called &lt;strong&gt;rate-based&lt;/strong&gt; flow control, gives the sender a certain data rate allocation and ensures that data is never allowed to be sent at a rate that exceeds the allocation.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This type of flow control is most appropriate for streaming applications and can be used with broadcast and multicast delivery.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The other predominant form of flow control is called &lt;strong&gt;window-based&lt;/strong&gt; flow control and is the most popular approach when sliding windows are being used.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this approach, the window size is not fixed but is instead allowed to vary over time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To achieve flow control using this technique, there must be a method for the receiver to signal the sender how large a window to use. This is typically called a &lt;strong&gt;&lt;em&gt;window advertisement&lt;/em&gt;&lt;/strong&gt;, or simply a &lt;strong&gt;&lt;em&gt;window update&lt;/em&gt;&lt;/strong&gt;. This value is used by the sender (i.e., the receiver of the window advertisement) to adjust its window size.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Logically, a window update is separate from the ACKs we discussed previously, but &lt;em&gt;in practice the window update and ACK are carried in a single packet&lt;/em&gt;, meaning that the sender tends to adjust the size of its window at the same time it slides it to the right.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If we consider the effect of changing the window size at the sender, it becomes clear how this achieves flow control.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The sender is allowed to inject &lt;em&gt;W&lt;/em&gt; packets into the network before it hears an ACK for any of them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the sender and receiver are sufficiently fast, and the network loses no packets and has an infinite capacity, this means that the transfer rate is proportional to (&lt;em&gt;SW/R&lt;/em&gt;) bits/s, where &lt;em&gt;W&lt;/em&gt; is the window size, &lt;em&gt;S&lt;/em&gt; is the packet size in bits, and &lt;em&gt;R&lt;/em&gt; is the RTT.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When the window advertisement from the receiver clamps the value of &lt;em&gt;W&lt;/em&gt; at the sender, the sender&amp;#8217;s overall rate can be limited so as to not overwhelm the receiver.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This approach works fine for protecting the receiver, but what about the network in between?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We may have routers with limited memory between the sender and the receiver that have to contend with slow network links. When this happens, it is possible for the sender&amp;#8217;s rate to exceed a router&amp;#8217;s ability to keep up, leading to packet loss. This is addressed with a special form of flow control called &lt;strong&gt;congestion control&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Congestion control involves the sender slowing down so as to not overwhelm the network between itself and the receiver.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Recall that in our discussion of flow control, we used a window advertisement to signal the sender to slow down for the receiver.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is called &lt;strong&gt;&lt;em&gt;explicit signaling&lt;/em&gt;&lt;/strong&gt;, because there is a protocol field specifically used to inform the sender about what is happening.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Another option might be for the sender to &lt;em&gt;guess&lt;/em&gt; that it needs to slow down.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Such an approach would involve &lt;strong&gt;&lt;em&gt;implicit signaling&lt;/em&gt;&lt;/strong&gt;—that is, it would involve deciding to slow down based on some other evidence.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;setting-the-retransmission-timeout&quot;&gt;1.3. Setting the Retransmission Timeout&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of the most important performance issues the designer of a retransmissionbased reliable protocol faces is how long to wait before concluding that a packet has been lost and should be resent.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Stated another way, What should the retransmission timeout be?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Intuitively, the amount of time the sender should wait before resending a packet is about the sum of the following times:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the time to send the packet,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the time for the receiver to process it and send an ACK,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the time for the ACK to travel back to the sender,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;and the time for the sender to process the ACK.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Unfortunately, in practice, none of these times are known with certainty. To make matters worse, any or all of them vary over time as additional load is added to or removed from the end hosts or routers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Because it is not practical for the user to tell the protocol implementation what the values of all the times are (or to keep them up-to-date) for all circumstances, a better strategy is to have the protocol implementation try to estimate them. This is called &lt;strong&gt;round-trip-time estimation&lt;/strong&gt; and is a statistical process.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Basically , the true RTT is likely to be close to the sample mean of a collection of samples of RTTs. Note that this average naturally changes over time (it is not stationary), as the paths taken through the network may change.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once some estimate of the RTT is made, the question of setting the actual timeout value, used to trigger retransmissions, remains.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If we recall the definition of a mean, it can never be the extreme value of a set of samples (unless they are all the same).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;So, it would not be sensible to set the retransmission timer to be exactly equal to the mean estimator, as it is likely that many actual RTTs will be larger, thereby inducing unwanted retransmissions.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Clearly, the timeout should be set to something larger than the mean, but exactly what this relationship is (or even if the mean should be directly used) is not yet clear.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Setting the timeout too large is also undesirable, as this leads back to letting the network go idle, reducing throughput.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;introduction-to-tcp&quot;&gt;2. Introduction to TCP&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Given the background we now have regarding the issues affecting reliable delivery in general, let us see how they play out in TCP and what type of service it provides to Internet applications.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;the-tcp-service-model&quot;&gt;2.1. The TCP Service Model&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Even though TCP and UDP use the same network layer (IPv4 or IPv6), TCP provides a totally different service to the application layer from what UDP does.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;TCP provides a &lt;strong&gt;&lt;em&gt;connection-oriented&lt;/em&gt;&lt;/strong&gt;, reliable, byte stream service.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The term connection-oriented means that the two applications using TCP must establish a TCP connection by contacting each other before they can exchange data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The typical analogy is dialing a telephone number, waiting for the other party to answer the phone and saying &quot;Hello&quot;, and then saying &quot;Who&amp;#8217;s calling?&quot;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There are exactly two endpoints communicating with each other on a TCP connection; concepts such as broadcasting and multicasting are not applicable to TCP.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The TCP provides a &lt;strong&gt;&lt;em&gt;byte stream&lt;/em&gt;&lt;/strong&gt; abstraction to applications that use it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The consequence of this design decision is that no &lt;em&gt;record markers&lt;/em&gt; or &lt;em&gt;message boundaries&lt;/em&gt; are automatically inserted by TCP. A record marker corresponds to an indication of an application&amp;#8217;s write extent.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If the application on one end writes 10 bytes, followed by a write of 20 bytes, followed by a write of 50 bytes, the application at the other end of the connection cannot tell what size the individual writes were.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example, the other end may read the 80 bytes in four reads of 20 bytes at a time or in some other way.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;One end puts a stream of bytes into TCP, and the identical stream of bytes appears at the other end.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Each endpoint individually chooses its read and write sizes.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;TCP does not interpret the contents of the bytes in the byte stream at all.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It has no idea if the data bytes being exchanged are binary data, ASCII characters, EBCDIC characters, or something else.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The interpretation of this byte stream is up to the applications on each end of the connection.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TCP does, however, support the urgent mechanism mentioned before, although it is no longer recommended for use.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;reliability-in-tcp&quot;&gt;2.2. Reliability in TCP&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Because TCP provides a byte stream interface, it must convert a sending application&amp;#8217;s stream of bytes into a set of packets that IP can carry. This is called &lt;strong&gt;&lt;em&gt;packetization&lt;/em&gt;&lt;/strong&gt;. These packets contain sequence numbers, which in TCP actually represent the byte offsets of the first byte in each packet in the overall data stream rather than packet numbers. This allows packets to be of variable size during a transfer and may also allow them to be combined, called &lt;strong&gt;&lt;em&gt;repacketization&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The application data is broken into what TCP considers the best-size chunks to send, typically fitting each segment into a single IP-layer datagram that will not be fragmented. This is different from UDP, where each write by the application usually generates a UDP datagram of that size (plus headers). The chunk passed by TCP to IP is called a &lt;strong&gt;segment&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;TCP maintains a mandatory checksum on its header, any associated application data, and fields from the IP header.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This is an &lt;em&gt;end-to-end pseudo-header checksum&lt;/em&gt; whose purpose is to detect any bit errors introduced in transit.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If a segment arrives with an invalid checksum, TCP discards it without sending any acknowledgment for the discarded packet.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The receiving TCP might acknowledge a &lt;em&gt;previous&lt;/em&gt; (already acknowledged) segment, however, to help the sender with its congestion control computations.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The TCP checksum uses the same mathematical function as is used by other Internet protocols (UDP, ICMP, etc.).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When TCP sends a group of segments, it normally sets a single retransmission timer, waiting for the other end to acknowledge reception.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;TCP does not set a different retransmission timer for every segment.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rather, it sets a timer when it sends a window of data and updates the timeout as ACKs arrive.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If an acknowledgment is not received in time, a segment is retransmitted.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When TCP receives data from the other end of the connection, it sends an acknowledgment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This acknowledgment may not be sent immediately but is normally delayed a fraction of a second.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The ACKs used by TCP are cumulative in the sense that an ACK indicating byte number &lt;em&gt;N&lt;/em&gt; implies that all bytes up to number &lt;em&gt;N&lt;/em&gt; (but not including it) have already been received successfully.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This provides some robustness against ACK loss—if an ACK is lost, it is very likely that a subsequent ACK is sufficient to ACK the previous segments.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;TCP provides a full-duplex service to the application layer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This means that data can be flowing in each direction, independent of the other direction.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Therefore, each end of a connection must maintain a sequence number of the data flowing in each direction.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Once a connection is established, every TCP segment that contains data flowing in one direction of the connection also includes an ACK for segments flowing in the opposite direction.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Each segment also contains a window advertisement for implementing flow control in the opposite direction.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thus, when a TCP segment arrives on a connection, the window may slide forward, the window size may change, and new data may have arrived.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Using sequence numbers, a receiving TCP discards duplicate segments and reorders segments that arrive out of order.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Recall that any of these anomalies can happen because TCP uses IP to deliver its segments, and IP does not provide duplicate elimination or guarantee correct ordering.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Because it is a byte stream protocol, however, TCP never delivers data to the receiving application out of order.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thus, the receiving TCP may be forced to hold on to data with larger sequence numbers before giving it to an application until a missing lower-sequence-numbered segment (a &quot;hole&quot;) is filled in.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;tcp-header-and-encapsulation&quot;&gt;3. TCP Header and Encapsulation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/tcp-ip/introduction-to-tcp/tcp-segment-in-ip-datagram.png&quot; alt=&quot;TCP segement in IP datagram&quot; width=&quot;65%&quot; height=&quot;65%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2. The TCP header appears immediately following the IP header or last IPv6 extension header and is often 20 bytes long (with no TCP options). With options, the TCP header can be as large as 60 bytes. Common options include &lt;em&gt;Maximum Segment Size&lt;/em&gt;, &lt;em&gt;Timestamps&lt;/em&gt;, &lt;em&gt;Window Scaling&lt;/em&gt;, and &lt;em&gt;Selective ACKs&lt;/em&gt;.&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/tcp-ip/introduction-to-tcp/tcp-header.png&quot; alt=&quot;TCP header&quot; width=&quot;65%&quot; height=&quot;65%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 3. The TCP header. Its normal size is 20 bytes, unless options are present. The &lt;em&gt;Header Length&lt;/em&gt; field gives the size of the header in 32-bit words (minimum value is 5). The shaded fields (&lt;em&gt;Acknowledgment Number&lt;/em&gt;, &lt;em&gt;Window Size&lt;/em&gt;, plus &lt;em&gt;ECE&lt;/em&gt; and &lt;em&gt;ACK&lt;/em&gt; bits) refer to the data flowing in the opposite direction relative to the sender of this segment.&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Each TCP header contains the source and destination port number.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;These two values, along with the source and destination IP addresses in the IP header, uniquely identify each connection.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The combination of an IP address and a port number is sometimes called an &lt;strong&gt;&lt;em&gt;endpoint&lt;/em&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;em&gt;socket&lt;/em&gt;&lt;/strong&gt; in the TCP literature.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The latter term appeared in [RFC0793] and was ultimately adopted as the name of the Berkeley-derived programming interface for network communications (now frequently called &quot;Berkeley sockets&quot;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is a &lt;strong&gt;&lt;em&gt;pair&lt;/em&gt;&lt;/strong&gt; of sockets or endpoints (the 4-tuple consisting of the client IP address, client port number, server IP address, and server port number) that uniquely identifies each TCP connection.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;em&gt;Sequence Number&lt;/em&gt; field identifies the byte in the stream of data from the sending TCP to the receiving TCP that the first byte of data in the containing segment represents.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Sequence number (32 bits)&lt;/div&gt;
&lt;p&gt;Has a dual role: &lt;a href=&quot;#WIKITCP&quot;&gt;[WIKITCP]&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If the SYN flag is set (1), then this is the initial sequence number. The sequence number of the actual first data byte and the acknowledged number in the corresponding ACK are then this sequence number plus 1.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the SYN flag is clear (0), then this is the accumulated sequence number of the first data byte of this segment for the current session.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If we consider the stream of bytes flowing in one direction between two applications, TCP numbers each byte with a sequence number.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This sequence number is a 32-bit unsigned number that wraps back around to 0 after reaching (2&lt;sup&gt;32&lt;/sup&gt;) − 1.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Because every byte exchanged is numbered, the &lt;em&gt;Acknowledgment Number&lt;/em&gt; field (also called the &lt;em&gt;ACK Number&lt;/em&gt; or &lt;em&gt;ACK&lt;/em&gt; field for short) contains the next sequence number that the sender of the acknowledgment expects to receive.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is therefore the sequence number of the last successfully received byte of data plus 1.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This field is valid only if the &lt;em&gt;ACK&lt;/em&gt; bit field is on, which it usually is for all but initial and closing segments.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sending an ACK costs nothing more than sending any other TCP segment because the 32-bit &lt;em&gt;ACK Number&lt;/em&gt; field is always part of the header, as is the &lt;em&gt;ACK&lt;/em&gt; bit field.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When a new connection is being established, the &lt;em&gt;SYN&lt;/em&gt; bit field is turned on in the first segment sent from client to server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Such segments are called &lt;em&gt;SYN segments&lt;/em&gt;, or simply &lt;em&gt;SYNs&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;em&gt;Sequence Number&lt;/em&gt; field then contains the first sequence number to be used on that direction of the connection for subsequent sequence numbers and in returning ACK numbers (recall that connections are all bidirectional).&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that this number is not 0 or 1 but instead is another number, often randomly chosen, called the &lt;strong&gt;&lt;em&gt;initial sequence number&lt;/em&gt;&lt;/strong&gt; (ISN). The reason for the ISN not being 0 or 1 is a security measure.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The sequence number of the first byte of data sent on this direction of the connection is the ISN plus 1 because the &lt;em&gt;SYN&lt;/em&gt; bit field consumes one sequence number.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Consuming a sequence number also implies reliable delivery using retransmission.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thus, &lt;em&gt;SYNs&lt;/em&gt; and application bytes (and &lt;em&gt;FINs&lt;/em&gt;) are reliably delivered.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;ACKs, which do not consume sequence numbers, are not.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;TCP can be described as &lt;em&gt;a sliding window protocol with cumulative positive acknowledgments&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The &lt;em&gt;ACK Number&lt;/em&gt; field is constructed to indicate the largest byte received in order at the receiver (plus 1).&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example, if bytes 1–1024 are received OK, and the next segment contains bytes 2049–3072, the receiver cannot use the regular &lt;em&gt;ACK Number&lt;/em&gt; field to signal the sender that it received this new segment.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Modern TCPs, however, have a &lt;em&gt;selective acknowledgment&lt;/em&gt; (SACK) option that allows the receiver to indicate to the sender out-of-order data it has received correctly. When paired with a TCP sender capable of &lt;em&gt;selective repeat&lt;/em&gt;, a significant performance benefit may be realized.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;em&gt;Header Length&lt;/em&gt; field gives the length of the header in 32-bit words.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This is required because the length of the &lt;em&gt;Options&lt;/em&gt; field is variable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;With a 4-bit field, TCP is limited to a 60-byte header.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Without options, however, the size is 20 bytes.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Currently eight bit fields are defined for the TCP header, although some older implementations understand only the last six of them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;CWR&lt;/strong&gt;—Congestion Window Reduced (the sender reduced its sending rate);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ECE&lt;/strong&gt;—ECN Echo (the sender received an earlier congestion notification);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;URG&lt;/strong&gt;—Urgent (the Urgent Pointer field is valid—rarely used);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ACK&lt;/strong&gt;—Acknowledgment (the Acknowledgment Number field is valid—always on after a connection is established);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;PSH&lt;/strong&gt;—Push (the receiver should pass this data to the application as soon as possible—not reliably implemented or used);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;RST&lt;/strong&gt;—Reset the connection (connection abort, usually because of an error);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;SYN&lt;/strong&gt;—Synchronize sequence numbers to initiate a connection;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;FIN&lt;/strong&gt;—The sender of the segment is finished sending data to its peer;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;TCP&amp;#8217;s flow control is provided by each end advertising a window size using the &lt;em&gt;Window Size&lt;/em&gt; field.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This is the number of bytes, starting with the one specified by the ACK number, that the receiver is willing to accept.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This is a 16-bit field, limiting the window to 65,535 bytes, and thereby limiting TCP&amp;#8217;s throughput performance.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;em&gt;Window Scale&lt;/em&gt; option that allows this value to be scaled, providing much larger windows and improved performance for high-speed and long-delay networks.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The TCP &lt;em&gt;Checksum&lt;/em&gt; field covers the TCP header and data and some fields in the IP header, using a pseudo-header computation similar to the one used with ICMPv6 and UDP.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It is mandatory for this field to be calculated and stored by the sender, and then verified by the receiver.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The TCP checksum is calculated with the same algorithm as the IP, ICMP, and UDP (&quot;Internet&quot;) checksums.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;em&gt;Urgent Pointer&lt;/em&gt; field is valid only if the &lt;em&gt;URG&lt;/em&gt; bit field is set.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This &quot;pointer&quot; is a positive offset that must be added to the &lt;em&gt;Sequence Number&lt;/em&gt; field of the segment to yield the sequence number of the last byte of urgent data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TCP&amp;#8217;s urgent mechanism is a way for the sender to provide specially marked data to the other end.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The most common &lt;em&gt;Option&lt;/em&gt; field is the &lt;em&gt;Maximum Segment Size&lt;/em&gt; option, called the &lt;em&gt;MSS&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Each end of a connection normally specifies this option on the first segment it sends (the ones with the &lt;em&gt;SYN&lt;/em&gt; bit field set to establish the connection).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;em&gt;MSS&lt;/em&gt; option specifies the maximum-size segment that the sender of the option is willing to receive in the reverse direction.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Other common options we investigate include &lt;em&gt;SACK&lt;/em&gt;, &lt;em&gt;Timestamp&lt;/em&gt;, and &lt;em&gt;Window Scale&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;summary&quot;&gt;4. Summary&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The problem of providing reliable communications over lossy communication channels has been studied for years. The two primary methods for dealing with errors include &lt;strong&gt;error-correcting codes&lt;/strong&gt; and &lt;strong&gt;data retransmission&lt;/strong&gt;. The protocols using retransmissions must also handle data loss, usually by setting a timer, and must also arrange some way for the receiver to signal the sender what it has received. Deciding how long to wait for an ACK can be tricky, as the appropriate time may change as network routing or load on the end systems varies. Modern protocols estimate the round-trip time and set the retransmission timer based on some function of these measurements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Except for setting the retransmission timer, retransmission protocols are simple when only one packet may be in the network at one time, but they perform poorly for networks where the delay is high. To be more efficient, multiple packets must be injected into the network before an ACK is received. This approach is more efficient but also more complex. A typical approach to managing the complexity is to use &lt;strong&gt;sliding windows&lt;/strong&gt;, whereby packets are marked with sequence numbers, and the window size bounds the number of such packets. When the window size varies based on either feedback from the receiver or other signals (such as dropped packets), both flow control and congestion control can be achieved.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;TCP provides a &lt;strong&gt;reliable&lt;/strong&gt;, &lt;strong&gt;connection-oriented&lt;/strong&gt;, &lt;strong&gt;byte stream&lt;/strong&gt;, transport-layer service built using many of these techniques. We looked briefly at all of the fields in the TCP header, noting that most of them are directly related to these abstract concepts in reliable delivery. TCP packetizes the application data into &lt;strong&gt;segments&lt;/strong&gt;, sets a timeout anytime it sends data, acknowledges data received by the other end, reorders out-of-order data, discards duplicate data, provides end-to-end flow control, and calculates and verifies a mandatory end-to-end checksum. It is the most widely used protocol on the Internet. It is used by most of the popular applications, such as HTTP, SSH/TLS, NetBIOS (NBT—NetBIOS over TCP), Telnet, FTP, and electronic mail (SMTP). Many distributed file-sharing applications (e.g., BitTorrent, Shareaza) also use TCP.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist bibliography&quot;&gt;
&lt;ul class=&quot;bibliography&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;tcp_ip_vol_1&quot;&gt;&lt;/a&gt;[1] Kevin Fall, W. Stevens &lt;em&gt;TCP/IP Illustrated: The Protocols, Volume 1&lt;/em&gt;. 2nd edition, Addison-Wesley Professional, 2011&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;WIKITCP&quot;&gt;&lt;/a&gt;[WIKITCP] &lt;a href=&quot;https://en.wikipedia.org/wiki/Transmission_Control_Protocol#TCP_segment_structure&quot; class=&quot;bare&quot;&gt;https://en.wikipedia.org/wiki/Transmission_Control_Protocol#TCP_segment_structure&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><category term="networking" /><category term="networking" /><category term="tcp" /></entry><entry><title type="html">TCP/IP: Name Resolution and the Domain Name System (DNS)</title><link href="https://blog.codefarm.me/2022/12/09/tcp-ip-name-resolution-and-the-domain-name-system/" rel="alternate" type="text/html" title="TCP/IP: Name Resolution and the Domain Name System (DNS)" /><published>2022-12-09T09:35:45+08:00</published><updated>2022-12-09T09:35:45+08:00</updated><id>https://blog.codefarm.me/2022/12/09/tcp-ip-name-resolution-and-the-domain-name-system</id><content type="html" xml:base="https://blog.codefarm.me/2022/12/09/tcp-ip-name-resolution-and-the-domain-name-system/">&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#the-dns-name-space&quot;&gt;1. The DNS Name Space&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#dns-naming-syntax&quot;&gt;1.1. DNS Naming Syntax&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#name-servers-and-zones&quot;&gt;2. Name Servers and Zones&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#caching&quot;&gt;3. Caching&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#the-dns-protocol&quot;&gt;4. The DNS Protocol&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#dns-message-format&quot;&gt;4.1. DNS Message Format&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#udp-or-tcp&quot;&gt;4.2. UDP or TCP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#question-query-and-zone-section-format&quot;&gt;4.3. Question (Query) and Zone Section Format&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#answer-authority-and-additional-information-section-formats&quot;&gt;4.4. Answer, Authority, and Additional Information Section Formats&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#resource-record-types&quot;&gt;4.5. Resource Record Types&lt;/a&gt;
&lt;ul class=&quot;sectlevel3&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#authority-soa-records&quot;&gt;4.5.1. Authority (SOA) Records&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#mail-exchanger-mx-records&quot;&gt;4.5.2. Mail Exchanger (MX) Records&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#fighting-spam-the-sender-policy-framework-spf-and-text-txt-records&quot;&gt;4.5.3. Fighting Spam: The Sender Policy Framework (SPF) and Text (TXT) Records&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#zone-transfers-and-dns-notify&quot;&gt;4.6. Zone Transfers and DNS NOTIFY&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sort-lists-round-robin-and-split-dns&quot;&gt;5. Sort Lists, Round-Robin, and Split DNS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#open-dns-servers-and-dyndns&quot;&gt;6. Open DNS Servers and DynDNS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#llmnr-and-mdns&quot;&gt;7. LLMNR and mDNS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#references&quot;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;IP addresses (especially IPv6 addresses) are cumbersome for humans to use and remember, so the Internet supports the use of &lt;strong&gt;host names&lt;/strong&gt; to identify hosts, both clients and servers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order to be used by protocols such as TCP and IP, host names are converted into IP addresses using a process known as &lt;strong&gt;name resolution&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are different forms of name resolution in the Internet, but the most prevalent and important one uses a distributed database system known as the &lt;strong&gt;Domain Name System (DNS)&lt;/strong&gt; .&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;DNS is a distributed client/server networked database that is used by TCP/IP applications to map between host names and IP addresses (and vice versa).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;DNS runs as an application on the Internet, using IPv4 or IPv6 (or both).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For scalability, DNS names are hierarchical, as are the servers that support name resolution.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;From an application&amp;#8217;s point of view, access to the DNS is through an application library called a &lt;strong&gt;resolver&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In general, an application must convert a host name to an IPv4 and/or IPv6 address before it can ask TCP to open a connection or send a unicast datagram using UDP.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The TCP and IP protocol implementations know nothing about the DNS; they operate only with the addresses.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-dns-name-space&quot;&gt;1. The DNS Name Space&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The set of all names used with DNS constitutes the DNS &lt;strong&gt;name space&lt;/strong&gt;. This space is partitioned hierarchically and is case insensitive, similar to computer file system folders (directories) and files.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The current DNS name space is a tree of domains with an &lt;strong&gt;unnamed root&lt;/strong&gt; at the top. The top echelons of the tree are the so-called &lt;strong&gt;top-level domains (TLDs)&lt;/strong&gt;, which include&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;generic TLDs (gTLDs),&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;country-code TLDs (ccTLDs),&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;and internationalized country-code TLDs (IDN ccTLDs), plus a special infrastructure TLD called,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;for historical reasons, ARPA [RFC3172].&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/tcp-ip/name-resolution-and-the-domain-name-system/dns-name-space.png&quot; alt=&quot;DNS Name Space&quot; width=&quot;75%&quot; height=&quot;75%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. The DNS name space forms a hierarchy with an unnamed root at the top. The top-level domains (TLDs) include generic TLDs (gTLDs), country-code TLDs (ccTLDs), internationalized TLDs (IDN ccTLDs), and a special infrastructure TLD called &lt;em&gt;ARPA&lt;/em&gt;.&lt;/div&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 1. Special-use domain name&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 10%;&quot;&gt;
&lt;col style=&quot;width: 70%;&quot;&gt;
&lt;col style=&quot;width: 20%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Domain&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Purpose&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Reference&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;intranet.&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot; rowspan=&quot;6&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Used for Private/internal DNS Namespaces&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot; rowspan=&quot;6&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;RFC 6762 (Appendix G)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;internal.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;private.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;corp.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;home.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;lan.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;local.&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Used for &lt;em&gt;Multicast DNS&lt;/em&gt; as link-local host names&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;RFC 6762 (Section 3)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;localhost.&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Reserved to avoid conflict with the traditional use of &lt;em&gt;localhost&lt;/em&gt; as a hostname&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;RFC 6761&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;onion.&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Anonymous onion service&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;RFC 7686&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;RFC 6762 reserves the use of &lt;em&gt;.local&lt;/em&gt; for link-local host names that can be resolved via the Multicast DNS name resolution protocol.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RFC 7686 reserves the use of &lt;em&gt;.onion&lt;/em&gt; for the self-authenticating names of &lt;em&gt;Tor onion services&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;dns-naming-syntax&quot;&gt;1.1. DNS Naming Syntax&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The names below a TLD in the DNS name tree are further partitioned into groups known as &lt;strong&gt;subdomains&lt;/strong&gt;. This is very common practice, especially for the ccTLDs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example, the site &lt;em&gt;www.ci.manhattan-beach.ca.us&lt;/em&gt; is the site of Manhattan Beach, California&amp;#8217;s, city government in the United States, also known as &lt;strong&gt;fully qualified domain names&lt;/strong&gt; (FQDNs).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;FQDNs are sometimes written more formally with a trailing period (e.g., &lt;em&gt;mit.edu.&lt;/em&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The trailing period indicates that the name is complete; no additional information should be added to the name when performing a name resolution.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In contrast to the FQDN, an &lt;strong&gt;unqualified domain name&lt;/strong&gt;, which is used in combination with a default domain or domain search list set during system configuration, has one or more strings appended to the end.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;When a system is configured, it is typically assigned a default domain extension and search list using DHCP (or, less commonly, the RDNSS and DNSSL RA options).&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example, the default domain &lt;em&gt;cs.berkeley.edu&lt;/em&gt; might be configured in systems at the computer science department at UC Berkeley.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If a user on one of these machines types in the name &lt;em&gt;vangogh&lt;/em&gt;, the local resolver software converts this name to the FQDN &lt;em&gt;vangogh.cs.berkeley.edu.&lt;/em&gt; before invoking a resolver to determine vangogh&amp;#8217;s IP address.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A domain name consists of a sequence of &lt;strong&gt;labels&lt;/strong&gt; separated by periods.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The name represents a location in the name hierarchy, where the period is the hierarchy delimiter and descending down the tree takes place from right to left in the name.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Each label can be up to 63 characters long, and an entire FQDN is limited to at most 255 (1-byte) characters.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The hierarchical structure of the DNS name space allows different administrative authorities to manage different parts of the name space. For example,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;creating a new DNS name of the form &lt;em&gt;elevator.cs.berkeley.edu&lt;/em&gt; would likely require dealing with the owner of the &lt;em&gt;cs.berkeley.edu&lt;/em&gt; subdomain only.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The berkeley &lt;em&gt;.edu&lt;/em&gt; and &lt;em&gt;edu&lt;/em&gt; portions of the name space would not require alteration, so the owners of those would not need to be bothered.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This feature of DNS is one key aspect of its &lt;em&gt;scalability&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;name-servers-and-zones&quot;&gt;2. Name Servers and Zones&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Management responsibility for portions of the DNS name space is assigned to individuals or organizations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The active DNS name space (domains) is supposed to arrange for at least two &lt;strong&gt;name servers&lt;/strong&gt; or &lt;strong&gt;DNS servers&lt;/strong&gt; to hold information about the name space so that users of the Internet can perform queries on the names.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The collection of servers forms the DNS (service) itself, a distributed system whose primary job is to provide name-to-address mappings.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The unit of administrative delegation, in the language of DNS servers, is called a &lt;strong&gt;zone&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A zone is a subtree of the DNS name space that can be administered separately from other zones.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Every domain name exists within some zone, even the TLDs that exist in the &lt;strong&gt;root zone&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Whenever a new record is added to a zone, the DNS administrator for the zone allocates a name and additional information (usually an IP address) for the new entry and enters these into the name server&amp;#8217;s database.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A DNS server can contain information for more than one zone.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;At any hierarchical change point in a domain name (i.e., wherever a period appears), a different zone and containing server may be accessed to provide information for the name. This is called a &lt;strong&gt;delegation&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Each zone has a designated owner or responsible party who is given authority to manage the names, addresses, and subordinate zones, also the name servers that contain the zone&amp;#8217;s database(s) within the zone.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Zone information is supposed to exist in at least two places, implying that there should be at least two servers containing information for each zone.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This is for redundancy; if one server is not functioning properly, at least one other server is available.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;All of these servers contain identical information about a zone.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Typically, among the servers, a &lt;strong&gt;primary server&lt;/strong&gt; contains the zone database in a disk file, and one or more &lt;strong&gt;secondary servers&lt;/strong&gt; obtain copies of the database in its entirety from the primary using a process called a &lt;strong&gt;zone transfer&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;caching&quot;&gt;3. Caching&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Name servers contain information such as name-to-IP-address mappings that may be obtained from three sources.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The name server obtains the information directly from the zone database,&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The server is said to contain authoritative information about the zone and may be called an &lt;strong&gt;authoritative server&lt;/strong&gt; for the zone. Such servers are identified by name within the zone information.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;as the result of a zone transfer (e.g., for a slave server),&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;or from another server in the course of processing a resolution.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Most name servers (except some of the root and TLD servers) also &lt;strong&gt;cache&lt;/strong&gt; zone information they learn, up to a time limit called the &lt;strong&gt;time to live&lt;/strong&gt; (TTL). They use this cached information to answer queries.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Doing so can greatly decrease the amount of DNS message traffic that would otherwise be carried on the Internet.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When answering a query, a server indicates whether the information it is returning has been derived from its cache or from its authoritative copy of the zone.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When cached information is returned, it is common for a server to also include the domain names of the name servers that can be contacted to retrieve authoritative information about the corresponding zone.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is worth mentioning that caching is applied both for successful resolutions and for unsuccessful resolutions (called &lt;strong&gt;negative caching&lt;/strong&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If a request for a particular domain name fails to return a record, this fact is also cached.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Doing so can help to reduce Internet traffic when errant applications repeatedly make requests for names that do not exist.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Negative caching was changed from optional to mandatory by [RFC2308].&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In some network configurations (e.g., those using older UNIX-compatible systems), the cache is maintained in a nearby name server, not in the resolvers resident in the clients.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Placing the cache in the server allows any hosts on the LAN that use the nearby server to benefit from the server&amp;#8217;s cache but implies a small delay in accessing the cache over the local network.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In Windows and more recent systems (e.g., Linux), the client can maintain a cache, and it is made available to all applications running on the same system.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Windows, this happens by default, and in Linux, it is a service that can be enabled or disabled.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On Windows, the local system&amp;#8217;s cache parameters may be modified by editing the following registry entry:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;text&quot;&gt;HKLM\SYSTEM\CurrentControlSet\Services\DNSCache\Parameters&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The DWORD value &lt;em&gt;MaxNegativeCacheTtl&lt;/em&gt; gives the maximum number of seconds that a negative DNS result remains in the resolver cache.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The DWORD value &lt;em&gt;MaxCacheTtl&lt;/em&gt; gives the maximum number of seconds that a DNS record may remain in the resolver cache.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If this value is less than the &lt;em&gt;TTL&lt;/em&gt; of a received DNS record, the lesser value controls how long the record remains in cache.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These two registry keys do not exist by default, so they must be created in order to be used.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In Linux and other systems that support it, the &lt;em&gt;Name Service Caching Daemon&lt;/em&gt; (NSCD) provides a client-side caching capability.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is controlled by the &lt;em&gt;/etc/nscd.conf&lt;/em&gt; file that can indicate which types of resolutions (for DNS and some other services) are cached, along with some cache parameters such as &lt;em&gt;TTL&lt;/em&gt; settings.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition, the file &lt;em&gt;/etc/nsswitch.conf&lt;/em&gt; controls how name resolution for applications takes place. Among other things, it can control whether local files, the DNS protocol, and/or NSCD is employed for mappings.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-dns-protocol&quot;&gt;4. The DNS Protocol&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The DNS protocol consists of two main parts:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a query/response protocol used for performing queries against the DNS for particular names,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;and another protocol for name servers to exchange database records (zone transfers).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It also has a way to notify secondary servers that the zone database has evolved and a zone transfer is necessary (DNS Notify), and a way to dynamically update the zone (dynamic updates).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;DNS query/response operations are supported over the distributed DNS infrastructure consisting of&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;servers deployed locally at each site or ISP,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;and a special set of &lt;strong&gt;root servers&lt;/strong&gt;,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;also a special set of &lt;strong&gt;generic top-level domain servers&lt;/strong&gt; used for scaling some of the larger gTLDs.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/tcp-ip/name-resolution-and-the-domain-name-system/dns-recursive-query-example-com.png&quot; alt=&quot;DNS resurcive query&quot; width=&quot;75%&quot; height=&quot;75%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2. A typical recursive DNS query for &lt;code&gt;EXAMPLE.COM&lt;/code&gt; from &lt;code&gt;A.HOME&lt;/code&gt; involves up to ten messages. The local recursive server (&lt;code&gt;GW.HOME&lt;/code&gt; here) uses a DNS server provided by its ISP. That server, in turn, uses an Internet root name server and a gTLD server (for &lt;code&gt;COM&lt;/code&gt; and &lt;code&gt;NET&lt;/code&gt; TLDs) to find the name server for the &lt;code&gt;EXAMPLE.COM&lt;/code&gt; domain. That name server (&lt;code&gt;A.IANA-SERVERS.NET&lt;/code&gt; here) provides the required IP address for the host &lt;code&gt;EXAMPLE.COM&lt;/code&gt;. All of the recursive servers cache any information learned for later use.&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here, we have a laptop called &lt;em&gt;A.HOME&lt;/em&gt; residing nearby the DNS server &lt;em&gt;GW.HOME&lt;/em&gt;. The domain &lt;em&gt;HOME&lt;/em&gt; is private, so it is not known to the Internet—only locally at the user&amp;#8217;s residence.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When &lt;em&gt;A.HOME&lt;/em&gt; wishes to connect to the host &lt;em&gt;EXAMPLE.COM&lt;/em&gt;, it must determine the IP address of &lt;em&gt;EXAMPLE.COM&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Assuming it does not know this address already, the resolver software on &lt;em&gt;A.HOME&lt;/em&gt; first makes a request to its local name server, &lt;em&gt;GW.HOME&lt;/em&gt;, to convert the name &lt;em&gt;EXAMPLE.COM&lt;/em&gt; into an address and constitutes &lt;em&gt;message 1&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If &lt;em&gt;GW.HOME&lt;/em&gt; does not already know the IP address for &lt;em&gt;EXAMPLE.COM&lt;/em&gt; or the name servers for either the &lt;em&gt;EXAMPLE.COM&lt;/em&gt; domain or the &lt;em&gt;COM TLD&lt;/em&gt;, it forwards the request to another DNS server (called &lt;strong&gt;recursion&lt;/strong&gt;). In this case, a request (&lt;em&gt;message 2&lt;/em&gt;) goes to an ISP-provided DNS server.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Assuming that this server also does not know the required address or other information, it contacts one of the root name servers (&lt;em&gt;message 3&lt;/em&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The root servers are not recursive, so they do not process the request further but instead return the information required to contact a name server for the &lt;em&gt;COM TLD&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example, it might return the name &lt;em&gt;A.GTLD-SERVERS.NET&lt;/em&gt; and one or more of its IP addresses (&lt;em&gt;message 4&lt;/em&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;With this information, the ISP-provided server contacts the gTLD server (&lt;em&gt;message 5&lt;/em&gt;) and discovers the name and IP addresses of the name servers for the domain &lt;em&gt;EXAMPLE.COM&lt;/em&gt; (&lt;em&gt;message 6&lt;/em&gt;). In this case, one of the servers is &lt;em&gt;A.IANA-SERVERS.NET&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Given the correct server for the domain, the ISP-provided server contacts the appropriate server (&lt;em&gt;message 7&lt;/em&gt;), which responds with the requested IP address (&lt;em&gt;message 8&lt;/em&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;At this point, the ISP-provided server can respond to &lt;em&gt;GW.HOME&lt;/em&gt; with the required information (&lt;em&gt;message 9&lt;/em&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;GW.HOME&lt;/em&gt; is now able to complete the initial query and responds to the client with the desired IPv4 and/or IPv6 address(es) (&lt;em&gt;message 10&lt;/em&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;From the perspective of &lt;em&gt;A.HOME&lt;/em&gt;, the local name server was able to perform the request.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, what really happened is a &lt;strong&gt;recursive query&lt;/strong&gt;, where the &lt;em&gt;GW.HOME&lt;/em&gt; and ISP-provided servers in turn made additional DNS requests to satisfy &lt;em&gt;A.HOME&lt;/em&gt;'s query.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In general, most name servers perform recursive queries such as this.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The notable exceptions are the root servers and other TLD servers that do not perform recursive queries.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;dns-message-format&quot;&gt;4.1. DNS Message Format&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is one basic DNS message format [RFC6195] used for all DNS operations (queries, responses, zone transfers, notifications, and dynamic updates).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The basic DNS message begins with a fixed 12-byte header followed by four variable-length &lt;strong&gt;sections&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;questions (or queries),&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;answers,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;authority records,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;and additional records.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All but the first section contain one or more &lt;strong&gt;resource records&lt;/strong&gt; (RRs). The question section contains a data item that is very close in structure to an RR. RRs can be cached; questions are not.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/tcp-ip/name-resolution-and-the-domain-name-system/dns-message-format.png&quot; alt=&quot;DNS Message format&quot; width=&quot;55%&quot; height=&quot;55%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 3. The DNS message format has a fixed 12-byte header. The entire message is usually carried in a UDP/IPv4 datagram and limited to 512 bytes. DNS UPDATE (DNS with dynamic updates) uses the field names &lt;em&gt;ZOCOUNT&lt;/em&gt;, &lt;em&gt;PRCOUNT&lt;/em&gt;, &lt;em&gt;UPCOUNT&lt;/em&gt;, and &lt;em&gt;ADCOUNT&lt;/em&gt;. A special extension format (called EDNS0) allows messages to be larger than 512 bytes, which is required for DNSSEC.&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the fixed-length header, the &lt;em&gt;Transaction ID&lt;/em&gt; field is set by the client and returned by the server. It lets the client match responses to requests.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The second 16-bit word includes a number of flags and other subfields.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Beginning from the left-most bit, &lt;em&gt;QR&lt;/em&gt; is a 1-bit field: 0 means the message is a query; 1 means it is a response.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The next is the &lt;em&gt;OpCode&lt;/em&gt;, a 4-bit field.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The normal value is 0 (a standard query) for requests and responses.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Other values are: 4 (notify), and 5 (update).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Other values (1–3) are deprecated or never seen in operational use.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Next is the &lt;em&gt;AA&lt;/em&gt; bit field that indicates an &quot;authoritative answer&quot; (as opposed to a cached answer).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;TC&lt;/em&gt; is a 1-bit field that means &quot;truncated.&quot;&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With UDP, this flag being set means that the total size of the reply exceeded 512 bytes, and only the first 512 bytes of the reply were returned.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;RD&lt;/em&gt; is a bit field that means &quot;recursion desired.&quot;&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It can be set in a query and is then returned in the response. It tells the server to perform a recursive query.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If the bit is not set, and the requested name server does not have an authoritative answer, the requested name server returns a list of other name servers to contact for the answer. At this point, the overall query may be continued by contacting the list of other name servers. This is called an &lt;strong&gt;iterative query&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;RA&lt;/em&gt; is a bit field that means &quot;recursion available.&quot;&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This bit is set in the response if the server supports recursion.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Root servers generally do not support recursion, thereby forcing clients to perform iterative queries to complete name resolution.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;em&gt;Z&lt;/em&gt; bit field must be 0 for now but is reserved for future use.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;em&gt;AD&lt;/em&gt; bit field is set to true if the contained information is authenticated, and the &lt;em&gt;CD&lt;/em&gt; bit is set to true if security checking is disabled.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;em&gt;Response Code&lt;/em&gt; (or &lt;em&gt;RCODE&lt;/em&gt;) field is a 4-bit field with the return code whose possible values are given in [DNSPARAM].&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The common values include 0 (no error) and 3 (name error or &quot;nonexistent domain&quot;, written as &lt;em&gt;NXDOMAIN&lt;/em&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A name error is returned only from an authoritative name server and means that the domain name specified in the query does not exist.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The next four fields are 16 bits in size and specify the number of entries in the question, answer, authority, and additional information sections that complete the DNS message.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For a query, the number of questions is normally 1 and the other three counts are 0. For a reply, the number of answers is at least 1. Questions have a name, type, and class.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All of the other sections contain zero or more RRs. RRs contain a name, type, and class information, but also the TTL value that controls how long the data can be cached.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;dig @8.8.8.8 +nocmd +trace +question cs.berkeley.edu A
&lt;span class=&quot;gp&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;				IN	NS
&lt;span class=&quot;go&quot;&gt;.			12283	IN	NS	g.root-servers.net.
.			12283	IN	NS	j.root-servers.net.
.			12283	IN	NS	e.root-servers.net.
.			12283	IN	NS	l.root-servers.net.
.			12283	IN	NS	d.root-servers.net.
.			12283	IN	NS	a.root-servers.net.
.			12283	IN	NS	b.root-servers.net.
.			12283	IN	NS	i.root-servers.net.
.			12283	IN	NS	m.root-servers.net.
.			12283	IN	NS	h.root-servers.net.
.			12283	IN	NS	c.root-servers.net.
.			12283	IN	NS	k.root-servers.net.
.			12283	IN	NS	f.root-servers.net.
.			12283	IN	RRSIG	NS 8 0 518400 20221223170000 20221210160000 18733 . RKkv+/2Kd7pxDEzR/ZHRsgPe+YM/M3BYXrU/WwOaco4UT9Wc3A2CF+Bd rBlNbvi8fS7MXDeQPZfRPrVn1yLVNTNVJJVCDzge5QKVhumVM6zfB60e aI0a0mojthg7cKS9mZa29cvoITNW41MTk4dilaDKl4uvLfjnfvZ59ZBS BgDHvd8e0VC53v7Dz8fnoo+climQvU51Xq6haB/v3/m8RXCm6Yvu2qg5 xLdZaRHrnFqKFur7+7UE7zMqWVA1rmwozEi/mgfK0JczDk9LJ2xyEgRH Cq+wKVAZEVU48Yoe1Vemh2PwTZqBLnXpKHooMQ4tNNAkAYKMnP5Na8oW 2U/Y7A==
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; Received 525 bytes from 8.8.8.8#53&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;8.8.8.8&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;39 ms
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;;&lt;/span&gt;cs.berkeley.edu.		IN	A
&lt;span class=&quot;go&quot;&gt;edu.			172800	IN	NS	a.edu-servers.net.
edu.			172800	IN	NS	h.edu-servers.net.
edu.			172800	IN	NS	b.edu-servers.net.
edu.			172800	IN	NS	d.edu-servers.net.
edu.			172800	IN	NS	c.edu-servers.net.
edu.			172800	IN	NS	l.edu-servers.net.
edu.			172800	IN	NS	f.edu-servers.net.
edu.			172800	IN	NS	e.edu-servers.net.
edu.			172800	IN	NS	i.edu-servers.net.
edu.			172800	IN	NS	g.edu-servers.net.
edu.			172800	IN	NS	k.edu-servers.net.
edu.			172800	IN	NS	j.edu-servers.net.
edu.			172800	IN	NS	m.edu-servers.net.
edu.			86400	IN	DS	28065 8 2 4172496CDE85534E51129040355BD04B1FCFEBAE996DFDDE652006F6 F8B2CE76
edu.			86400	IN	RRSIG	DS 8 1 86400 20221224170000 20221211160000 18733 . p7OvKwfjcx6Iveh7NZ0huq24niVZINxiqttjuDxDJD3wNwVdmgvxzBrw +VzP+5p6JJ63okmvaqlJYlZJNX85n7vweab/LAPFFtT2kHs77Zc/MY1a k/k/E/mZstyAkoS3JwXoDvStoCdAUU/8eH32DFROPpZsKjoeiejcWOWb 86yBU7QKjPlsu5BJO74qlyDP7yLlEBum5YbcMDGoaV3RPozrTCz7r1+V KItG7ObBnw9Vjchv6gG3Q7wyTw2uXWMfGBgAS6P8VGN/GgqS7Bct9y+v 1cc75EY7YM0pqtzu230m1DFnBUWG1pcU4+fS5kPmUBpyBxpMFO99q48q IJyk2A==
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; Received 1205 bytes from 192.36.148.17#53&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;i.root-servers.net&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;55 ms
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;;&lt;/span&gt;cs.berkeley.edu.		IN	A
&lt;span class=&quot;go&quot;&gt;berkeley.edu.		172800	IN	NS	adns1.berkeley.edu.
berkeley.edu.		172800	IN	NS	adns2.berkeley.edu.
berkeley.edu.		172800	IN	NS	adns3.berkeley.edu.
berkeley.edu.		86400	IN	DS	38028 10 2 A37654ABBF41A2F3D7DC8D4B2E77A70E9B1AF6A670101FF8AEF4F36E FB7CA323
berkeley.edu.		86400	IN	DS	20949 10 2 448D22499ED0D3098E2BC186F5D5F5091055C5BECDF3BD82632855D2 1CD493C4
berkeley.edu.		86400	IN	RRSIG	DS 8 2 86400 20221216073252 20221209062252 28775 edu. ym6j4W1W9h8oaqJMFu1kZ/eTHWiRh94zTP33PU81PCP2JGjiKxXNC27D oPU96kj6hWv9jYCLKFqtjcMjdFb/KJL3JmJNBl4QTf9RNHfXyxEsd7zm RgVJkgk5XBaCebMzZsJWz6godVrxGtLC8EcRCg+Y3IQeDLmS5T+zUtaZ GR8kYgN9L+mW23jrKTVh2rOD+v1AZu0fbitcfj/3Q25odQ==
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; Received 471 bytes from 192.35.51.30#53&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;f.edu-servers.net&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;79 ms
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;;&lt;/span&gt;cs.berkeley.edu.		IN	A
&lt;span class=&quot;go&quot;&gt;cs.berkeley.edu.	86400	IN	A	23.185.0.1
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; Received 88 bytes from 128.32.136.14#53&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;adns2.berkeley.edu&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;223 ms&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;tcpdump &lt;span class=&quot;nt&quot;&gt;-tnv&lt;/span&gt; udp and port 53
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 64, id 2498, offset 0, flags [none], proto UDP (17), length 68)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.50158 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;8.8.8.8.53: 30713+ &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;1au] NS? &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;40&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 128, id 2372, offset 0, flags [none], proto UDP (17), length 553)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    8.8.8.8.53 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.50158: 30713&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;14/0/1 &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; NS a.root-servers.net., &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; NS b.root-servers.net., &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; NS c.root-servers.net., &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; NS d.root-servers.net., &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; NS e.root-servers.net., &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; NS f.root-servers.net., &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; NS g.root-servers.net., &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; NS h.root-servers.net., &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; NS i.root-servers.net., &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; NS j.root-servers.net., &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; NS k.root-servers.net., &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; NS l.root-servers.net., &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; NS m.root-servers.net., &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; RRSIG &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;525&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
IP (tos 0x0, ttl 64, id 1382, offset 0, flags [DF], proto UDP (17), length 64)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.43221 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.2.53: 64354+ A? a.root-servers.net. &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;36&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 64, id 1383, offset 0, flags [DF], proto UDP (17), length 64)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.43221 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.2.53: 43153+ AAAA? a.root-servers.net. &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;36&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 128, id 2373, offset 0, flags [none], proto UDP (17), length 80)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.2.53 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.43221: 64354 1/0/0 a.root-servers.net. A 198.41.0.4 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;52&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 128, id 2374, offset 0, flags [none], proto UDP (17), length 92)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.2.53 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.43221: 43153 1/0/0 a.root-servers.net. AAAA 2001:503:ba3e::2:30 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;64&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;...
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 128, id 2397, offset 0, flags [none], proto UDP (17), length 80)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.2.53 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.45991: 10021 1/0/0 m.root-servers.net. A 202.12.27.33 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;52&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 128, id 2398, offset 0, flags [none], proto UDP (17), length 92)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.2.53 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.45991: 22347 1/0/0 m.root-servers.net. AAAA 2001:dc3::35 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;64&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
IP (tos 0x0, ttl 64, id 49461, offset 0, flags [none], proto UDP (17), length 84)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.37889 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;198.97.190.53.53: 53008 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;1au] A? cs.berkeley.edu. &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;56&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 128, id 2399, offset 0, flags [none], proto UDP (17), length 1202)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    198.97.190.53.53 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.37889: 53008- 0/15/27 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1174&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
IP (tos 0x0, ttl 64, id 43388, offset 0, flags [DF], proto UDP (17), length 63)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.44873 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.2.53: 35146+ A? a.edu-servers.net. &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;35&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 64, id 43389, offset 0, flags [DF], proto UDP (17), length 63)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.44873 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.2.53: 21077+ AAAA? a.edu-servers.net. &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;35&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 128, id 2400, offset 0, flags [none], proto UDP (17), length 79)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.2.53 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.44873: 35146 1/0/0 a.edu-servers.net. A 192.5.6.30 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;51&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 128, id 2401, offset 0, flags [none], proto UDP (17), length 91)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.2.53 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.44873: 21077 1/0/0 a.edu-servers.net. AAAA 2001:503:a83e::2:30 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;63&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;...
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 128, id 2424, offset 0, flags [none], proto UDP (17), length 91)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.2.53 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.56144: 60038 1/0/0 m.edu-servers.net. AAAA 2001:501:b1f9::30 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;63&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 128, id 2425, offset 0, flags [none], proto UDP (17), length 79)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.2.53 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.56144: 900 1/0/0 m.edu-servers.net. A 192.55.83.30 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;51&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
IP (tos 0x0, ttl 64, id 37599, offset 0, flags [none], proto UDP (17), length 84)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.59416 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.31.80.30.53: 47106 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;1au] A? cs.berkeley.edu. &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;56&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 128, id 2426, offset 0, flags [none], proto UDP (17), length 499)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.31.80.30.53 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.59416: 47106- 0/6/5 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;471&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
IP (tos 0x0, ttl 64, id 38284, offset 0, flags [DF], proto UDP (17), length 64)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.40041 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.2.53: 55216+ A? adns1.berkeley.edu. &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;36&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 64, id 38285, offset 0, flags [DF], proto UDP (17), length 64)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.40041 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.2.53: 17843+ AAAA? adns1.berkeley.edu. &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;36&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 128, id 2427, offset 0, flags [none], proto UDP (17), length 80)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.2.53 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.40041: 55216 1/0/0 adns1.berkeley.edu. A 128.32.136.3 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;52&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 128, id 2428, offset 0, flags [none], proto UDP (17), length 92)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.2.53 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.40041: 17843 1/0/0 adns1.berkeley.edu. AAAA 2607:f140:ffff:fffe::3 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;64&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;...
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 128, id 2431, offset 0, flags [none], proto UDP (17), length 80)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.2.53 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.47776: 62215 1/0/0 adns3.berkeley.edu. A 192.107.102.142 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;52&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 128, id 2432, offset 0, flags [none], proto UDP (17), length 92)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.2.53 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.47776: 41239 1/0/0 adns3.berkeley.edu. AAAA 2607:f140:a000:d::abc &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;64&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
IP (tos 0x0, ttl 64, id 47471, offset 0, flags [none], proto UDP (17), length 84)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.45546 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;128.32.136.3.53: 8354 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;1au] A? cs.berkeley.edu. &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;56&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 128, id 2433, offset 0, flags [none], proto UDP (17), length 116)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    128.32.136.3.53 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.45546: 8354&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;- 1/0/1 cs.berkeley.edu. A 23.185.0.1 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;88&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;udp-or-tcp&quot;&gt;4.2. UDP or TCP&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The well-known port number for DNS is 53, for both UDP and TCP. The most common format uses the UDP/IPv4 datagram structure.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/tcp-ip/name-resolution-and-the-domain-name-system/dns-udp-ipv4-message-format.png&quot; alt=&quot;DNS UDP/IPv4 Message&quot; width=&quot;55%&quot; height=&quot;55%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 4. DNS messages are typically encapsulated in a UDP/IPv4 datagram and are limited to 512 bytes in size unless TCP and/or EDNS0 is used. Each section (except the question section) contains a set of resource records.&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When a resolver issues a query and the response comes back with the &lt;em&gt;TC&lt;/em&gt; bit field set (&quot;truncated&quot;), the size of the true response exceeded 512 bytes, so only the first 512 bytes are returned by the server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The resolver may issue the request again, using TCP, which now must be a supported configuration [RFC5966].&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This allows more than 512 bytes to be returned because TCP breaks up large messages into multiple segments.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When a secondary name server for a zone starts up, it normally performs a zone transfer from the primary name server for the zone.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Zone transfers can also be initiated by a timer or as a result of a DNS NOTIFY message.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Full zone transfers use TCP as they can be large.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Incremental zone transfers, where only the updated entries are transferred, may use UDP at first but switch to TCP if the response is too large, just like a conventional query.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When UDP is used, both the resolver and the server application software must perform their own timeout and retransmission.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A recommendation for how to do this is given in [RFC1536].&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It suggests starting with a timeout of at least 4s, and that subsequent timeouts result in an exponential increase of the timeout (a bit like TCP&amp;#8217;s algorithms).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Linux and UNIX-like systems allow a change to be made to the retransmission timeout parameters by altering the contents of the &lt;em&gt;/etc/resolv.conf&lt;/em&gt; file (by setting the &lt;em&gt;timeout&lt;/em&gt; and &lt;em&gt;attempts&lt;/em&gt; options).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;dig +short +tcp @8.8.8.8 cs.berkeley.edu A
&lt;span class=&quot;go&quot;&gt;23.185.0.1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;tcpdump &lt;span class=&quot;nt&quot;&gt;-tnv&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;tcp or udp&lt;span class=&quot;se&quot;&gt;\)&lt;/span&gt; and port 53
&lt;span class=&quot;go&quot;&gt;
IP (tos 0x0, ttl 64, id 30721, offset 0, flags [none], proto TCP (6), length 60)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.44587 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;8.8.8.8.53: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0xbe79 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;correct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1999751284, win 64240, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 1460,sackOK,TS val 3664026097 ecr 0,nop,wscale 7], length 0
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 128, id 5910, offset 0, flags [none], proto TCP (6), length 44)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    8.8.8.8.53 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.44587: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x18e7 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;correct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1120675634, ack 1999751285, win 64240, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mss 1460], length 0
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 64, id 30722, offset 0, flags [none], proto TCP (6), length 40)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.44587 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;8.8.8.8.53: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x30a4 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;correct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, ack 1, win 64240, length 0
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 64, id 30723, offset 0, flags [none], proto TCP (6), length 98)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.44587 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;8.8.8.8.53: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0xfd6a &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;correct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1:59, ack 1, win 64240, length 58 32781+ &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;1au] A? cs.berkeley.edu. &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;56&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 128, id 5911, offset 0, flags [none], proto TCP (6), length 40)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    8.8.8.8.53 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.44587: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x306a &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;correct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, ack 59, win 64240, length 0
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 128, id 5912, offset 0, flags [none], proto TCP (6), length 102)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    8.8.8.8.53 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.44587: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x8005 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;correct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1:63, ack 59, win 64240, length 62 32781 1/0/1 cs.berkeley.edu. A 23.185.0.1 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;60&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 64, id 30724, offset 0, flags [none], proto TCP (6), length 40)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.44587 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;8.8.8.8.53: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x306a &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;correct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, ack 63, win 64178, length 0
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 64, id 30725, offset 0, flags [none], proto TCP (6), length 40)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.44587 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;8.8.8.8.53: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;F.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x3069 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;correct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;59, ack 63, win 64178, length 0
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 128, id 5913, offset 0, flags [none], proto TCP (6), length 40)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    8.8.8.8.53 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.44587: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x302c &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;correct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, ack 60, win 64239, length 0
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 128, id 5914, offset 0, flags [none], proto TCP (6), length 40)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    8.8.8.8.53 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.44587: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;FP.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x3023 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;correct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;63, ack 60, win 64239, length 0
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 64, id 0, offset 0, flags [DF], proto TCP (6), length 40)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.44587 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;8.8.8.8.53: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.], &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x3068 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;correct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, ack 64, win 64178, length 0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;question-query-and-zone-section-format&quot;&gt;4.3. Question (Query) and Zone Section Format&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The question or query section of a DNS message lists the question(s) being referenced. The same structure is also used for the zone section in dynamic updates, but with different names.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/tcp-ip/name-resolution-and-the-domain-name-system/dns-query-question-message-format.png&quot; alt=&quot;DNS query(question) message&quot; width=&quot;35%&quot; height=&quot;35%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 5. The query (or question) section of a DNS message does not contain a &lt;em&gt;TTL&lt;/em&gt; because it is not cached.&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The &lt;em&gt;Query Name&lt;/em&gt; is the domain name being looked up, using the encoding for labels.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Each question has a &lt;em&gt;Query Type&lt;/em&gt; and &lt;em&gt;Query Class&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The class value is 1, 254, or 255, indicating the Internet class, no class, or all classes, respectively, for all cases in which we are interested (other values are not typically used for TCP/IP networks).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;em&gt;Query Type&lt;/em&gt; field holds a value indicating the type of query being performed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The most common query type is &lt;em&gt;A&lt;/em&gt; (or &lt;em&gt;AAAA&lt;/em&gt; if IPv6 DNS resolution is enabled), which means that an IP address is desired for the query name.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is also possible to create a query of type &lt;em&gt;ANY&lt;/em&gt;, which returns all RRs of any type in the same class that match the query name.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;answer-authority-and-additional-information-section-formats&quot;&gt;4.4. Answer, Authority, and Additional Information Section Formats&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The final three sections in the DNS message, the answer, authority, and additional information sections, contain sets of RRs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/tcp-ip/name-resolution-and-the-domain-name-system/dns-resource-record-message-format.png&quot; alt=&quot;DNS RR message&quot; width=&quot;35%&quot; height=&quot;35%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 6. The format of a DNS resource record. For DNS in the Internet, the &lt;em&gt;Class&lt;/em&gt; field always contains the value 1. The &lt;em&gt;TTL&lt;/em&gt; field gives the maximum amount of time the RR can be cached (in seconds).&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The &lt;em&gt;Name&lt;/em&gt; field (sometimes called the &quot;owning name&quot;, &quot;owner&quot;, or &quot;record owner&amp;#8217;s name&quot;) is the domain name to which the following resource data corresponds.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;em&gt;Type&lt;/em&gt; field specifies one of the RR type codes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;em&gt;Class&lt;/em&gt; field is 1 for Internet data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;em&gt;TTL&lt;/em&gt; field is the number of seconds for which the RR can be cached.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;em&gt;Resource Data Length&lt;/em&gt; (RDLENGTH) field specifies the number of bytes contained in the Resource Data (RDATA) field.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;resource-record-types&quot;&gt;4.5. Resource Record Types&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Although DNS is most commonly used to determine the IP address(es) that correspond to a particular name, it can also be used for the opposite purpose and for a number of other things. The wide range of capabilities provided by DNS is largely attributable to its ability to have different types of resource records.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 2. The popular resource record and query types used in DNS protocol messages. Additional records (not shown) are used when DNS security (DNSSEC) is employed.&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 75.0001%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Value&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;RR Type&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Reference&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Description and Purpose&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;A&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;[RFC1035]&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Address record for IPv4 (32-bit IPv4 address)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;NS&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;[RFC1035]&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Name server; provides name of authoritative name server
for zone&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;5&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;CNAME&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;[RFC1035]&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Canonical name; maps one name to another (to provide a
form of name aliasing)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;6&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;SOA&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;[RFC1035]&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Start of authority; provides authoritative information for the
zone (name servers, e-mail address of contact, serial number,
zone transfer timers)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;12&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;PTR&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;[RFC1035]&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Pointer; provides address to (canonical) name mapping;
used with in-addr.arpa and ip6.arpa domains for IPv4
and IPv6 reverse queries&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;15&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;MX&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;[RFC1035]&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Mail exchanger; provides name of e-mail handling host for
a domain&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;16&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;TXT&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;[RFC1035]
[RFC1464]&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Text; provides a variety of information (e.g., used with SPF
anti-spam scheme to identify authorized e-mail servers)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;28&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;AAAA&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;[RFC3596]&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Address record for IPv6 (128-bit IPv6 address)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;33&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;SRV&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;[RFC2782]&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Server selection; transport endpoints of a generic service&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;35&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;NAPTR&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;[RFC3403]&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Name authority pointer; supports alternative name spaces&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;41&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;OPT&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;[RFC2671]&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Pseudo-RR; supports larger datagrams, labels, return codes
in EDNS0&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;251&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;IXFR&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;[RFC1995]&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Incremental zone transfer&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;252&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;AXFR&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;[RFC1035]
[RFC5936]&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Full zone transfer; carried over TCP&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;255&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;(ANY)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;[RFC1035]&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Request for all (any) records&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Resource records are used for many purposes but can be divided into three broad categories: data types, query types, and meta types.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Data types&lt;/strong&gt; are used to convey information stored in the DNS such as IP addresses and the names of authoritative name servers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Query types&lt;/strong&gt; use the same values as data types, with a few additional values (e.g., AXFR, IXFR, and *).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Meta types&lt;/strong&gt; designate transient data associated with a particular single DNS message.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;authority-soa-records&quot;&gt;4.5.1. Authority (SOA) Records&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In DNS, each zone has an authority record, using an RR type called &lt;em&gt;start of authority&lt;/em&gt; (SOA). These records provide authoritative links between portions of the DNS name space and the servers that provide the zone information allowing various queries to be performed for addresses and other information.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The SOA RR is used to identify the name of the host providing the official permanent database,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the responsible party&amp;#8217;s e-mail address (where &quot;.&quot; is used instead of @),&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;zone update parameters,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;and the default TTL.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The default TTL is applied to RRs in the zone that are not otherwise assigned an explicit per-RR TTL.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The zone update parameters include a serial number, refresh time, retry time, and expire time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The serial number is increased (by at least 1), usually by the network administrator, anytime there is a change to the zone contents.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is used by secondary servers to determine if they should initiate a zone transfer (when they do not have a copy of the zone contents with largest serial number).&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The refresh time tells secondary servers how long to wait before checking the SOA record from the primary and its version number to determine if a zone transfer is required.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The retry and expire times are used in the case of zone transfer failure.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The retry value gives the time (in seconds) a secondary will wait before retrying.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The expire time is an upper bound (in seconds) that a secondary server will keep retrying zone transfers before giving up. If it gives up, such a server ceases to respond to queries for the zone.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In general, a zone can contain a mix of IPv4 and IPv6 data and can be accessed using either version of IP.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;C:\&amp;gt;&lt;/span&gt;nslookup
&lt;span class=&quot;go&quot;&gt;Default Server:  DC01.fosun.com
Address:  192.168.200.10

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;soa
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;codefarm.me
&lt;span class=&quot;go&quot;&gt;Server:  DC01.fosun.com
Address:  192.168.200.10

Non-authoritative answer:
codefarm.me
        primary name server = ns01.domaincontrol.com
        responsible mail addr = dns.jomax.net
        serial  = 2022120700
        refresh = 28800 (8 hours)
        retry   = 7200 (2 hours)
        expire  = 604800 (7 days)
        default TTL = 600 (10 mins)

ns01.domaincontrol.com  internet address = 97.74.100.1
ns01.domaincontrol.com  AAAA IPv6 address = 2603:5:2140::1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;mail-exchanger-mx-records&quot;&gt;4.5.2. Mail Exchanger (MX) Records&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An MX record provides the name of a mail exchanger—a host willing to engage in the Simple Mail Transfer Protocol (SMTP) [RFC5321] to receive incoming e-mail on behalf of users associated with a domain name.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;MX records include a preference value, so that more than one MX record may be present for a particular domain name, which allows a sending agent to sort the hosts in preference order (smaller is more preferable) in deciding which host to use as an e-mail destination.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;nslookup
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;mx
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;server ns3.dns.ucla.edu
&lt;span class=&quot;go&quot;&gt;Default server: ns3.dns.ucla.edu
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;Address: 54.236.209.157#&lt;/span&gt;53
&lt;span class=&quot;go&quot;&gt;Default server: ns3.dns.ucla.edu
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;Address: 2600:1f18:21d4:e000::53#&lt;/span&gt;53
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;cs.ucla.edu
&lt;span class=&quot;go&quot;&gt;Server:		ns3.dns.ucla.edu
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;Address:	54.236.209.157#&lt;/span&gt;53
&lt;span class=&quot;go&quot;&gt;
CS.UCLA.EDU	mail exchanger = 13 Mailman.CS.UCLA.EDU.
CS.UCLA.EDU	mail exchanger = 3 Pelican.CS.UCLA.EDU.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;fighting-spam-the-sender-policy-framework-spf-and-text-txt-records&quot;&gt;4.5.3. Fighting Spam: The Sender Policy Framework (SPF) and Text (TXT) Records&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For outgoing e-mail, MX records allow the DNS to help determine the names of mail relays and servers for a domain. More recently, the DNS has been leveraged by receiving mail agents to determine which relaying or sending mail servers are authorized to send mail from a particular domain name. This is used to help combat spam (unwanted e-mail) that is sent by a rogue mail agent pretending to be an authorized mail sender.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;E-mail received by a mail server is rejected, stored, or forwarded to another mail server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Rejection can happen for a number of reasons, such as a protocol error or lack of available storage space at the receiver.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It can also be rejected because the sending mail client does not appear to be the proper one for sending e-mail.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This capability is supported by the &lt;strong&gt;Sender Policy Framework&lt;/strong&gt; (SPF) and documented in [RFC4408], an experimental RFC.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is another framework known as &lt;strong&gt;Sender ID&lt;/strong&gt; [RFC4406] that incorporates SPF&amp;#8217;s functions. It is also experimental but less widely deployed.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Version 1 of SPF uses DNS TXT or SPF (type 99) resource records.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Records are set up and published in the DNS by a domain&amp;#8217;s owner to indicate which servers are authorized to send mail originating from the domain.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The text contains the matching criteria (called &lt;strong&gt;mechanisms&lt;/strong&gt;) and other information (called &lt;strong&gt;modifiers&lt;/strong&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Preceding each mechanism is a &lt;strong&gt;qualifier&lt;/strong&gt; that determines the consequence of a matching mechanism.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Any mechanism missing a qualifier is assumed to have the &lt;code&gt;+&lt;/code&gt; qualifier.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;+&lt;/code&gt; &lt;strong&gt;&lt;em&gt;qualifier&lt;/em&gt;&lt;/strong&gt; indicates that a match results in a Pass indication.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Other possible qualifiers include &lt;code&gt;-&lt;/code&gt; (Fail), &lt;code&gt;~&lt;/code&gt; (Soft Fail), and &lt;code&gt;?&lt;/code&gt; (Neutral).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If none of the matching mechanisms produces a Pass result, the final mechanism (&lt;em&gt;all&lt;/em&gt;) matches any condition.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The tilde character (&lt;code&gt;~&lt;/code&gt;) before the &lt;em&gt;all&lt;/em&gt; criterion indicates that a Soft Fail return should be generated if &lt;em&gt;all&lt;/em&gt; is the only matching mechanism.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The exact way a soft failure is handled is dependent on the receiving e-mail software.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;dig +tcp +nocmd +nostats txt outlook.com
&lt;span class=&quot;gp&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; Got answer:
&lt;span class=&quot;gp&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; -&amp;gt;&amp;gt;HEADER&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;opcode&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;: QUERY, status: NOERROR, id: 18595&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;; flags: qr rd ra; QUERY: 1, ANSWER: 3, AUTHORITY: 0, ADDITIONAL: 1&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; OPT PSEUDOSECTION:
&lt;span class=&quot;gp&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;EDNS: version: 0, flags:&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; udp: 4000
&lt;span class=&quot;gp&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; QUESTION SECTION:
&lt;span class=&quot;gp&quot;&gt;;&lt;/span&gt;outlook.com.			IN	TXT

&lt;span class=&quot;gp&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; ANSWER SECTION:
&lt;span class=&quot;hll&quot;&gt;&lt;span class=&quot;go&quot;&gt;outlook.com.		349	IN	TXT	&quot;v=spf1 include:spf-a.outlook.com include:spf-b.outlook.com ip4:157.55.9.128/25 include:spf.protection.outlook.com include:spf-a.hotmail.com include:_spf-ssg-b.microsoft.com include:_spf-ssg-c.microsoft.com ~all&quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;outlook.com.		349	IN	TXT	&quot;google-site-verification=0iLWhIMhXEkeWwWfFU4ursTn-_OvoOjaA0Lr7Pg1sEM&quot;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;outlook.com.		349	IN	TXT	&quot;google-site-verification=DC2uC-T8kD33lINhNzfo0bNBrw-vrCXs5BPF5BXY56g&quot;&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;dig +tcp +nocmd +nostats txt spf-a.outlook.com
&lt;span class=&quot;gp&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; Got answer:
&lt;span class=&quot;gp&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; -&amp;gt;&amp;gt;HEADER&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;opcode&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;: QUERY, status: NOERROR, id: 1423&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; OPT PSEUDOSECTION:
&lt;span class=&quot;gp&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;EDNS: version: 0, flags:&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; udp: 4000
&lt;span class=&quot;gp&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; QUESTION SECTION:
&lt;span class=&quot;gp&quot;&gt;;&lt;/span&gt;spf-a.outlook.com.		IN	TXT

&lt;span class=&quot;gp&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; ANSWER SECTION:
&lt;span class=&quot;hll&quot;&gt;&lt;span class=&quot;go&quot;&gt;spf-a.outlook.com.	380	IN	TXT	&quot;v=spf1 ip4:157.56.232.0/21 ip4:157.56.240.0/20 ip4:207.46.198.0/25 ip4:207.46.4.128/25 ip4:157.56.24.0/25 ip4:157.55.157.128/25 ip4:157.55.61.0/24 ip4:157.55.49.0/25 ip4:65.55.174.0/25 ip4:65.55.126.0/25 ip4:65.55.113.64/26 ip4:65.55.94.0/25 -all&quot;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Reading from left to right in the above example,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the string &lt;code&gt;v=spf1&lt;/code&gt; is a &lt;strong&gt;&lt;em&gt;modifier&lt;/em&gt;&lt;/strong&gt; indicating that the SPF version is 1.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;ip4&lt;/code&gt; &lt;strong&gt;&lt;em&gt;mechanism&lt;/em&gt;&lt;/strong&gt; specifies that the SMTP sender has an IPv4 address with the prefix.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;ip6&lt;/code&gt; mechanism specifies any sending host with IPv6 address prefix.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finally, the &lt;code&gt;include&lt;/code&gt; mechanism incorporates, by reference, the TXT records with recursive SPF resource records.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;zone-transfers-and-dns-notify&quot;&gt;4.6. Zone Transfers and DNS NOTIFY&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A zone transfer is used to copy a set of RRs for a zone from one server to another (generally from the master server to slave servers). The purpose of doing so is to keep multiple servers in sync with respect to a zone’s contents.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Multiple servers provide resiliency to failure, in case a server should go down.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Performance can also be improved as multiple servers can be used to share the processing load for incoming queries.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finally, the latency of a DNS query/response can potentially be reduced if servers are placed in locations close to clients (i.e., where the network latency between resolver and server is small).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As originally specified, zone transfers are initiated after &lt;em&gt;polling&lt;/em&gt;, where slaves periodically contact masters to see if a zone transfer is necessary by comparing the zones' version numbers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A later method says if a zone transfer needs to be initiated using an asynchronous update mechanism when the zone contents change, called &lt;strong&gt;DNS NOTIFY&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once a zone transfer is initiated, either the entire zone is transferred (using DNS &lt;strong&gt;AXFR&lt;/strong&gt; messages) [RFC5936], or an &lt;em&gt;incremental zone transfer&lt;/em&gt; option may be used (using DNS &lt;strong&gt;IXFR&lt;/strong&gt; messages) [RFC1995].&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/tcp-ip/name-resolution-and-the-domain-name-system/dns-zone-transfer.png&quot; alt=&quot;DNS zone transfer&quot; width=&quot;45%&quot; height=&quot;45%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 7. A DNS zone transfer copies the contents of zones between servers. An optional notification can cause a slave to request a full or incremental zone transfer.&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;sort-lists-round-robin-and-split-dns&quot;&gt;5. Sort Lists, Round-Robin, and Split DNS&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A DNS server could return all matching data to any client in whatever order the server finds most convenient.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, special configuration options and behaviors are available in most DNS server software to achieve certain operational, privacy, or performance goals.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/tcp-ip/name-resolution-and-the-domain-name-system/small-enterprise-topology.png&quot; alt=&quot;Small enterprise topology&quot; width=&quot;55%&quot; height=&quot;55%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 8. In a small enterprise topology, DNS may be configured to return different addresses depending on the requesting IP address. There is a private network and a public network including a DNS server. In addition, there is a pair of hosts on the DMZ (A and B), one on the internal network &amp;#169; and one on the Internet &amp;#174;. A multihomed host (M) spans the DMZ and internal networks. M therefore has two IP addresses drawn from two different network prefixes.&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A host wishing to contact M performs a DNS lookup that returns two addresses—one associated with the internal network and one with the DMZ.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Naturally, it would be more efficient if A, B, and R reached M via the DMZ and C reached M via the internal network.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This generally happens if the DNS server &lt;strong&gt;orders&lt;/strong&gt; its returned address records based on the source IP address of the request.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It could also use the destination IP address, especially if M uses multiple IP addresses from different subnets on the same network interface.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To achieve load balancing, the DNS server may be configured to use &lt;strong&gt;DNS round-robin&lt;/strong&gt;, which means that the server permutes the order of the returned address records. While this helps to balance load, it is far from perfect.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;When records are cached, the desired effect may not occur because of reuse of existing cached address records.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In addition, this scheme may balance the number of connections well across servers, but not the load.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Different connections can have radically different processing requirements, so the true processing load is likely to remain unbalanced unless the particular service always has the same processing requirements.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In &lt;strong&gt;split DNS&lt;/strong&gt;, the set of resource records returned in response to a query is dependent on the identity of the client and possibly query destination address. With split DNS, we could arrange for&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;any host in the enterprise (i.e., those sharing a set of prefixes) to be provided with the entire DNS database,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;whereas those outside are given visibility only to A and B, where the main Web service is offered.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;open-dns-servers-and-dyndns&quot;&gt;6. Open DNS Servers and DynDNS&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Many home users are assigned a single IPv4 address by their ISP, and this address may change over time as the user&amp;#8217;s computer or home gateway connects, disconnects, and reconnects to the Internet.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Consequently, it is often difficult for the user to establish a DNS entry that allows for running services that are visible from the Internet.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A number of so-called open &lt;strong&gt;Dynamic DNS&lt;/strong&gt; (DDNS) servers are available that support a special update protocol called the &lt;em&gt;DNS Update API&lt;/em&gt;, whereby a user may update an entry in a provider&amp;#8217;s DNS server given a preregistration or account.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;llmnr-and-mdns&quot;&gt;7. LLMNR and mDNS&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The ordinary DNS system requires a set of DNS servers to be configured to provide mappings between names and addresses, and possibly other information.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sometimes this is too much overhead when only a few local hosts wish to communicate.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In cases where a DNS server is not available (e.g., a quickly formed ad hoc network of clients that connect only to each other), a special local version of DNS called &lt;strong&gt;Link-Local Multicast Name Resolution&lt;/strong&gt; (LLMRR) [RFC4795] may be available.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It is a (nonstandard) protocol based on DNS developed by Microsoft and used in local environments to help discover devices on a local area network, such as printers and file servers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is supported in Windows Vista, Server 2008, and 7.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It uses UDP port &lt;em&gt;5355&lt;/em&gt; with the IPv4 multicast address &lt;em&gt;224.0.0.252&lt;/em&gt; and IPv6 address &lt;em&gt;ff02::1:3&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The servers also use TCP on port 5355 from whatever unicast IP address they respond from.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Multicast DNS&lt;/strong&gt; (mDNS) [IDMDNS] is another form of local DNS-like capability developed by Apple.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;When it is combined with the &lt;em&gt;DNS Service Discovery&lt;/em&gt; protocol, Apple calls the resulting framework Bonjour.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;mDNS uses DNS messages carried over local multicast addresses.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It uses UDP with port &lt;em&gt;5353&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It specifies that the special TLD &lt;em&gt;.local&lt;/em&gt; is to be treated with special semantics. The &lt;em&gt;.local&lt;/em&gt; TLD is link-local in scope.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Any DNS queries for domain names in this TLD are sent to the mDNS IPv4 address &lt;em&gt;224.0.0.251&lt;/em&gt; or the IPv6 address &lt;em&gt;ff02::fb&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Queries for other domains may optionally be sent to these multicast addresses.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebarblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Multicast DNS: From Wikipedia, the free encyclopedia&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In &lt;a href=&quot;https://en.wikipedia.org/wiki/Computer_network&quot;&gt;computer networking&lt;/a&gt;, the &lt;strong&gt;multicast DNS (mDNS)&lt;/strong&gt; protocol resolves &lt;a href=&quot;https://en.wikipedia.org/wiki/Hostname&quot;&gt;hostnames&lt;/a&gt; to IP addresses within small networks that do not include a local &lt;a href=&quot;https://en.wikipedia.org/wiki/Name_server&quot;&gt;name server&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Zero-configuration_networking#Name_service_discovery&quot;&gt;zero-configuration&lt;/a&gt; service, using essentially the same programming interfaces, packet formats and operating semantics as unicast &lt;a href=&quot;https://en.wikipedia.org/wiki/Domain_Name_System&quot;&gt;Domain Name Service&lt;/a&gt; (DNS).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It was designed to work as either a stand-alone protocol or compatibly with standard DNS servers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It uses IP multicast &lt;a href=&quot;https://en.wikipedia.org/wiki/User_Datagram_Protocol&quot;&gt;User Datagram Protocol&lt;/a&gt; (UDP) packets, and is implemented by the Apple &lt;a href=&quot;https://en.wikipedia.org/wiki/Bonjour_(software)&quot;&gt;Bonjour&lt;/a&gt; and open source &lt;a href=&quot;https://en.wikipedia.org/wiki/Avahi_(software)&quot;&gt;Avahi&lt;/a&gt; software packages, included in most Linux distributions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Although the Windows 10 implementation was limited to discovering networked printers, subsequent releases resolved hostnames as well.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;mDNS can work in conjunction with DNS Service Discovery (DNS-SD), a companion zero-configuration networking technique specified separately in &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc6763.html&quot;&gt;RFC 6763&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Multicast DNS was first proposed by Bill Woodcock and Bill Manning in the IETF in 2000, and was eventually published as standards-track IETF &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc6762.html&quot;&gt;RFC 6762&lt;/a&gt; by Stuart Cheshire and Marc Krochmal thirteen years later.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When an mDNS client needs to resolve a hostname,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;it sends an IP multicast query message that asks the host having that name to identify itself.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;That target machine then multicasts a message that includes its IP address.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;All machines in that subnet can then use that information to update their mDNS caches.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Any host can relinquish its claim to a name by sending a response packet with a time to live (TTL) equal to zero.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By default, mDNS exclusively resolves hostnames ending with the &lt;a href=&quot;https://en.wikipedia.org/wiki/.local&quot;&gt;.local&lt;/a&gt; top-level domain.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An mDNS message is a multicast UDP packet sent using the following addressing:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;IPv4 address &lt;em&gt;224.0.0.251&lt;/em&gt; or IPv6 address &lt;em&gt;ff02::fb&lt;/em&gt; and UDP port &lt;em&gt;5353&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When using Ethernet frames, the standard IP multicast MAC address &lt;em&gt;01:00:5E:00:00:FB&lt;/em&gt; (for IPv4) or &lt;em&gt;33:33:00:00:00:FB&lt;/em&gt; (for IPv6)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The payload structure is based on the unicast DNS packet format.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;avahi-resolve-host-name node-1.local
&lt;span class=&quot;go&quot;&gt;node-1.local	fe80::20c:29ff:fe85:2607&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;tcpdump &lt;span class=&quot;nt&quot;&gt;-tnvvv&lt;/span&gt; port 5353
&lt;span class=&quot;gp&quot;&gt;IP6 (flowlabel 0x83068, hlim 255, next-header UDP (17) payload length: 44) fe80::20c:29ff:fe8c:df3f.5353 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;ff02::fb.5353: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;bad udp &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0x0894 -&amp;gt; 0xc569!] 0 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2q] A &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;QM&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;? node-1.local. AAAA &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;QM&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;? node-1.local. &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;36&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 255, id 63528, offset 0, flags [DF], proto UDP (17), length 64)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.134.5353 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;224.0.0.251.5353: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;bad udp &lt;span class=&quot;nb&quot;&gt;cksum &lt;/span&gt;0xfd67 -&amp;gt; 0xd095!] 0 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2q] A &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;QM&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;? node-1.local. AAAA &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;QM&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;? node-1.local. &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;36&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;IP6 (flowlabel 0xac503, hlim 255, next-header UDP (17) payload length: 60) fe80::20c:29ff:fe85:2607.5353 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;ff02::fb.5353: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;udp &lt;span class=&quot;nb&quot;&gt;sum &lt;/span&gt;ok] 0&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;- &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;0q] 1/0/0 node-1.local. &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Cache flush&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2m] AAAA fe80::20c:29ff:fe85:2607 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;52&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 255, id 13910, offset 0, flags [DF], proto UDP (17), length 112)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.137.5353 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;224.0.0.251.5353: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;udp &lt;span class=&quot;nb&quot;&gt;sum &lt;/span&gt;ok] 0&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;- &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;0q] 3/0/0 node-1.local. &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Cache flush&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2m] AAAA fe80::20c:29ff:fe85:2607, node-1.local. &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Cache flush&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2m] A 192.168.91.135, node-1.local. &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Cache flush&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2m] A 192.168.91.137 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;84&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;dig +search +nocmd +nostats &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 5353 @224.0.0.251 node-1.local A
&lt;span class=&quot;gp&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; Got answer:
&lt;span class=&quot;gp&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; WARNING: .local is reserved &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;Multicast DNS
&lt;span class=&quot;gp&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; You are currently testing what happens when an mDNS query is leaked to DNS
&lt;span class=&quot;gp&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; -&amp;gt;&amp;gt;HEADER&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;opcode&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;: QUERY, status: NOERROR, id: 15791
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;; flags: qr aa; QUERY: 1, ANSWER: 2, AUTHORITY: 0, ADDITIONAL: 0
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; QUESTION SECTION:
&lt;span class=&quot;gp&quot;&gt;;&lt;/span&gt;node-1.local.			IN	A
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; ANSWER SECTION:
&lt;span class=&quot;go&quot;&gt;node-1.local.		10	IN	A	192.168.91.137
node-1.local.		10	IN	A	192.168.91.135

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;dig +search +nocmd +nostats &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 5353 @224.0.0.251 node-1.local AAAA
&lt;span class=&quot;gp&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; Got answer:
&lt;span class=&quot;gp&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; WARNING: .local is reserved &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;Multicast DNS
&lt;span class=&quot;gp&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; You are currently testing what happens when an mDNS query is leaked to DNS
&lt;span class=&quot;gp&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; -&amp;gt;&amp;gt;HEADER&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;opcode&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;: QUERY, status: NOERROR, id: 61682
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;; flags: qr aa; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; QUESTION SECTION:
&lt;span class=&quot;gp&quot;&gt;;&lt;/span&gt;node-1.local.			IN	AAAA
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; ANSWER SECTION:
&lt;span class=&quot;go&quot;&gt;node-1.local.		10	IN	AAAA	fe80::20c:29ff:fe85:2607&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;tcpdump &lt;span class=&quot;nt&quot;&gt;-tnv&lt;/span&gt; port 53 or port 5353
&lt;span class=&quot;go&quot;&gt;tcpdump: listening on ens32, link-type EN10MB (Ethernet), snapshot length 262144 bytes
IP (tos 0x0, ttl 1, id 36980, offset 0, flags [none], proto UDP (17), length 81)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.34856 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;224.0.0.251.5353: 15791+ &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;1au] A &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;QM&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;? node-1.local. &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;53&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 255, id 45595, offset 0, flags [DF], proto UDP (17), length 90)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.137.5353 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.34856: 15791&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;- 2/0/0 node-1.local. A 192.168.91.137, node-1.local. A 192.168.91.135 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;62&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 1, id 39442, offset 0, flags [none], proto UDP (17), length 81)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.51000 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;224.0.0.251.5353: 61682+ &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;1au] AAAA &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;QM&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;? node-1.local. &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;53&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 255, id 47214, offset 0, flags [DF], proto UDP (17), length 86)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.137.5353 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.51000: 61682&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;- 1/0/0 node-1.local. AAAA fe80::20c:29ff:fe85:2607 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;58&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;systemctl status avahi-daemon.service
&lt;span class=&quot;go&quot;&gt;● avahi-daemon.service - Avahi mDNS/DNS-SD Stack
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;     Loaded: loaded (/lib/systemd/system/avahi-daemon.service;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;enabled&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; vendor preset: enabled&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;     Active: active (running) since Wed 2022-12-14 11:53:34 CST;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;5min ago
&lt;span class=&quot;go&quot;&gt;TriggeredBy: ● avahi-daemon.socket
   Main PID: 1864 (avahi-daemon)
     Status: &quot;avahi-daemon 0.8 starting up.&quot;
      Tasks: 2 (limit: 4633)
     Memory: 784.0K
        CPU: 23ms
     CGroup: /system.slice/avahi-daemon.service
             ├─1864 avahi-daemon: running [node-0.local]
             └─1865 avahi-daemon: chroot helper

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl restart avahi-daemon.service
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /etc/resolv.conf
&lt;span class=&quot;go&quot;&gt;domain localdomain
search localdomain
nameserver 192.168.91.2

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;ping &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; 1 node-1
&lt;span class=&quot;go&quot;&gt;PING node-1.localdomain (192.168.91.137) 56(84) bytes of data.
64 bytes from 192.168.91.137 (192.168.91.137): icmp_seq=1 ttl=64 time=0.216 ms

--- node-1.localdomain ping statistics ---
1 packets transmitted, 1 received, 0% packet loss, time 0ms
rtt min/avg/max/mdev = 0.216/0.216/0.216/0.000 ms&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;tcpdump &lt;span class=&quot;nt&quot;&gt;-tnv&lt;/span&gt; port 53 or port 5353
&lt;span class=&quot;go&quot;&gt;tcpdump: listening on ens32, link-type EN10MB (Ethernet), snapshot length 262144 bytes
IP (tos 0x0, ttl 64, id 22416, offset 0, flags [DF], proto UDP (17), length 64)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.57800 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.2.53: 43159+ A? node-1.localdomain. &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;36&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 64, id 22417, offset 0, flags [DF], proto UDP (17), length 64)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.57800 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.2.53: 16776+ AAAA? node-1.localdomain. &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;36&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 128, id 17525, offset 0, flags [none], proto UDP (17), length 136)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.2.53 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.57800: 16776 NXDomain 0/1/0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;108&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 1, id 50969, offset 0, flags [none], proto UDP (17), length 58)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.1.5353 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;224.0.0.251.5353: 0 A &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;QM&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;? node-1.local. &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;30&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 255, id 5793, offset 0, flags [DF], proto UDP (17), length 84)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.137.5353 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;224.0.0.251.5353: 0&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;- &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;0q] 2/0/0 node-1.local. &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Cache flush&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; A 192.168.91.137, node-1.local. &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Cache flush&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; A 192.168.91.135 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;56&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;IP6 (flowlabel 0xfc266, hlim 1, next-header UDP (17) payload length: 38) fe80::50c2:d6ef:87fb:1b7b.5353 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;ff02::fb.5353: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;udp &lt;span class=&quot;nb&quot;&gt;sum &lt;/span&gt;ok] 0 A &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;QM&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;? node-1.local. &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;30&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 128, id 17526, offset 0, flags [none], proto UDP (17), length 80)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.2.53 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.57800: 43159&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;- 1/0/0 node-1.localdomain. A 192.168.91.137 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;52&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist bibliography&quot;&gt;
&lt;ul class=&quot;bibliography&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;tcp_ip_vol_1&quot;&gt;&lt;/a&gt;[1] Kevin Fall, W. Stevens &lt;em&gt;TCP/IP Illustrated: The Protocols, Volume 1&lt;/em&gt;. 2nd edition, Addison-Wesley Professional, 2011&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><category term="networking" /><category term="networking" /><category term="dns" /></entry><entry><title type="html">TCP/IP: User Datagram Protocol (UDP) and IP Fragmentation</title><link href="https://blog.codefarm.me/2022/12/06/tcp-ip-user-datagram-protocol-udp-and-ip-fragmentation/" rel="alternate" type="text/html" title="TCP/IP: User Datagram Protocol (UDP) and IP Fragmentation" /><published>2022-12-06T08:37:47+08:00</published><updated>2022-12-06T08:37:47+08:00</updated><id>https://blog.codefarm.me/2022/12/06/tcp-ip-user-datagram-protocol-udp-and-ip-fragmentation</id><content type="html" xml:base="https://blog.codefarm.me/2022/12/06/tcp-ip-user-datagram-protocol-udp-and-ip-fragmentation/">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;UDP is a simple, datagram-oriented, transport-layer protocol that preserves message boundaries.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It does not provide error correction, sequencing, duplicate elimination, flow control, or congestion control.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It can provide error detection, and it includes the first true &lt;em&gt;end-to-end&lt;/em&gt; checksum at the transport layer that we have encountered.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This protocol provides minimal functionality itself, so applications using it have a great deal of control over how packets are sent and processed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/tcp-ip/udp-and-ip-fragmentation/ipv4-udp-datagram-message-format.png&quot; alt=&quot;IPv4 UDP Datagram&quot; width=&quot;45%&quot; height=&quot;45%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. Encapsulation of a UDP datagram in a single IPv4 datagram (the typical case with no IPv4 options). The IPv6 encapsulation is similar; the UDP header follows the header chain.&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#udp-header&quot;&gt;1. UDP Header&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#udp-checksum&quot;&gt;2. UDP Checksum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#udp-and-ipv6&quot;&gt;3. UDP and IPv6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#udp-lite&quot;&gt;4. UDP-Lite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ip-fragmentation&quot;&gt;5. IP Fragmentation&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#example-udpipv4-fragmentation&quot;&gt;5.1. Example: UDP/IPv4 Fragmentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#reassembly-timeout&quot;&gt;5.2. Reassembly Timeout&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#path-mtu-discovery-with-udp&quot;&gt;6. Path MTU Discovery with UDP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#interaction-between-ip-fragmentation-and-arpnd&quot;&gt;7. Interaction between IP Fragmentation and ARP/ND&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#maximum-udp-datagram-size&quot;&gt;8. Maximum UDP Datagram Size&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#implementation-limitations&quot;&gt;8.1. Implementation Limitations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#datagram-truncation&quot;&gt;8.2. Datagram Truncation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#udp-server-design&quot;&gt;9. UDP Server Design&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#ip-addresses-and-udp-port-numbers&quot;&gt;9.1. IP Addresses and UDP Port Numbers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#restricting-local-ip-addresses&quot;&gt;9.2. Restricting Local IP Addresses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#using-multiple-addresses&quot;&gt;9.3. Using Multiple Addresses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#restricting-foreign-ip-address&quot;&gt;9.4. Restricting Foreign IP Address&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#using-multiple-servers-per-port&quot;&gt;9.5. Using Multiple Servers per Port&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#spanning-address-families-ipv4-and-ipv6&quot;&gt;9.6. Spanning Address Families: IPv4 and IPv6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#lack-of-flow-and-congestion-control&quot;&gt;9.7. Lack of Flow and Congestion Control&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#references&quot;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;udp-header&quot;&gt;1. UDP Header&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/tcp-ip/udp-and-ip-fragmentation/udp-header-and-payload.png&quot; alt=&quot;UDP Header and Payload&quot; width=&quot;35%&quot; height=&quot;35%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2. The UDP header and payload (data) area. The Checksum field is end-to-end and is computed over the UDP pseudo-header, which includes the Source and Destination IP Address fields from the IP header. Thus, any modification made to those fields (e.g., by NAT) requires a modification to the UDP checksum.&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Port numbers act as &lt;em&gt;mailboxes&lt;/em&gt; and help a protocol implementation identify the sending and receiving processes. They are purely &lt;em&gt;abstract&lt;/em&gt;—they do not correspond to any physical entity on a host.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In UDP, port numbers are positive 16-bit numbers, and the source port number is optional; it may be set to 0 if the sender of the datagram never requires a reply.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Transport protocols such as TCP, UDP, and SCTP [RFC4960] use the destination port number to help demultiplex incoming data from IP.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Because IP demultiplexes the incoming IP datagram to a particular transport protocol based on the value of the &lt;em&gt;Protocol&lt;/em&gt; field in the IPv4 header or &lt;em&gt;Next Header&lt;/em&gt; field in the IPv6 header, this means that the port numbers can be made independent among the transport protocols.&lt;/p&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Despite this independence, if a well-known service is provided (or can conceivably be provided) by both TCP and UDP, the port number is normally allocated to be the same for both transport protocols. This is purely for convenience and is not required by the protocols.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The UDP &lt;em&gt;Length&lt;/em&gt; field is the length of the UDP header and the UDP data in bytes. The minimum value for this field is 8 except when UDP is used with IPv6 jumbograms.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that the UDP &lt;em&gt;Length&lt;/em&gt; field is redundant; the IPv4 header contains the datagram&amp;#8217;s total length, and the IPv6 header contains the payload length.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The length of a UDP/IPv4 datagram is then the &lt;em&gt;Total Length&lt;/em&gt; of the IPv4 datagram minus the length of the IPv4 header.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A UDP/IPv6 datagram&amp;#8217;s length is the value of the &lt;em&gt;Payload Length&lt;/em&gt; field contained in the IPv6 header minus the lengths of any extension headers (unless jumbograms are being used).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In either case, the UDP &lt;em&gt;Length&lt;/em&gt; field should match the length computed from the IP-layer information.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;udp-checksum&quot;&gt;2. UDP Checksum&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The UDP checksum is the first end-to-end transport-layer checksum we have encountered (ICMP has an end-to-end checksum but is not a true transport protocol). It covers the UDP header, the UDP data, and a pseudo-header.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is computed at the initial sender and checked at the final destination. It is not modified in transit (except when it passes through a NAT).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Recall that the checksum in the IPv4 header covers only the header (i.e.,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;it does not cover any data in the IP packet)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;and is recomputed at each IP hop (required because the IPv4 &lt;em&gt;TTL&lt;/em&gt; field is decremented by routers when the datagram is forwarded).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Transport protocols (e.g., TCP, UDP) use checksums to cover their headers and data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;With UDP, the checksum is optional (although strongly suggested), while with the others it is mandatory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When UDP is used with IPv6, computation and use of the checksum are mandatory because there is no header checksum at the IP layer.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To provide error-free data to applications, a transport-layer protocol such as UDP must always compute a checksum or use some other error detection mechanism before delivering the data to a receiving application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The pseudo-header is virtual and is used only for purposes of the checksum computation (at both the sender and the receiver).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It is never actually transmitted.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This pseudo-header includes the source and destination addresses and &lt;em&gt;Protocol&lt;/em&gt; or &lt;em&gt;Next Header&lt;/em&gt; field (which should contain the value 17) from the IP header.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Its purpose is to let the UDP layer verify that the data has arrived at the correct destination (i.e., that IP has not accepted a misaddressed datagram, and that IP has not given UDP a datagram that is for another transport protocol).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/tcp-ip/udp-and-ip-fragmentation/ipv4-udp-pesudo-header-checksum.png&quot; alt=&quot;UDP pseduo-header checksum&quot; width=&quot;40%&quot; height=&quot;40%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 3. Fields used in computing the checksum for UDP/IPv4 datagrams, including the pseudo-header, the UDP header, and data. If the data is not an even number of bytes, it is padded with one 0 byte for purposes of computing the checksum. The pseudo-header and any pad bytes are not transmitted with the datagram.&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt; | nc &lt;span class=&quot;nt&quot;&gt;-4u&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-w0&lt;/span&gt; 192.168.91.137 330&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;root@node-0:~#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;tcpdump &lt;span class=&quot;nt&quot;&gt;-tnv&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; host 192.168.91.137 and &lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt; udp or icmp &lt;span class=&quot;se&quot;&gt;\)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 64, id 38490, offset 0, flags [DF], proto UDP (17), length 33)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.58585 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.330: UDP, length 5
&lt;span class=&quot;go&quot;&gt;	0x0000:  4500 0021 965a 4000 4011 6c17 c0a8 5b80  E..!.Z@.@.l...[.
	0x0010:  c0a8 5b89 e4d9 014a 000d 9d83 6865 6c6c  ..[....J....hell
	0x0020:  6f                                       o
IP (tos 0xc0, ttl 64, id 62130, offset 0, flags [none], proto ICMP (1), length 61)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.137 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128: ICMP 192.168.91.137 udp port 330 unreachable, length 41
&lt;span class=&quot;go&quot;&gt;	IP (tos 0x0, ttl 64, id 38490, offset 0, flags [DF], proto UDP (17), length 33)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.58585 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.330: UDP, length 5
&lt;span class=&quot;go&quot;&gt;	0x0000:  45c0 003d f2b2 0000 4001 4ef3 c0a8 5b89  E..=....@.N...[.
	0x0010:  c0a8 5b80 0303 3576 0000 0000 4500 0021  ..[...5v....E..!
	0x0020:  965a 4000 4011 6c17 c0a8 5b80 c0a8 5b89  .Z@.@.l...[...[.
	0x0030:  e4d9 014a 000d 9d83 6865 6c6c 6f         ...J....hello&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;udp-and-ipv6&quot;&gt;3. UDP and IPv6&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/tcp-ip/udp-and-ip-fragmentation/ipv6-udp-tcp-pesudo-header-checksum.png&quot; alt=&quot;UDP/TCP IPv6 pseduo-header&quot; width=&quot;45%&quot; height=&quot;45%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 4. The UDP (and TCP) pseudo-header used with IPv6 ([RFC2460]). The pseudo-header includes the source and destination IPv6 addresses and a larger 32-bit &lt;em&gt;Length&lt;/em&gt; field value. The pseudo-header checksum is required when UDP is used with IPv6 because the IPv6 header lacks a checksum. The &lt;em&gt;Next Header&lt;/em&gt; field is copied from the last IPv6 header of the chain.&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A related but more subtle distinction is that in IPv6, no IP-layer header checksum is present.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If UDP were to operate with checksums disabled, there would be no &lt;em&gt;end-to-end check whatsoever&lt;/em&gt; on the correctness of the IP-layer addressing information.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When UDP is used with IPv6, a pseudo-header checksum, common to both UDP and TCP, is required.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In IPv6, the minimum MTU size is 1280 bytes (as opposed to the 576 bytes required by IPv4 as the minimum size required to be supported by all hosts).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IPv6 supports jumbograms (packets larger than 65,535 bytes).&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When encapsulated in IPv6, a UDP/IPv6 datagram exceeding 65,535 bytes has its UDP &lt;em&gt;Length&lt;/em&gt; field value set to 0.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt; |  nc &lt;span class=&quot;nt&quot;&gt;-6u&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-w0&lt;/span&gt; fe80::20c:29ff:fe85:2610%ens32 330&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;root@node-0:~#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;tcpdump &lt;span class=&quot;nt&quot;&gt;-tnv&lt;/span&gt; host fe80::20c:29ff:fe85:2610 and &lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt; udp or icmp6 &lt;span class=&quot;se&quot;&gt;\)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;tcpdump: listening on ens32, link-type EN10MB (Ethernet), snapshot length 262144 bytes
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;IP6 (flowlabel 0x6b6e1, hlim 64, next-header UDP (17) payload length: 9) fe80::20c:29ff:fe8c:df3f.33297 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;fe80::20c:29ff:fe85:2610.330: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;udp &lt;span class=&quot;nb&quot;&gt;sum &lt;/span&gt;ok] UDP, length 1
&lt;span class=&quot;go&quot;&gt;	0x0000:  6006 b6e1 0009 1140 fe80 0000 0000 0000  `......@........
	0x0010:  020c 29ff fe8c df3f fe80 0000 0000 0000  ..)....?........
	0x0020:  020c 29ff fe85 2610 8211 014a 0009 0506  ..)...&amp;amp;....J....
	0x0030:  20
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;IP6 (flowlabel 0xa4c7d, hlim 64, next-header ICMPv6 (58) payload length: 57) fe80::20c:29ff:fe85:2610 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;fe80::20c:29ff:fe8c:df3f: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;icmp6 &lt;span class=&quot;nb&quot;&gt;sum &lt;/span&gt;ok] ICMP6, destination unreachable, unreachable port, fe80::20c:29ff:fe85:2610 udp port 330
&lt;span class=&quot;go&quot;&gt;	0x0000:  600a 4c7d 0039 3a40 fe80 0000 0000 0000  `.L}.9:@........
	0x0010:  020c 29ff fe85 2610 fe80 0000 0000 0000  ..)...&amp;amp;.........
	0x0020:  020c 29ff fe8c df3f 0104 7ef6 0000 0000  ..)....?..~.....
	0x0030:  6006 b6e1 0009 1140 fe80 0000 0000 0000  `......@........
	0x0040:  020c 29ff fe8c df3f fe80 0000 0000 0000  ..)....?........
	0x0050:  020c 29ff fe85 2610 8211 014a 0009 0506  ..)...&amp;amp;....J....
	0x0060:  20&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;udp-lite&quot;&gt;4. UDP-Lite&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some applications are tolerant of bit errors that may be introduced in the data they send and receive. Often, these types of applications wish to use UDP in order to avoid connection setup overhead or to use broadcast or multicast addressing, but UDP uses a checksum that covers either the entire payload or none of it (i.e., when no checksum is computed by the sender).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A protocol called &lt;strong&gt;UDP-Lite&lt;/strong&gt; or &lt;strong&gt;UDPLite&lt;/strong&gt; [RFC3828] addresses this issue by modifying the conventional UDP protocol to provide partial checksums. Such checksums cover only a portion of the payload in each UDP datagram.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;UDP-Lite has its own IPv4 Protocol and IPv6 Next Header field value (136), so it effectively counts as a separate transport protocol.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/tcp-ip/udp-and-ip-fragmentation/udp-lite-message-format.png&quot; alt=&quot;UDP-Lite Message&quot; width=&quot;45%&quot; height=&quot;45%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 5. UDP-Lite includes a Checksum Coverage field that gives the number of bytes (starting with the first byte of the UDP-Lite header) covered by the checksum. The minimum value is 0, indicating that the whole datagram is covered. Values 1 through 7 are invalid, as the header is always covered. UDP-Lite uses a different IPv4 protocol number (136) from UDP (17). IPv6 uses the same values in the &lt;em&gt;Next Header&lt;/em&gt; field.&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;ip-fragmentation&quot;&gt;5. IP Fragmentation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The link-layer framing normally imposes an upper limit on the maximum size of a frame that can be transmitted.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To keep the IP datagram abstraction consistent and isolated from link-layer details, IP employs &lt;em&gt;fragmentation&lt;/em&gt; and &lt;em&gt;reassembly&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Whenever the IP layer receives an IP datagram to send, it determines which local interface the datagram is to be sent over next (via a forwarding table lookup) and what MTU is required.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;IP compares the outgoing interface&amp;#8217;s MTU with the datagram size and performs fragmentation if the datagram is too large.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fragmentation in IPv4 can take place at the original sending host and at any intermediate routers along the end-to-end path. Note that datagram fragments can themselves be fragmented.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fragmentation in IPv6 is somewhat different because only the source is permitted to perform fragmentation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When an IP datagram is fragmented, it is not reassembled until it reaches its final destination.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;example-udpipv4-fragmentation&quot;&gt;5.1. Example: UDP/IPv4 Fragmentation&lt;/h3&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/tcp-ip/udp-and-ip-fragmentation/udp-datagram-fragmentation-sample.png&quot; alt=&quot;UDP datagram fragmentation sample&quot; width=&quot;50%&quot; height=&quot;50%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 6. A single UDP datagram with 2992 UDP payload bytes is fragmented into three UDP/IPv4 packets (no options). The UDP header that contains the source and destination port numbers appears only in the first fragment (a complicating factor for firewalls and NATs). Fragmentation is controlled by the &lt;em&gt;Identification&lt;/em&gt;, &lt;em&gt;Fragment Offset&lt;/em&gt;, and &lt;em&gt;More Fragments&lt;/em&gt; (MF) fields in the IPv4 header.&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The original UDP datagram included 2992 bytes of application (UDP payload) data and 8 bytes of UDP header, resulting in an IPv4 &lt;em&gt;Total Length&lt;/em&gt; field value of 3020 bytes (recall that this size includes a 20-byte IPv4 header as well).&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When this datagram was fragmented into three packets, 40 extra bytes were created (20 bytes for each of the newly created IPv4 fragment headers). Thus, the total number of bytes sent is 3060, an increase in IP-layer overhead of about 1.3%.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;em&gt;Identification&lt;/em&gt; field value (set by the original sender) is copied to each fragment and is used to group them together when they arrive.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;em&gt;Fragment Offset&lt;/em&gt; field gives the offset of the first byte of the fragment payload byte in the original IPv4 datagram (&lt;em&gt;in 8-byte units&lt;/em&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finally, the &lt;em&gt;MF&lt;/em&gt; bit field indicates whether more fragments in the datagram should be expected and is 0 only in the final fragment.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Because each &lt;em&gt;Offset&lt;/em&gt; field is relative to the original datagram, the reassembly process can handle fragments that arrive out of order.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When a datagram is fragmented, the &lt;em&gt;Total Length&lt;/em&gt; field in the IPv4 header of each fragment is changed to be the total size of that fragment.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;ip addr show ens32
&lt;span class=&quot;gp&quot;&gt;2: ens32: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
&lt;span class=&quot;go&quot;&gt;    link/ether 00:0c:29:8c:df:3f brd ff:ff:ff:ff:ff:ff
    altname enp2s0
    inet 192.168.91.128/24 brd 192.168.91.255 scope global ens32
       valid_lft forever preferred_lft forever

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dd &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2992 &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/dev/zero &lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 &lt;span class=&quot;nv&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;none | nc &lt;span class=&quot;nt&quot;&gt;-w0&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; 192.168.91.128 192.168.91.137 330&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;root@node-0:~#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;tcpdump &lt;span class=&quot;nt&quot;&gt;-tnvvv&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; ens32 host 192.168.91.137 and udp
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 64, id 4494, offset 0, flags [+], proto UDP (17), length 1500)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.45401 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.330: UDP, length 2992
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 64, id 4494, offset 1480, flags [+], proto UDP (17), length 1500)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137: ip-proto-17
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 64, id 4494, offset 2960, flags [none], proto UDP (17), length 60)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137: ip-proto-17&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Using UDP, it is easy to generate IP fragmentation. On an Ethernet,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the maximum amount of data in a frame is ordinarily 1500 bytes,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;which leaves at most 1472 bytes for application data to avoid fragmentation, assuming 20 bytes for the IPv4 header and 8 bytes for the UDP header.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;ip addr show  ens32
&lt;span class=&quot;gp&quot;&gt;2: ens32: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
&lt;span class=&quot;go&quot;&gt;    link/ether 00:0c:29:8c:df:3f brd ff:ff:ff:ff:ff:ff
    altname enp2s0
    inet 192.168.91.128/24 brd 192.168.91.255 scope global ens32
       valid_lft forever preferred_lft forever

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;nping &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; 1 &lt;span class=&quot;nt&quot;&gt;--udp&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; 2022 &lt;span class=&quot;nt&quot;&gt;--data-length&lt;/span&gt; 1473 &lt;span class=&quot;nt&quot;&gt;--mtu&lt;/span&gt; 1600 &lt;span class=&quot;nt&quot;&gt;--df&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 2019 192.168.91.137
&lt;span class=&quot;go&quot;&gt;
Warning: fragmentation (mtu=1600) requested but the payload is too small already (1481)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;sendto in send_ip_packet_sd: sendto(4, packet, 1501, 0, 192.168.91.137, 16) =&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;Message too long
&lt;span class=&quot;gp&quot;&gt;Offending packet: UDP 192.168.91.128:2022 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137:2019 &lt;span class=&quot;nv&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;64 &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;47461 &lt;span class=&quot;nv&quot;&gt;iplen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1501
&lt;span class=&quot;gp&quot;&gt;SENT (0.0286s) UDP 192.168.91.128:2022 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137:2019 &lt;span class=&quot;nv&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;64 &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;47461 &lt;span class=&quot;nv&quot;&gt;iplen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1501
&lt;span class=&quot;go&quot;&gt;nping_event_handler(): READ-PCAP killed: Message too long

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;nping &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; 1 &lt;span class=&quot;nt&quot;&gt;--udp&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; 2022 &lt;span class=&quot;nt&quot;&gt;--data-length&lt;/span&gt; 1472 &lt;span class=&quot;nt&quot;&gt;--mtu&lt;/span&gt; 1600 &lt;span class=&quot;nt&quot;&gt;--df&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 2019 192.168.91.137
&lt;span class=&quot;go&quot;&gt;
Warning: fragmentation (mtu=1600) requested but the payload is too small already (1480)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;SENT (0.0275s) UDP 192.168.91.128:2022 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137:2019 &lt;span class=&quot;nv&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;64 &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;30623 &lt;span class=&quot;nv&quot;&gt;iplen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1500
&lt;span class=&quot;gp&quot;&gt;RCVD (0.0286s) ICMP [192.168.91.137 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128 Port 2019 unreachable &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3/code&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; IP &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;64 &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;8055 &lt;span class=&quot;nv&quot;&gt;iplen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;576 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;nping &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; 1 &lt;span class=&quot;nt&quot;&gt;--udp&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; 2022 &lt;span class=&quot;nt&quot;&gt;--data-length&lt;/span&gt; 1473 &lt;span class=&quot;nt&quot;&gt;--mtu&lt;/span&gt; 1472 &lt;span class=&quot;nt&quot;&gt;--df&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 2019 192.168.91.137
&lt;span class=&quot;go&quot;&gt;
Starting Nping 0.7.80 ( https://nmap.org/nping ) at 2022-12-07 16:22 CST
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;SENT (0.0214s) UDP 192.168.91.128:2022 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137:2019 &lt;span class=&quot;nv&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;64 &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;29894 &lt;span class=&quot;nv&quot;&gt;iplen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1501
&lt;span class=&quot;gp&quot;&gt;RCVD (0.0218s) ICMP [192.168.91.137 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128 Port 2019 unreachable &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3/code&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; IP &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;64 &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;8998 &lt;span class=&quot;nv&quot;&gt;iplen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;576 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;root@node-0:~#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;tcpdump &lt;span class=&quot;nt&quot;&gt;-ntv&lt;/span&gt; host 192.168.91.128 and udp
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 64, id 30623, offset 0, flags [DF], proto UDP (17), length 1500)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.2022 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.2019: UDP, length 1472
&lt;span class=&quot;go&quot;&gt;
IP (tos 0x0, ttl 64, id 29894, offset 0, flags [+], proto UDP (17), length 1492)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.2022 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137.2019: UDP, length 1473
&lt;span class=&quot;go&quot;&gt;IP (tos 0x0, ttl 64, id 29894, offset 1472, flags [none], proto UDP (17), length 29)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137: ip-proto-17&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If one fragment is lost, the entire datagram is lost.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;There is no way to resend only one fragment of a datagram.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When a fragment of a TCP segment is lost, TCP retransmits the entire TCP segment, which corresponds to an entire IP datagram.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Some UDP-based applications perform timeout and retransmission themselves, but this happens at a layer above UDP.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Indeed, if the fragmentation was done by an intermediate router, and not the originating system, there is no way for the originating system to know how the datagram was fragmented.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For this reason, fragmentation is often avoided.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;reassembly-timeout&quot;&gt;5.2. Reassembly Timeout&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The IP layer must start a timer when any fragment of a datagram first arrives. If this were not done, fragments that never arrive could eventually cause the receiver to run out of buffers and can constitute a form of attack opportunity.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;path-mtu-discovery-with-udp&quot;&gt;6. Path MTU Discovery with UDP&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For a protocol such as UDP, in which the calling application is generally in control of the outgoing datagram size, it is useful if there is some way to determine an appropriate datagram size if fragmentation is to be avoided.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Conventional PMTUD uses ICMP PTB messages in determining the largest packet size along a routing path that can be used without inducing fragmentation. These messages are typically processed below the UDP layer and are not directly visible to an application, so&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;either an API call is used for the application to learn the best current estimate of the path MTU size for each destination with which it has communicated,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;or the IP layer can perform PMTUD independently without the application knowing.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The IP layer often caches PMTUD information on a per-destination basis and times it out if it is not refreshed.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-1:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;sysctl net.ipv4.ip_forward
&lt;span class=&quot;go&quot;&gt;net.ipv4.ip_forward = 1

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;x@node-1:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;ip a show ens32
&lt;span class=&quot;gp&quot;&gt;2: ens32: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;mtu 900 qdisc pfifo_fast state UP group default qlen 1000
&lt;span class=&quot;go&quot;&gt;    link/ether 00:0c:29:85:26:10 brd ff:ff:ff:ff:ff:ff
    inet 192.168.91.137/24 brd 192.168.91.255 scope global ens32
       valid_lft forever preferred_lft forever&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;ip r
&lt;span class=&quot;go&quot;&gt;default via 192.168.91.137 dev ens32
192.168.91.0/24 dev ens32 proto kernel scope link src 192.168.91.128

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;ping &lt;span class=&quot;nt&quot;&gt;-M&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; 1472 &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; 1 10.170.109.10
&lt;span class=&quot;go&quot;&gt;PING 10.170.109.10 (10.170.109.10) 1472(1500) bytes of data.
ping: local error: message too long, mtu=900

--- 10.170.109.10 ping statistics ---
1 packets transmitted, 0 received, +1 errors, 100% packet loss, time 0ms

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;ip r show cache
&lt;span class=&quot;go&quot;&gt;10.170.109.10 via 192.168.91.137 dev ens32
    cache expires 578sec mtu 900&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Path MTU discovery can sometimes cause problems because firewalls and filtering gateways may drop ICMP traffic indiscriminately, which can harm the PMTU discovery algorithm.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Because of this, it is possible to disable PMTU discovery on a system-wide or finer-granularity basis.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;On Linux, the file &lt;code&gt;/proc/sys/net/ipv4/ip_no_pmtu_disc&lt;/code&gt; can have a &lt;code&gt;1&lt;/code&gt; written to it to disable the feature.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On Windows, it involves editing the registry entry &lt;code&gt;HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\Tcpip\Parameters\EnablePMTUDiscovery&lt;/code&gt; to include the value &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An alternative to conventional PMTUD that does not use ICMP has also been developed [RFC4821].&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;interaction-between-ip-fragmentation-and-arpnd&quot;&gt;7. Interaction between IP Fragmentation and ARP/ND&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Using UDP, we can see the relationship between induced IP fragmentation and typical implementations of ARP.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Recall that ARP is used to map IP-layer addresses to corresponding MAC-layer addresses on the same IPv4 subnet.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The questions with which we are concerned include, When multiple fragments are to be sent, how many ARP messages should be generated, and how many of the fragments are held until a pending ARP request/response is completed? (Similar questions apply with IPv6 ND.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Returning to our host and LAN using a 1500-byte MTU, we use the following two commands to see the answer:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;ping &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; 8192 &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; 1 192.168.91.110
&lt;span class=&quot;go&quot;&gt;PING 192.168.91.110 (192.168.91.110) 8192(8220) bytes of data.
From 192.168.91.128 icmp_seq=1 Destination Host Unreachable

--- 192.168.91.110 ping statistics ---
1 packets transmitted, 0 received, +1 errors, 100% packet loss, time 0ms

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;ping &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; 8192 &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; 1 192.168.91.137
&lt;span class=&quot;go&quot;&gt;PING 192.168.91.137 (192.168.91.137) 8192(8220) bytes of data.
8200 bytes from 192.168.91.137: icmp_seq=1 ttl=64 time=1.13 ms

--- 192.168.91.137 ping statistics ---
1 packets transmitted, 1 received, 0% packet loss, time 0ms
rtt min/avg/max/mdev = 1.129/1.129/1.129/0.000 ms&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;tcpdump &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; ens32 &lt;span class=&quot;nt&quot;&gt;-tttnv&lt;/span&gt; icmp or arp
&lt;span class=&quot;go&quot;&gt;tcpdump: listening on ens32, link-type EN10MB (Ethernet), snapshot length 262144 bytes
 00:00:00.000000 ARP, Ethernet (len 6), IPv4 (len 4), Request who-has 192.168.91.110 tell 192.168.91.128, length 28
 00:00:01.030208 ARP, Ethernet (len 6), IPv4 (len 4), Request who-has 192.168.91.110 tell 192.168.91.128, length 28
 00:00:01.024150 ARP, Ethernet (len 6), IPv4 (len 4), Request who-has 192.168.91.110 tell 192.168.91.128, length 28

 00:00:06.177783 ARP, Ethernet (len 6), IPv4 (len 4), Request who-has 192.168.91.137 tell 192.168.91.128, length 28
 00:00:00.000262 ARP, Ethernet (len 6), IPv4 (len 4), Reply 192.168.91.137 is-at 00:0c:29:85:26:10, length 46

 00:00:00.000009 IP (tos 0x0, ttl 64, id 21330, offset 0, flags [+], proto ICMP (1), length 1500)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137: ICMP &lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;request, &lt;span class=&quot;nb&quot;&gt;id &lt;/span&gt;2725, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1, length 1480
&lt;span class=&quot;go&quot;&gt; 00:00:00.000030 IP (tos 0x0, ttl 64, id 21330, offset 1480, flags [+], proto ICMP (1), length 1500)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137: ip-proto-1
&lt;span class=&quot;go&quot;&gt; 00:00:00.000022 IP (tos 0x0, ttl 64, id 21330, offset 2960, flags [+], proto ICMP (1), length 1500)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137: ip-proto-1
&lt;span class=&quot;go&quot;&gt; 00:00:00.000022 IP (tos 0x0, ttl 64, id 21330, offset 4440, flags [+], proto ICMP (1), length 1500)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137: ip-proto-1
&lt;span class=&quot;go&quot;&gt; 00:00:00.000023 IP (tos 0x0, ttl 64, id 21330, offset 5920, flags [+], proto ICMP (1), length 1500)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137: ip-proto-1
&lt;span class=&quot;go&quot;&gt; 00:00:00.000019 IP (tos 0x0, ttl 64, id 21330, offset 7400, flags [none], proto ICMP (1), length 820)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.137: ip-proto-1
&lt;span class=&quot;c&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;maximum-udp-datagram-size&quot;&gt;8. Maximum UDP Datagram Size&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Theoretically, the maximum size of an IPv4 datagram is 65,535 bytes, imposed by the 16-bit &lt;em&gt;Total Length&lt;/em&gt; field in the IPv4 header. With an optionless IPv4 header of 20 bytes and a UDP header of 8 bytes, this leaves a maximum of 65,507 bytes of user data in a UDP datagram.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For IPv6, the 16-bit &lt;em&gt;Payload Length&lt;/em&gt; field permits an effective UDP payload of 65,527 bytes (8 of the 65,535 IPv6 payload bytes are used for the UDP header), assuming jumbograms are not being used.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are two main reasons why a full-size datagram of these sizes may not be delivered end-to-end, however.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;First, the system&amp;#8217;s local protocol implementation may have some limitation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Second, the receiving application may not be prepared to handle such large datagrams.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;implementation-limitations&quot;&gt;8.1. Implementation Limitations&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Protocol implementations provide an API to applications that pick some default buffer size for sending and receiving.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Some implementations provide defaults that are less than the maximum IP datagram size,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;and some actually do not support sending datagrams larger than a few tens of kilobytes (although this problem is not common).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The sockets API provides a set of functions that an application can call to set or query the size of the receive and send buffers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For a UDP socket, this size is directly related to the maximum size of UDP datagram the application can read or write.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Typical default values are 8192 bytes or 65,535 bytes, but these can generally be made larger by invoking the &lt;code&gt;setsockopt()&lt;/code&gt; API call.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Many UDP applications (e.g. DNS, DHCP, etc.) are designed to restrict their application data size to 512 bytes or less (resulting in IPv4 datagrams under 576 bytes), to stay below this limit.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;&lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc791#section-3.1&quot; class=&quot;bare&quot;&gt;https://www.rfc-editor.org/rfc/rfc791#section-3.1&lt;/a&gt;&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;text&quot;&gt;Total Length:  16 bits

    Total Length is the length of the datagram, measured in octets,
    including internet header and data.  This field allows the length of
    a datagram to be up to 65,535 octets.  Such long datagrams are
    impractical for most hosts and networks.  All hosts must be prepared
    to accept datagrams of up to 576 octets (whether they arrive whole
    or in fragments).  It is recommended that hosts only send datagrams
    larger than 576 octets if they have assurance that the destination
    is prepared to accept the larger datagrams.

    The number 576 is selected to allow a reasonable sized data block to
    be transmitted in addition to the required header information.  For
    example, this size allows a data block of 512 octets plus 64 header
    octets to fit in a datagram.  The maximal internet header is 60
    octets, and a typical internet header is 20 octets, allowing a
    margin for headers of higher level protocols.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;datagram-truncation&quot;&gt;8.2. Datagram Truncation&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Just because UDP/IP is capable of sending and receiving a datagram of a given (large) size does not mean the receiving application is prepared to read that size.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;UDP programming interfaces allow the application to specify the maximum number of bytes to return each time a network read operation completes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What happens if the received datagram exceeds the size specified?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In most cases, the answer to this question is that the API truncates the datagram, discarding any excess data in the datagram beyond the number of bytes specified by the receiving application.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;However, the exact behavior varies from implementation to implementation.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some systems provide the unconsumed portion of the datagram in subsequent read operations,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;and others inform the caller of how much data was truncated (or, in yet other cases, that some data was truncated, but not exactly how much).&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
In Linux, the &lt;code&gt;MSG_TRUNC&lt;/code&gt; option may be given to the sockets API to discover how much data was truncated.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;udp-server-design&quot;&gt;9. UDP Server Design&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are some characteristics of UDP that affect the design and implementation of networking application software wishing to use it [&lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc5405&quot;&gt;RFC5405&lt;/a&gt;].&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Servers typically interact with the operating system, and most need a way to handle multiple clients at the same time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the typical client/server scenario, a client starts, immediately communicates with a single server, and is done. Servers, on the other hand, start and then go to sleep, waiting for a client&amp;#8217;s request to arrive. They awaken when a client&amp;#8217;s datagram arrives, which usually requires the server to evaluate the request and possibly perform further processing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;ip-addresses-and-udp-port-numbers&quot;&gt;9.1. IP Addresses and UDP Port Numbers&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What arrives at a UDP server from a client is a UDP datagram.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The IP header contains the source and destination IP addresses,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;and the UDP header contains the source and destination UDP port numbers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When an application receives a UDP message,&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the IP and UDP headers have been stripped off;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the application must be told by the operating system in some other way who sent the message (the source IP address and port number), if it intends to furnish a reply. This feature allows a UDP server to handle multiple clients.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some servers need to know to &lt;em&gt;whom&lt;/em&gt; the datagram was sent, that is, the destination IP address.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Any server wishing to perform its tasks differently depending on the destination IP address selected by the client would require access to the destination IP address information.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In addition, some services may respond differently if the destination address is broadcast or multicast.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
A DNS server is one type of server that is sensitive to the destination IP address. It can use this information to arrange a particular sorting order on the address mappings it returns.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;restricting-local-ip-addresses&quot;&gt;9.2. Restricting Local IP Addresses&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Most UDP servers &lt;em&gt;wildcard&lt;/em&gt; their local IP address when they bind a UDP endpoint. This means that an incoming UDP datagram destined for the server&amp;#8217;s port is accepted on any local IP address (any IP address in use on the local machine, including the local loopback address).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;ncat &lt;span class=&quot;nt&quot;&gt;-vlu&lt;/span&gt; 7777
&lt;span class=&quot;go&quot;&gt;Ncat: Version 7.80 ( https://nmap.org/ncat )
Ncat: Listening on :::7777
Ncat: Listening on 0.0.0.0:7777&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;netstat &lt;span class=&quot;nt&quot;&gt;-lun&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State
udp        0      0 0.0.0.0:7777            0.0.0.0:*
udp6       0      0 :::7777                 :::*&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When the server creates its endpoint, it can specify one of the host&amp;#8217;s local IP addresses, including a broadcast address, as the local IP address for the endpoint. In such cases, incoming UDP datagrams are then passed to this endpoint only if the destination IP address matches the specified local address.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;ncat &lt;span class=&quot;nt&quot;&gt;-vlu&lt;/span&gt; 127.0.0.1 7777
&lt;span class=&quot;go&quot;&gt;Ncat: Version 7.80 ( https://nmap.org/ncat )
Ncat: Listening on 127.0.0.1:7777&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;netstat &lt;span class=&quot;nt&quot;&gt;-lun&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State
udp        0      0 127.0.0.1:7777          0.0.0.0:*&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;nping &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; 1 &lt;span class=&quot;nt&quot;&gt;--udp&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 7777 192.168.91.128
&lt;span class=&quot;go&quot;&gt;SENT (0.0026s) UDP packet with 4 bytes to 192.168.91.128:7777
ERR: (0.0026s) READ to 192.168.91.128:7777 failed: Connection refused&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;tcpdump &lt;span class=&quot;nt&quot;&gt;-tnv&lt;/span&gt; udp or icmp &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; any
&lt;span class=&quot;go&quot;&gt;lo    In  IP (tos 0x0, ttl 64, id 23511, offset 0, flags [DF], proto UDP (17), length 32)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.49849 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.7777: UDP, length 4
&lt;span class=&quot;go&quot;&gt;lo    In  IP (tos 0xc0, ttl 64, id 60067, offset 0, flags [none], proto ICMP (1), length 60)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128: ICMP 192.168.91.128 udp port 7777 unreachable, length 40
&lt;span class=&quot;go&quot;&gt;	IP (tos 0x0, ttl 64, id 23511, offset 0, flags [DF], proto UDP (17), length 32)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    192.168.91.128.49849 &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;192.168.91.128.7777: UDP, length 4&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;using-multiple-addresses&quot;&gt;9.3. Using Multiple Addresses&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is possible to start different servers on the same port number, each with a different local IP address.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;ip a show ens32
&lt;span class=&quot;gp&quot;&gt;2: ens32: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
&lt;span class=&quot;go&quot;&gt;    link/ether 00:0c:29:8c:df:3f brd ff:ff:ff:ff:ff:ff
    altname enp2s0
    inet 192.168.91.128/24 brd 192.168.91.255 scope global ens32
       valid_lft forever preferred_lft forever
    inet 192.168.91.129/24 brd 192.168.91.255 scope global secondary ens32
       valid_lft forever preferred_lft forever
    inet 192.168.91.134/24 brd 192.168.91.255 scope global secondary dynamic ens32
       valid_lft 1543sec preferred_lft 1543sec
    inet6 fe80::20c:29ff:fe8c:df3f/64 scope link
       valid_lft forever preferred_lft forever

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;ncat &lt;span class=&quot;nt&quot;&gt;-lu&lt;/span&gt; 8888
&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;ncat &lt;span class=&quot;nt&quot;&gt;-lu&lt;/span&gt; 192.168.91.129 8888
&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;ncat &lt;span class=&quot;nt&quot;&gt;-lu&lt;/span&gt; 192.168.91.128 8888&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;netstat &lt;span class=&quot;nt&quot;&gt;-nlu&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State
udp        0      0 192.168.91.129:8888     0.0.0.0:*
udp        0      0 192.168.91.128:8888     0.0.0.0:*
udp        0      0 0.0.0.0:8888            0.0.0.0:*
udp6       0      0 :::8888                 :::*&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is a priority implied when an endpoint with a wildcard address exists.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;An endpoint with a specific IP address that matches the destination IP address is always chosen over a wildcard.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The wildcard endpoint is used only when a specific match is not found.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;restricting-foreign-ip-address&quot;&gt;9.4. Restricting Foreign IP Address&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In all the netstat output that we showed earlier, the foreign IP address (i.e., the one not local to the host where the server is running) and foreign port number are shown as &lt;em&gt;0.0.0.0:*&lt;/em&gt;, meaning that the endpoint will accept an incoming UDP datagram from any IPv4 address and any port number.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, there is an option to restrict the foreign address. This means that the endpoint receives UDP datagrams only from that specific IPv4 address and port number.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 1. Types of address bindings for a UDP server&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 20%;&quot;&gt;
&lt;col style=&quot;width: 20%;&quot;&gt;
&lt;col style=&quot;width: 60%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Local Address&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Foreign Address&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;local_IP.local_port&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;foreign_IP.foreign_port&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Restricted to one client&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;local_IP.local_port&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;*.* (wildcard)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Restricted to one local IP
address and port (but for
any client)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;*.local_port&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;*.* (wildcard)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Restricted to local port
only&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;using-multiple-servers-per-port&quot;&gt;9.5. Using Multiple Servers per Port&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Although it is not specified in the RFCs, by default most implementations allow only one application endpoint at a time to be associated with any one (local IP address, UDP port number) pair for a given address family (i.e., IPv4 or IPv6).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When a UDP datagram arrives at a host destined for its IP address and an active port number, one copy is delivered to that single endpoint (e.g., a listening application).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The IP address of the endpoint can be the wildcard, as shown earlier, but only a single application can receive datagrams for the address(es) specified.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If we then try to start another server with the same wildcarded local address and the same port using the same address family, it does not work:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;socat - udp-listen:8888 &amp;amp; socat - udp-listen:8888
&lt;span class=&quot;go&quot;&gt;[1] 38249
2022/12/08 16:57:19 socat[38250] E bind(5, {AF=2 0.0.0.0:8888}, 16): Address already in use&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In support of multicasting, multiple endpoints can be allowed to use the same (local IP address, UDP port number) pair, although the application normally must tell the API (i.e., specifing the &lt;code&gt;SO_REUSEADDR&lt;/code&gt; option).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;socat - udp-listen:8888,reuseaddr &amp;amp; socat - udp-listen:8888,reuseaddr
&lt;span class=&quot;go&quot;&gt;[2] 38270&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When a UDP datagram arrives whose destination IP address is a broadcast or multicast address, and there are multiple endpoints at the destination IP address and port number, one copy of the incoming datagram is passed to each endpoint.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The endpoint&amp;#8217;s local IP address can be the wildcard, which matches any destination IP address.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;ncat &lt;span class=&quot;nt&quot;&gt;-vlu4&lt;/span&gt; 192.168.91.255 9999
&lt;span class=&quot;go&quot;&gt;Ncat: Version 7.80 ( https://nmap.org/ncat )
Ncat: Listening on 192.168.91.255:9999
Ncat: Connection from 192.168.91.137.
hello
hello&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;ncat &lt;span class=&quot;nt&quot;&gt;-vlu4&lt;/span&gt; 9999
&lt;span class=&quot;go&quot;&gt;Ncat: Version 7.80 ( https://nmap.org/ncat )
Ncat: Listening on 0.0.0.0:9999
Ncat: Connection from 192.168.91.137.
hello
hello&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-0:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;netstat &lt;span class=&quot;nt&quot;&gt;-nlu4&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State
udp        0      0 192.168.91.255:9999     0.0.0.0:*
udp        0      0 0.0.0.0:9999            0.0.0.0:*&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;x@node-1:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'hello'&lt;/span&gt; | nc &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; 192.168.91.255 9999&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But if a UDP datagram arrives whose destination IP address is a unicast address (i.e., an ordinary address), only a single copy of the datagram is delivered to one of the endpoints.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;spanning-address-families-ipv4-and-ipv6&quot;&gt;9.6. Spanning Address Families: IPv4 and IPv6&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is possible to write servers that span not only protocols (such as servers that respond to both TCP and UDP) but also across address families. That is, we may write a UDP server that responds to incoming requests for IPv4 as well as for IPv6.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While this may seem entirely straightforward (IPv6 addresses are just additional IP addresses on the same host that happen to be 128 bits long), there is a subtlety related to the sharing of the port space.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On some systems, the port space between IPv6 and IPv4 for UDP (and TCP) is &lt;em&gt;shared&lt;/em&gt;. This means that if a service binds to a UDP port using IPv4, it is also allocated the same port in the IPv6 port space (and vice versa), preventing other services from using it (unless the &lt;code&gt;SO_REUSEADDR&lt;/code&gt; socket option is used).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Furthermore, because IPv6 addresses can encode IPv4 addresses in an interoperable way, wildcard bindings in IPv6 may receive incoming IPv4 traffic.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;lack-of-flow-and-congestion-control&quot;&gt;9.7. Lack of Flow and Congestion Control&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Most UDP servers are &lt;em&gt;iterative&lt;/em&gt; servers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This means that a single server thread (or process) handles all the client requests on a single UDP port (e.g., the server&amp;#8217;s well-known port).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Normally there is a limited-size input queue associated with each UDP port that an application is using.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This means that requests arriving at about the same time from different clients are automatically queued by UDP.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The received UDP datagrams are passed to the application (when it asks for the next one) in the order in which they were received (i.e., FCFS—first come, first served).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is possible, however, for this queue to overflow, causing the UDP implementation to discard incoming datagrams.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This can happen even if only one client is being served because UDP provides no &lt;strong&gt;flow control&lt;/strong&gt; (that is, no way for the server to tell the client to slow down).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Because &lt;strong&gt;UDP is a connectionless protocol&lt;/strong&gt; with no reliability mechanism of its own, applications are not told when the UDP input queue overflows. The excess datagrams are just discarded by UDP.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Another concern arises from the fact that queues are also present in the IP routers between the sender and the receiver—in the middle of the network.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;When these queues become full, traffic may be discarded in a fashion similar to that of the UDP input queue.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When this happens, the network is said to be &lt;strong&gt;congested&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Congestion is undesirable because it affects all network users with traffic that traverses the point where congestion is occurring, as opposed to the UDP case previously, where only a single application server was affected.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;UDP poses a special concern for congestion because it has no way of being informed that it should slow down its sending rate if the network is being driven into congestion. It also has no mechanism for slowing down, even if it were told to do so. Thus, it is said to lack &lt;strong&gt;congestion control&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Congestion control is a complex subject and still an active area of research.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist bibliography&quot;&gt;
&lt;ul class=&quot;bibliography&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;tcp_ip_vol_1&quot;&gt;&lt;/a&gt;[1] Kevin Fall, W. Stevens &lt;em&gt;TCP/IP Illustrated: The Protocols, Volume 1&lt;/em&gt;. 2nd edition, Addison-Wesley Professional, 2011&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><category term="networking" /><category term="networking" /><category term="udp" /></entry></feed>